I"7<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이번 문제는 <strong>동적 계획법 DP</strong>를 이용해 풀 수 있는 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>필자는 반복문을 활용한 Bottom-Up 방식이 아닌 재귀 함수를 이용한 Top-Down 방식을 이용해 풀었다.</p>

<p>이번 문제는 이전에 풀었던 <a href="https://langoustinee.github.io/java/232-post/">계단 오르기</a>와 같은 <strong>LIS(최장 증가 부분 수열) 유형의 문제</strong>이다.</p>

<blockquote>
  <p>최장 증가 부분 수열(LIS)란 <strong>주어진 수열에서 오름차순으로 구성 가능한 원소들을 선택하여 최대 길이를 찾아내는 것</strong>이다. 잘 활용하면 O(N logN) 의 시간복잡도를 가진다.</p>
</blockquote>

<p>예제1을 살펴보면, <code class="language-plaintext highlighter-rouge">{10, 20, 10, 30, 20, 50}</code>라는 수열이 주어진다. N의 크기를 가지는 arr 배열에 해당 수열을 담고 DP 테이블에 해당 위치마다의 수열 길이를 메모이제이션하는 방식으로 접근하면 된다.</p>

<blockquote>
  <p>1 .arr[0]=10일 경우 증가 부분 수열은 arr[0]보다 이전 값이 없기에 <strong>{10}이라는 부분 수열만이 존재하여 1의 길이</strong>를 가진다. <code class="language-plaintext highlighter-rouge">DP[0] = 1</code></p>
  <ol>
    <li>arr[1]=20의 경우 arr[0]이 10으로 arr[1]보다 작기때문에 <strong>{10, 20}이라는 부분 수열</strong>을 만들 수 있다. <code class="language-plaintext highlighter-rouge">DP[1] = 2</code></li>
    <li>arr[2]=10의 경우, 이전 값들 중 작은 값이 없기 때문에 <strong>{10} 부분 수열</strong>을 만들 수 있다. <code class="language-plaintext highlighter-rouge">DP[2] = 1</code>
…</li>
  </ol>
</blockquote>

<p>위 과정을 N까지 반복하게 되면 <code class="language-plaintext highlighter-rouge">D = {1, 2, 1, 3, 2, 4}</code>라는 DP 테이블을 만들 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="no">DP</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">}</span> <span class="o">:</span> <span class="n">길이</span> <span class="mi">1</span>
<span class="no">DP</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">}</span> <span class="o">:</span> <span class="n">길이</span> <span class="mi">2</span>
<span class="no">DP</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">}</span> <span class="o">:</span> <span class="n">길이</span> <span class="mi">1</span>
<span class="no">DP</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">}</span> <span class="o">:</span> <span class="n">길이</span> <span class="mi">3</span>
<span class="no">DP</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">}</span> <span class="o">:</span> <span class="n">길이</span> <span class="mi">2</span>
<span class="no">DP</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">50</span><span class="o">}</span> <span class="o">:</span> <span class="n">길이</span> <span class="mi">4</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 부분 수열들의 길이를 DP 테이블의 위치마다 갱신하면 가장 긴 부분수열의 길이는 4라는 것을 알 수 있다.</p>

<p>이를 DP로 어떻게 접근하여 풀 수 있을까? 바로 탐색할 위치별로 이전 위치까지 다시 찾아나가며, 현재의 값보다 이전 값들 중 작은 값이 있을 경우 재귀호출을 통해 탐색해나가면</p>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="c1">// DP 테이블 선언</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="no">D</span><span class="o">;</span>
    
    <span class="c1">// 수열 입력 배열 선언</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>

        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
            <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">)))</span> <span class="o">{</span>
                
                <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

                <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
                <span class="no">D</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

                <span class="c1">// DP 테이블의 모든 값을 -1로 초기화</span>
                <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="no">D</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>

                <span class="c1">// 수열 입력</span>
                <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
                <span class="o">}</span>
                
                <span class="c1">// 0부터 N-1까지 재귀함수 호출하여 탐색</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">recursion</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="c1">// DP 테이블의 최댓값을 구하기 위해 오름차순 정렬</span>
                <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="no">D</span><span class="o">);</span>

                <span class="c1">// DP 테이블의 마지막 원소가 최댓값이 된다.</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="no">D</span><span class="o">[</span><span class="no">D</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
                
        <span class="o">}</span>

    <span class="o">}</span>
    
    <span class="cm">/**
     * DP 테이블을 갱신할 재귀함수
     * 
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">recursion</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 방문하지 않은 위치라면</span>
        <span class="k">if</span><span class="o">(</span><span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 모든 부분수열의 길이는 최소 1이기에 1로 초기화</span>
            <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="cm">/*
             * N-1부터 0까지 탐색하며 현재 값보다 작은 값을 찾는다.
             * 찾을 때, 재귀 호출을 통해 찾아온다.
             */</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="no">N</span><span class="o">])</span> <span class="o">{</span>
                    <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">],</span> <span class="n">recursion</span><span class="o">(</span><span class="n">i</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>    
        <span class="o">}</span>

        <span class="c1">// 메모이제이션을 통해 방문한 위치의 값을 바로 반환</span>
        <span class="k">return</span> <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1149">문제 링크</a>에서 참조바랍니다.</li>
</ul>
:ET