I"".<p><br /></p>

<center><img src="/assets/images/baekjoon/1874.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
8
4
3
6
8
7
5
2
1
</pre>
<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
+
+
+
+
-
-
+
+
-
+
+
-
-
-
-
-
</pre>
<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제 제목에도 나와있듯이, 자료구조중 하나인 스택(Stack)을 활용해야 한다. 입력값마다 스택에 push 및 pop을 하여 수열을 만들 수 있는지 검증해야 한다.</p>

<p>생각해낸 아이디어는 다음과 같다.
<strong>아이디어 도출</strong></p>
<ol>
  <li>1부터 N까지 오름차순으로 임시스택에 저장한다. ex) N=8이면, stack=[8,7,6,5,4,3,2,1]</li>
  <li>N만큼 반복하며 입력을 받아 임시스택의 맨 위 값과 같을 때까지 꺼내서 새 스택에 집어 넣는다.(push연산)</li>
  <li>새스택의 맨 위 값과 입력값이 같다면, 새 스택에서 값을 꺼낸다.(pop연산)</li>
  <li>다만, 새스택의 맨 위값과 입력값이 같지 않다면, 수열을 이룰 수 없으므로 NO를 출력해야 한다.</li>
</ol>

<p>n이 8일 때의 예를 들어보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre>tmp = [8,7,6,5,4,3,2,1] // 임시 스택
st = [] // 새 스택

input(4) &lt;= tmp.peek()=1
    st.push(tmp.pop()) // tmp=[8,7,6,5], st=[1,2,3,4], push연산 4번 수행
    input(4)==st.peek()=4
        st.pop() // st=[1,2,3], pop연산 1번 수행

input(3) &lt;= tmp.peek()=3
    input(3)==st.peek()=3
        st.pop() // st=[1,2], pop연산 1번 수행

input(6) &lt;= tmp.peek()=2
    st.push(tmp.pop()) // tmp=[8,7], st=[1,2,5,6], push연산 2번 수행
    input(6)==st.peek()=6
        st.pop() // st=[1,2,5], pop연산 1번 수행

input(8) &lt;= tmp.peek()=5
    st.push(tmp.pop()) // tmp=[8,7], st=[1,2,5,7,8], push연산 2번 수행
    input(8)==st.peek()=8
        st.pop() // st=[1,2,5,7], pop연산 1번 수행

input(7) &lt;= tmp.peek()=7
    input(7)==st.peek()=7
        st.pop() // st=[1,2,5], pop연산 1번 수행

input(5) &lt;= tmp.peek()=5
    input(5)==st.peek()=5
        st.pop() // st=[1,2], pop연산 1번 수행

이하 생략..

</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 로직대로 진행되면 push와 pop 연산별로 <strong>”+,+,+,+,-,-,+,+,-,+,+,-,-,-,-,-“</strong> 를 구할 수 있다. <br />
이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="kt">boolean</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N을 입력받고,</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="kt">boolean</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="n">tmp</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">input</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">tmp</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">tmp</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">tmp</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
                <span class="n">operator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"+"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">==</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="n">operator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"-"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">status</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
            
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">status</span><span class="o">==</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">op</span> <span class="o">:</span> <span class="n">operator</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">op</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"NO"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>java.util.EmptyStackException을 고려하며 풀어야 했기에 스택이 비어있는지를 잘 확인해야 했다.</li>
</ul>
:ET