I""(<p><br /></p>

<center><img src="/assets/images/programmers/" width="100%" /></center>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />

<p>이번 문제는 <strong>우선순위 큐</strong>를 활용한 <strong>최소 힙</strong>을 구현하여 풀 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>이 문제는 힙에 대한 지식이 어느정도 필요하다.</p>

<blockquote>
  <p>여기서 말하는 Heap(힙)은 최소값 및 최대값을 최대한 빠르게 찾아내기 위해 특별히 고안된 자료 구조이다.</p>
</blockquote>

<p>Java에서는 일반적으로 우선순위 큐인 PriorityQueue를 이용해 힙을 구현한다.</p>

<blockquote>
  <p>PriorityQueue는 우선순위 큐를 구현한 자료구조로서, 내부적으로 이진 힙(Binary Heap)을 사용하여 요소들을 저장하고 관리한다. 이진 힙은 완전 이진 트리의 형태를 갖춘 특별한 형태의 힙 자료구조로서, 최소 힙 또는 최대 힙의 형태로 사용될 수 있다.</p>
</blockquote>

<p>여기서 중요한 점은 바로 우선순위 큐를 이용하면 큐의 원소들은 우선순위에 따라 자동으로 정렬된다, <strong>즉 우선순위를 설정하여 정렬</strong>할 수 있다는 것이다. 문제대로라면 스코빌 지수가 K 이상이 되도록 모든 음식을 섞어야 하기에 <strong>첫번째 최소값과 두번째 최소값을 알기 위해 큐를 오름차순으로 정렬</strong>해 두어야 한다.</p>

<p>이러한 우선순위 큐를 이용해 문제 풀이를 위한 아이디어는 다음과 같다.</p>

<ol>
  <li>우선순위 큐의 우선순위를 최소로 설정한다.(PriorityQueue는 기본값으로 최소값이 우선순위가 되도록 제공한다.)</li>
  <li>우선순위큐에 scoville의 원소들을 담는다.</li>
  <li>큐의 첫번째 값이 K보다 작다면, <code class="language-plaintext highlighter-rouge">첫번째 최소값 + (두번째 최소값 * 2)</code> 연산을 수행해 큐에 재삽입한다.</li>
  <li>3번 과정을 반복하며 섞는 횟수를 1 증가시킨다.</li>
  <li>위 3-4번 과정을 반복하며 큐의 첫번째 값이 K보다 크다면 순회를 종료하고 섞는 횟수를 출력한다.</li>
  <li>이때, 첫번째 값이 K보다 작다면 모든 수를 K 이상으로 만들 수 없기에 종료하고 -1을 출력한다.</li>
</ol>

<p><br /></p>

<p>다음으로 문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
</pre></td><td class="rouge-code"><pre>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">scoville</span><span class="o">,</span> <span class="kt">int</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 1. scoville의 최솟값이 K보다 커야 한다.</span>
        <span class="c1">// 2. 최솟값이 K보다 작다면, 섞어야 한다.</span>
        <span class="c1">// 3. 첫번째 최소값+(두번째 최솟값*2) 연산의 값을 다시 삽입한다.</span>
        <span class="c1">// 4. 위 1-3번 과정을 반복하며 scoville의 최소값이 K보다 크다면 섞은 횟수를 출력한다.</span>
        <span class="c1">// 5. 이때, scoville을 우선순위 큐를 이용해 최소 힙처럼 사용한다.</span>

        <span class="c1">// 우선순위 큐 선언</span>
        <span class="c1">// 기본으로 최소값을 우선으로 두는 힙처럼 사용할 수 있다.</span>
        <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">scoville</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">scoville</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="c1">// 스코빌 지수를 K 이상으로 만들기 위해 섞는 횟수</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="c1">// 모든 음식을 K 이상으로 만들 수 있는지 여부를 담을 변수</span>
        <span class="kt">boolean</span> <span class="n">possiable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 큐의 원소가 하나남았음에도 K를 만들지 못한다면 </span>
            <span class="c1">// 모든 원소를 K 이상으로 만들지 못하기에 순회를 종료한다.</span>
            <span class="k">if</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">possiable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            
            <span class="c1">// 첫번째 최소값+(두번째 최솟값*2) 연산한 값을 큐에 재삽입한다.</span>
            <span class="kt">int</span> <span class="n">first_min</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">second_min</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">first_min</span><span class="o">+(</span><span class="n">second_min</span><span class="o">*</span><span class="mi">2</span><span class="o">));</span>
            
            <span class="c1">// 섞는 횟수를 1 증가시킨다.</span>
            <span class="n">answer</span><span class="o">++;</span>

        <span class="o">}</span>
        
        <span class="c1">// 모든 원소를 K 이상으로 만들지 못하기에 -1을 반환한다.</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">possiable</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
        
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        
        <span class="c1">// int[] scoville = new int[]{1, 2, 3, 9, 10, 12};</span>
        <span class="c1">// int K = 7;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">scoville</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>

        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">scoville</span><span class="o">,</span> <span class="no">K</span><span class="o">);</span>

    <span class="o">}</span>

<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<p>-
—</p>

<p><br /></p>

<h3 id="출처">출처</h3>
<p>-
—</p>

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://school.programmers.co.kr/learn/courses/30/lessons/42626">문제 링크</a>에서 참조바랍니다.</li>
</ul>
:ET