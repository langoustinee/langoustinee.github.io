I":<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이 문제는 재귀를 통한 <strong>백트래킹</strong> 유형으로 풀 수 있는 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>문제의 입력을 살펴보면 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">첫째</span> <span class="n">줄</span> <span class="o">:</span> <span class="n">수의</span> <span class="n">개수</span> <span class="no">N</span>
<span class="n">둘째</span> <span class="n">줄</span> <span class="o">:</span> <span class="n">수</span>
<span class="n">셋째</span> <span class="n">줄</span> <span class="o">:</span> <span class="n">덧셈</span><span class="o">,</span> <span class="n">뺄셈</span><span class="o">,</span> <span class="n">곱셈</span><span class="o">,</span> <span class="n">나눗셈</span> <span class="n">각각의</span> <span class="n">개수</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>필자는 연산자를 입력받는 셋째 줄에서 각 연산자를 1차원 배열로 처리하도록 구현하였다. 문제풀이를 위한 아이디어는 다음과 같다.</p>

<ol>
  <li>N개의 수를 N 크기의 배열에 입력받고, 4칸의 배열에 연산자의 개수를 입력받는다.</li>
  <li>연산자 개수만큼 4번을 반복하며 +, -, *, / 경우에 따른 DFS 재귀함수를 호출해나간다.</li>
  <li>첫번째 수부터 N번째 수까지 +, -, *, / 연산한 값을 깊이를 1 증가시키며 다음 DFS로 재귀 호출한다.</li>
  <li>이때, 연산자 개수를 1씩 감소시키고 DFS를 호출한 뒤 연산자 개수를 다시 1 증가시켜줘야 한다.</li>
</ol>

<p>즉, 4칸의 배열에 각각 연산자의 개수를 입력하고, 반복문안에서 재귀호출을 해주는 것이다. 그리고 재귀호출 때 마다 해당 연산자 인덱스를 1 감소시키며 0이 된다면 다음 인덱스(연산자)로 넘어간다.</p>

<p>간단하게 코드로 보면 다음과 같다.</p>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="c1">// 둘째줄에 N개의 수를 담을 배열 선언</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
    
    <span class="c1">// +,-,*,/ 4개의 연산자 개수를 담을 배열 선언</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">operator</span><span class="o">;</span>

    <span class="c1">// 수의 개수 N, 최댓값 max, 최솟값 min 선언</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="n">max</span><span class="o">,</span> <span class="n">min</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>

        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
            <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">)))</span> <span class="o">{</span>
            
                <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

                <span class="c1">// 수 배열 및 연산자 배열 초기화</span>
                <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
                <span class="n">operator</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>

                <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
                <span class="o">}</span>
                
                <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">operator</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
                <span class="o">}</span>
                
                <span class="c1">// 최댓값 및 최솟값을 찾기 위한 초기화</span>
                <span class="n">max</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
                <span class="n">min</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>

                <span class="c1">// DFS 함수 호출</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>

                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">max</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">min</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="o">}</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>

        <span class="cm">/**
         * 재귀 종료 조건
         * 1부터 N 수까지의 탐색을 완료했다면 재귀를 종료한다.
         * 이때, 현재 수와 재귀호출을 통해 만들어낸 n이 최대일 때와 최소인 값을 담은 후 종료한다.
         */</span>
        <span class="k">if</span><span class="o">(</span><span class="n">idx</span> <span class="o">==</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
            <span class="n">min</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            
            <span class="c1">// 현재 연산자 개수가 1개 이상이라면</span>
            <span class="k">if</span><span class="o">(</span><span class="n">operator</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                
                <span class="c1">// 해당 연산자 개수 1 차감</span>
                <span class="n">operator</span><span class="o">[</span><span class="n">i</span><span class="o">]--;</span>

                <span class="cm">/*
                 * i 별로 재귀호출한다.
                 * i==0 이면 +
                 * i==1 이면 -
                 * i==2 이면 *
                 * i==3 이면 /
                 */</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">dfs</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">],</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">dfs</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">],</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">dfs</span><span class="o">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">],</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">dfs</span><span class="o">(</span><span class="n">n</span> <span class="o">/</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">],</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="c1">// 해당 연산자 개수를 다시 원복한다.</span>
                <span class="n">operator</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>

            <span class="o">}</span>

        <span class="o">}</span>

    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/14888">문제 링크</a>에서 참조바랍니다.</li>
</ul>
:ET