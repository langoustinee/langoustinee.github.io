I"$Q<p><br /></p>

<center><img src="/assets/images/baekjoon/1654.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 이분 탐색을 적절히 응용할 줄 알아야 한다.<br />
먼저 문제의 패턴부터 살펴보자. 먼저 K개의 랜선을 동일한 길이의 N개의 랜선으로 잘라 만들어야 하는데, 이 때 최대로 가질 수 있는 길이를 구해야 한다. <br /></p>

<p>예제와 같이 K=4, N=11이라고 한다면 4개의 랜선을 11개로 만들 수 있을 때 최대로 가질 수 있는 길이를 찾아보자.<br /></p>

<ol>
  <li>
    <p>만약 198의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 198씩 4개, <br />
743 길이를 가진 랜선은 198씩 3개, <br />
457 길이를 가진 랜선은 198씩 2개, <br />
539 길이를 가진 랜선은 198씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 198</strong>이다.</p>
  </li>
  <li>
    <p>만약 199의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 199씩 4개, <br />
743 길이를 가진 랜선은 199씩 3개, <br />
457 길이를 가진 랜선은 199씩 2개, <br />
539 길이를 가진 랜선은 199씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 199</strong>이다.</p>
  </li>
  <li>
    <p>만약 201의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 201씩 3개, <br />
743 길이를 가진 랜선은 201씩 3개, <br />
457 길이를 가진 랜선은 201씩 2개, <br />
539 길이를 가진 랜선은 201씩 2개로 총 <strong>10개의 랜선을 가지게되어 11개를 만들 수가 없다.</strong></p>
  </li>
  <li>
    <p>만약 200의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 200씩 4개, <br />
743 길이를 가진 랜선은 200씩 3개, <br />
457 길이를 가진 랜선은 200씩 2개, <br />
539 길이를 가진 랜선은 200씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 200</strong>이다..</p>
  </li>
</ol>

<p>결국 <strong>11개의 랜선을 가질 때 200의 길이를 가져야 최대 길이가 됨</strong>을 알 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>이제 문재는 이분 탐색을 이용하여 최대로 가질 수 있는 길이를 어떻게 구할 수 있을까? <br />
일반적으로 이분 탐색은 <strong>배열에서 원하는 인덱스를 찾기 위해서 사용</strong>하였다. 그런데 이 문제에서는 특정 인덱스가 아니라 문제 그대로 <strong>길이</strong>를 구해야 한다는 것이다.</p>

<ul>
  <li>테스트케이스의 입력 범위는 int형의 상한 범위까지 주어질 수 있기 때문에 이분 탐색에 필요한 데이터들은 모두 <strong>long형으로 선언</strong>해야 한다.</li>
  <li>배열의 인덱스를 찾는 것이 아니기에 별도로 배열을 정렬할 필요는 없다.</li>
  <li>0부터 입력받은 랜선 중 가장 긴 길이를 가진 수만큼 이분 탐색을 진행한다.
    <ul>
      <li>mid(중간 길이) 값을 구한다.
        <ul>
          <li>현재 탐색 범위에서 최소길이(min)와 최대길이(max)의 합을 2로 나누어 구한다. <code class="language-plaintext highlighter-rouge">mid = (min + max) / 2</code></li>
          <li>mid(중간 길이) 값이 0이 될 경우를 고려하여 <strong>min 값을 0이 아닌 1로 선언</strong>한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>이분 탐색을 통해 얻어낸 값에 -1은 최대길이가 된다.</li>
</ul>

<p><br /></p>

<p>아이디어는 좀 복잡해 보이는데 작성한 코드를 보며 하나씩 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

<span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">K</span><span class="o">];</span>
<span class="kt">long</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>

<span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>K와 N을 입력받고 K개의 랜선 길이를 담을 배열을 선언한다. <br />
그리고 K개의 랜선중 가장 긴 길이를 저장하기 위한 long형 max 변수를 선언하자. <br />
다음으로 주어진 랜선의 길이들을 배열에 저장해가며, 가장 긴 랜선의 길이를 max에 저장한다. <br />
마지막으로 이분 탐색에서 이용할 최소 길이를 가지는 min 변수와 중간 길이를 가지게 될 mid 변수를 long형으로 선언하고 각각 1, 0으로 초기화한다.</p>

<blockquote>
  <p>max, min, mid를 long형으로 초기화한 이유는? <br />
문제의 요구사항을 보면 <strong>랜선의 길이는 2^31-1보다 작거나 같은 자연수</strong>라고 알려주고 있다. int형으로는 범위 초과가 발생할 수 있기 때문에 안전하게 long형으로 선언하여 사용하기 위함이다.</p>
</blockquote>

<blockquote>
  <p>min의 초기값을 1로 설정한 이유는? <br />
<strong>by zero 에러를 방지하기 위해 min을 1로 설정</strong>하였다. 예를 들어 K가 1이고, N이 1이며 입력받은 랜선의 길이 1이라고 한다면 min이 0이되고 max가 1이 되면서 중간 길이 값이 되는 mid가 0이 나오기에 연산을 수행할 때 0으로 나눗셈 연산이 되버리는 문제가 발생할 수 있다. (java.lang.ArithmeticException:/by zero 예외 발생)</p>
</blockquote>

<p>마지막으로 이분 탐색 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="n">min</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">max</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 1</span>
    <span class="kt">int</span> <span class="n">lengthCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 2</span>

    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">lengthCnt</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">lengthCnt</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">/</span> <span class="n">mid</span><span class="o">;</span> <span class="c1">// 3</span>
    <span class="o">}</span>

    <span class="k">if</span><span class="o">(</span><span class="n">lengthCnt</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 4</span>
    <span class="k">else</span> <span class="n">min</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 5 </span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">min</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>최소 길이부터 최대 길이까지 while문을 통해 반복하는데 안에서 수행할 내용은 다음과 같다. <br /></p>
<ol>
  <li>먼저 중간 값을 구한다.</li>
  <li>랜선을 잘라서 개수를 비교할 lengthCnt 변수를 선언한다.</li>
  <li>중간 길이인 mid로 비교해야 하기 때문에 각 반복마다 for문을 통해 랜선마다 중간 길이로 잘라서 개수를 구한다.</li>
  <li>upper bound 형식을 적용한다. <br />
 4.1. 중간 길이(mid)로 잘랐을 때 개수가 만들고자 하는 랜선의 개수보다 작다면(lengthCnt &lt; N) 원하는 개수보다 잘라진 랜선들이 적다는 것이다. 즉, <strong>하나의 잘라진 랜선이 너무 길기 때문에 더 짧게 잘라야 한다는 것을 의미한다. 그래서 자르고자 하는 길이를 줄이기 위해 최대 길이를 줄인다.</strong> <br />
 4.2. 또한 중간길이(mid)로 잘랐을 때 개수가 만들고자 하는 랜선의 개수보다 크거나 같다면(lengthCnt &gt; N) 원하는 개수보다 잘라진 랜선들이 많다는 것이다. 결국 <strong>잘라진 랜선이 너무 짧기에 더 길게 만들 수 있다는 것을 의미한다. 그래서 자르고자 하는 길이를 늘려야 하므로 최소 길이를 늘린다.</strong></li>
</ol>

<blockquote>
  <p>Upper Bound란? <br />
Upper Bound는 찾고자 하는 값보다 큰 값이 처음으로 나타나는 위치이다. 결국 상한값을 찾는 것인데, 찾고자 하는 특정 값을 초과하는 ‘첫 위치’를 반환한다.</p>
</blockquote>

<p>위 과정을 통해서 랜선의 개수가 중복될 때 최대 길이를 찾아야 하므로 <strong>Upper Bound를 통해 얻어진 값에서 -1을 해주면 최대 길이</strong>가 된다.</p>

<blockquote>
  <p>upper bound를 통해 얻어진 값에서 -1을 하는 이유? <br />
예를 들어 arr=[1,2,2,2,3] 배열에서 찾을 key가 2라면 2를 초과하는 처음 위치는 3인데 이는 arr[4], 즉 index로는 4이다. 문제에서는 중복되는 랜선 개수들 중 최대길이를 찾아야 했으므로 중복되는 랜선 개수들 중 가장 끝값(Upper Bound-1)이 최대길이가 되기 때문이다.</p>
</blockquote>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">K</span><span class="o">];</span>
        <span class="kt">long</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(</span><span class="n">min</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">max</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">length</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">/</span> <span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">if</span><span class="o">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">else</span> <span class="n">min</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">min</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li></li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1654">문제 링크</a>에서 참조바랍니다.</li>
</ul>
:ET