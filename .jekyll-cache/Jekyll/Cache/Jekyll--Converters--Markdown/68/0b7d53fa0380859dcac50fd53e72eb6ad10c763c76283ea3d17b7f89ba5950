I"xC<p><br /></p>
<center><img src="/assets/images/programmers/20230305_01.png" width="100%" /></center>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 <code class="language-plaintext highlighter-rouge">주식 가격</code> 문제는 필자의 가독성이 부족한 것인지, 도저히 지문 자체가 이해가 안되어 지문을 이해하는 것이 더 어려웠다. <br />
이 때, 다른 분의 지문 해석 글이 지문을 이해하는데 큰 도움이 되었기 때문에 해당 <a href="https://school.programmers.co.kr/questions/20326?question=20326">링크</a>를 공유한다.</p>

<p>해당 지문 재해석의 글에서는 아래와 같이 지문을 이해하기 쉽게 알려주었다.</p>

<h4 id="문제설명">문제설명</h4>
<p>n초 간의 주가를 초 단위로 기록한 배열 prices가 매개변수로 주어질 때, 각 초의 주가를 기준으로 해당 초 부터 n초 사이에 가격이 떨어지지 않은 시간은 몇 초인지 배열에 담아 return 하도록 solution 함수를 완성하세요.</p>

<h4 id="제한사항">제한사항</h4>
<p>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
prices의 길이 n은 2 이상 100,000 이하입니다. (2 &lt;= n &lt;= 100,000)</p>

<h4 id="입출력-예">입출력 예</h4>
<p>prices : [1, 2, 3, 2, 3]
return : [4, 3, 1, 1, 0]</p>

<h4 id="입출력-예-설명">입출력 예 설명</h4>
<p>1초의 주가는 1이며 1초부터 5초까지 총 4초간 주가를 유지했습니다.
2초의 주가는 2이며 2초부터 5초까지 총 3초간 주가를 유지했습니다.
3초의 주가는 3이며 4초의 주가는 2로 주가가 떨어졌지만 3초에서 4초가 되기 직전까지의 1초간 주가가 유지 된것으로 봅니다. 따라서 5초까지 총 1초간 주가를 유지했습니다.
4초의 주가는 2이며 4초부터 5초까지 총 1초간 주가를 유지했습니다.
5초의 주가는 3이며 5초 이후로는 데이터가 없으므로 총 0초간 주가를 유지했습니다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>주어진 number 만큼 1부터 number까지 배열로 만든다.</li>
  <li>위에서 만든 배열을 순회하면서 각 요소마다 <strong>약수의 개수</strong>를 구하고 이를 공격력으로 칭한 변수에 담는다.
    <ul>
      <li>약수의 개수를 구하는 로직을 <strong>별도의 함수에서 수행</strong>한다.</li>
    </ul>
  </li>
  <li>구한 공격력(약수의 개수)가 limit보다 크다면, power로 대체한다.</li>
  <li>마지막으로 모든 공격력의 누적합을 구하면 요구하는 철의 무게가 된다.</li>
</ul>

<p><br /></p>

<p>아이디어 자체는 간단하니 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">knights</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">number</span><span class="o">];</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">knights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>먼저 모든 기사단원의 공격력을 합해 철의무게를 반환할 answer 변수와 주어진 number 만큼의 크기를 가질 knights 배열을 선언한다. <br />
그리고 1부터 number까지의 수로 knights 배열을 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">knights</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">atk</span> <span class="o">=</span> <span class="n">divisor</span><span class="o">(</span><span class="n">knights</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">atk</span> <span class="o">&gt;</span> <span class="n">limit</span><span class="o">)</span> <span class="n">atk</span> <span class="o">=</span> <span class="n">power</span><span class="o">;</span>
    <span class="n">answer</span> <span class="o">+=</span> <span class="n">atk</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그리고 knights 배열을 순회하면서 각 요소마다 atk이라는 변수에 약수의 개수를 구해서 담는다. <br />
이 때, 구한 atk가 limit보다 크다면 power로 대체시키면 된다.</p>

<p>이렇게 구한 atk들의 누적합을 구한다면 요구하는 철의 무게를 구할 수 있다. <br />
그런데 아이디어 자체는 크게 문제가 없어보였지만, 약수의 개수를 구할 때 <strong>시간초과 문제가 발생</strong>하게 되었다.</p>

<p><br /></p>

<h4 id="일반적으로-약수의-개수-구하기">일반적으로 약수의 개수 구하기</h4>
<p>알고보니 아무 생각없이 작성했던 약수를 구하는 로직 자체가 문제였다. <br />
number의 수가 커질수록 그만큼 반복문이 돌아야 하기 때문에 시간적으로 매우 비효율적이라는 것을 알 수 있었다. <br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// 일반적인 약수를 구하는 방법</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>문제의 제한사항을 살펴보니 다음과 같았다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">1 ≤ number ≤ 100,000</code></li>
  <li><code class="language-plaintext highlighter-rouge">2 ≤ limit ≤ 100</code></li>
  <li><code class="language-plaintext highlighter-rouge">1 ≤ power ≤ limit</code></li>
</ul>

<p>number가 최대 십만까지 주어질 수 있기에 그만큼 배열의 길이가 늘어날테니 이를 고려하기 위해서는 결국 약수를 구하는 로직의 시간을 줄여야 한다.</p>

<p><br /></p>

<h4 id="약수의-개수를-보다-효율적으로-구하기">약수의 개수를 보다 효율적으로 구하기</h4>
<p>앞에서 약수를 구할 때 발생한 시간초과 해결을 위해 약수 개수 구하는 알고리즘 수정해야 했다.</p>

<p>만약 n의 약수가 1일 때 다른 약수는 n/1이 되므로 다른 하나의 약수는 number가 된다. <br />
이 때, n의 약수 중 하나를 i라고 한다면, 다른 약수는 <strong>n/i 가 되므로 하나의 약수를 알면 다른 하나의 약수의 존재가 보장</strong>된다.</p>

<p>이를 코드로 표현하면 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span><span class="o">+=</span><span class="mi">2</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>우선, for 루프에서 i는 1부터 n의 제곱근까지 증가시킨다. 그 이유는 <strong>n의 제곱근 이후의 값에서는 n을 나누어 떨어지는 수가 나오지 않기 때문</strong>이다. <br />
예를 들자면, n이 16이라면 4 이후의 값에서는 16을 나누어 떨어지게 하는 수가 없는 것과 같다.</p>

<p>다음으로, i * i 가 n과 같으면, i는 n의 약수이기 때문에 cnt 변수를 1만큼 증가시킨다. <br />
그런데, 만약 i * i 가 n과 같지 않으면서 n을 i로 나누어 떨어지게 하는 경우, <strong>i와 n/i 둘 다 n의 약수인 것으로 보고 cnt 변수를 2만큼 증가</strong>시키면 된다.</p>

<p><br /></p>

<p>이처럼 약수의 개수를 구하는 알고리즘 n의 제곱근을 황용하여 효율적으로 수정할 수 있었고, 정상적으로 테스트케이스를 모두 통과할 수 있었다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">,</span> <span class="kt">int</span> <span class="n">power</span><span class="o">)</span> <span class="o">{</span>

        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">knights</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">number</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">knights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">knights</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">atk</span> <span class="o">=</span> <span class="n">divisor</span><span class="o">(</span><span class="n">knights</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">atk</span> <span class="o">&gt;</span> <span class="n">limit</span><span class="o">)</span> <span class="n">atk</span> <span class="o">=</span> <span class="n">power</span><span class="o">;</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">atk</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">divisor</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span><span class="o">+=</span><span class="mi">2</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">cnt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">power</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="n">limit</span><span class="o">,</span> <span class="n">power</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>약수의 개수를 구하는 알고리즘에 대해서 다시 한번 생각해보고 고민하여 약수를 구할 수의 제곱근을 황용하여 보다 효율적인 방법으로 약수의 개수를 구할 수 있었다.</li>
</ul>
:ET