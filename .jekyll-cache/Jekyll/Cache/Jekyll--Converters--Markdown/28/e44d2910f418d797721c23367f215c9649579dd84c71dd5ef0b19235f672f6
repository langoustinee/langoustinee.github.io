I"><p><br /></p>

<center><img src="/assets/images/baekjoon/18310.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<p>이번 문제는 <strong>그리디 알고리즘과 정렬</strong>을 알고 있다면 쉽게 풀 수 있는 문제이다.</p>

<h4 id="그리디-알고리즘이란">그리디 알고리즘이란?</h4>

<p><strong>그리디 알고리즘(Greedy Algorithm)</strong>은 최적해를 구하는 데 사용되는 방법 중 하나이다.
가장 직관적인 알고리즘 설계 패러타임 중 하나이며, <strong>매번 단계에서 선택할 때마다 가장 좋은 답을 선택</strong>하는 기법이다. 지금 선택한 것을 앞으로의 남은 선택에 영향을 끼칠지 고려하지 않는다는 전제이며, 전반적으로 적절한 결과를 도출하자는 알고리즘 기법이다. 항상 최적의 답을 구하는 것은 아니지만 어느정도 최적의 답에 근사한 결과를 빠르게 구할 수 있다는 장점이 있다. 특정 상황에서는 그리디 알고리즘이 최적의 답을 보장할 수도 있다.</p>

<p><img src="/assets/images/baekjoon/18310-attach01.png" width="100%" /></p>

<h3 id="문제-분석">문제 분석</h3>

<p>처음엔 단순히 집들의 평균거리를 구해서 평균과 가장 가까운 집을 선택하면 될 것이라 생각했지만 아니었다. <br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>N = 5
1 6 9 9 9
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/images/baekjoon/18310-attach02.png" width="100%" /></p>

<p>위 예제를 보면 평균을 구하면 6.8이므로 가장 가까운 건 <code class="language-plaintext highlighter-rouge">6</code>이지만, 6의 거리 차이의 합은 <code class="language-plaintext highlighter-rouge">14</code>이고 9의 거리의 차이는 실제로 <code class="language-plaintext highlighter-rouge">11</code>이기에 <code class="language-plaintext highlighter-rouge">6</code>이 아닌 <code class="language-plaintext highlighter-rouge">9</code>일 때 최소 거리의 합이 충족된다.
따라서 평균 값으로 구하면 안된다는 것을 알 수 있었다.</p>

<ul>
  <li>처음 <code class="language-plaintext highlighter-rouge">1</code>의 위치에 있을 때 차이의 합은 <code class="language-plaintext highlighter-rouge">29(0+5+8+8+8)</code> 이다.</li>
  <li><code class="language-plaintext highlighter-rouge">2</code>의 위치에 있다면 <code class="language-plaintext highlighter-rouge">26(1+4+7+7+7)</code> 이다.</li>
  <li><code class="language-plaintext highlighter-rouge">3</code>의 위치라면 <code class="language-plaintext highlighter-rouge">23(2+3+6+6+6)</code> 이다.</li>
  <li><code class="language-plaintext highlighter-rouge">4</code>의 위치라면 <code class="language-plaintext highlighter-rouge">20(3+2+5+5+5)</code> 이다.</li>
  <li><code class="language-plaintext highlighter-rouge">5</code>의 위치라면 <code class="language-plaintext highlighter-rouge">17(4+1+4+4+4)</code> 이다.</li>
  <li><code class="language-plaintext highlighter-rouge">6</code>의 위치라면 <code class="language-plaintext highlighter-rouge">14(5+0+3+3+3)</code> 이다.</li>
  <li><code class="language-plaintext highlighter-rouge">7</code>의 위치에 있다면 <code class="language-plaintext highlighter-rouge">13(6+1+2+2+2)</code> 이다.</li>
  <li><code class="language-plaintext highlighter-rouge">8</code>의 위치에 있다면 <code class="language-plaintext highlighter-rouge">12(7+2+1+1+1)</code>이다.</li>
  <li><code class="language-plaintext highlighter-rouge">9</code>의 위치라면 <code class="language-plaintext highlighter-rouge">11(8+3+0+0+0)</code> 이다.</li>
</ul>

<p>즉,<code class="language-plaintext highlighter-rouge">1</code>부터 순회하면 현재 위치보다 좌측 지점의 수만큼 <code class="language-plaintext highlighter-rouge">+N</code>이 되고, 현재 위치보다 우측 지점의 수만큼 <code class="language-plaintext highlighter-rouge">-M</code>이 되는 식이다. <br />
그런데 문제에서 요구하는 것은 집이 위치한 곳에만 안테나 설치가 가능하다. 고로 <strong>주어지는 집들의 번호가 여러개일 때 항상 중위값에 위치한 집에 안테나를 설치</strong>하는 것이 가장 적절하다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>이번 문제는 주어진 집들 중 모든 집까지의 거리의 합이 최소가 되는 집을 찾는 문제이기 때문에 결국 <strong>가운데에 위치한 집이 최적의 선택</strong>이 된다. 그 이유는, 모든 집까지의 거리의 합이 최소가 되어야 하므로 중간에 위치한 집이 다른 집들로부터의 거리가 가장 적기 때문이다.</p>

<p>즉, <strong>정렬 후 중간에 위치한 값을 출력</strong>해주면 된다. 그런데 문제에서는 <code class="language-plaintext highlighter-rouge">여러 개의 값이 도출될 경우 가장 작은 값</code>을 원한다고 했으니 N이 짝수일 때와 홀수 일때 기준으로 나누어서 중간 값을 구하면 된다.
예를 들어 5개라면 3번째 값, 6개라면 3번째 값을 출력하면 되는데, 인덱스로 따지면 <code class="language-plaintext highlighter-rouge">N/2-1</code> 인덱스의 값을 출력해주면 된다.</p>

<ul>
  <li>N이 홀수일 때: arr[N/2]</li>
  <li>N이 짝수일 떄: arr[N/2-1]</li>
</ul>

<p><br /></p>

<p>이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>N을 입력받고 N만큼의 크기를 가지는 배열을 하나 선언하자. 그리고 N만큼 공백 기준으로 입력받으면서 배열에 집들의 위치를 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="no">N</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="no">N</span><span class="o">/</span><span class="mi">2</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>배열의 중간 값을 찾기 위해서 오름차순 정렬을 먼저 진행한다. <br />
그리고 N이 짝수라면 <code class="language-plaintext highlighter-rouge">arr[N/2-1]</code>로 중간값을 찾을 수 있고, 홀수라면 <code class="language-plaintext highlighter-rouge">arr[N/2]</code>로 중간값을 찾으면 된다.</p>

<p>따라서, 주어진 집들을 오름차순으로 정렬한 후, 중간에 위치한 집을 선택하면 최적의 선택이 되어 모든 집까지의 거리의 합이 최소가 된다. <br />
위와 같이 그리디 알고리즘을 사용하여 이 문제를 해결하였다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="c1">// 오름차순 정렬을 실시하여 배열의 중위값을 반환해야합니다</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

        <span class="c1">// 중위값은 N이 짝수인지, 홀수인지에 따라 나뉘어지므로 이 부분을 구분하여 답을 출력해야합니다</span>
        <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="no">N</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="no">N</span><span class="o">/</span><span class="mi">2</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>

<ul>
  <li>이 문제에서도 가운데에 위치한 집이 최적의 선택이기 때문에 매 순간 최적인 선택을 하는 알고리즘인 그리디 알고리즘을 활용할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/18310">문제 링크</a>에서 참조바랍니다.</li>
</ul>
:ET