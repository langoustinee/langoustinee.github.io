I",<p><br /></p>

<center><img src="/assets/images/programmers/" width="100%" /></center>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />

<p>이 문제는 완전탐색을 활용해 풀기보다는 <strong>그리디 알고리즘</strong>을 활용해 풀어야 한다.</p>

<p><br /></p>

<h4 id="아아디어-도출">아아디어 도출</h4>

<p>정직하게 문제에서 주어진대로 접근한다면 1번큐와 2번큐 중 추출시 선택의 기로가 생기게 되고, 결국 <strong>큐의 길이(최대 300,000)만큼 완전 탐색하며 경우의 수를 따지게 된다면 시간초과가 발생</strong>할 수 있다.</p>

<p>모든 큐의 합을 맟추려하지 말고, 아래처럼 접근하며 어떨까?</p>

<blockquote>
  <p>두 큐의 합이 같다 == 한 큐의 합은 <code class="language-plaintext highlighter-rouge">두 큐의 합/2</code>이 된다.</p>
</blockquote>

<p>이말은 즉, 1번 큐의 모든 원소의 합을 두 큐의 합/2의 값으로 만들면 된다는 것이다. 그렇다면 교체는 어떻게 하면 될까?</p>

<ul>
  <li>1번 큐의 합이 <code class="language-plaintext highlighter-rouge">두 큐의 합/2</code> 보다 <strong>작다면, 2번 큐에서 추출</strong>하여 가져온다.</li>
  <li>1번 큐의 합이 <code class="language-plaintext highlighter-rouge">두 큐의 합/2</code> 보다 <strong>크다면, 1번 큐에서 추출하여 2번 큐로 넣어준다.</strong></li>
</ul>

<p>이제 위 내용을 통해 아이디어를 정리해보자.</p>

<ol>
  <li></li>
</ol>

<p><br /></p>

<p>다음으로 문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
</pre></td><td class="rouge-code"><pre>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>

    <span class="c1">// 두 큐 원소의 합이 같다는 것은 하나의 큐의 합을 두 큐의 합/2 이 되면 된다는 것이다.</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">queue1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">queue2</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 문제에서 요구한대로 합 계산 과정 중 문제 방지를 위해 long 타입을 사용한다.</span>
        <span class="kt">long</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">queue1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">q1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">queue1</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="n">q2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">queue2</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="n">queue1</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="n">queue2</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">queue1</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c1">// 한쪽 큐의 합은 [두 큐의 합/2] 조건을 충족하면 된다.</span>
        <span class="n">total</span> <span class="o">/=</span> <span class="mi">2</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">cycle</span> <span class="o">=</span> <span class="n">queue1</span><span class="o">.</span><span class="na">length</span><span class="o">*</span><span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="cm">/**
         * 두 큐의 합을 동일하게 만드는 로직
         * q1을 기준으로 q2는 교체할 큐로 사용한다.
         * 단, 일정 교체횟수 이상을 반복하게 되면 종료한다.
         */</span>
        <span class="k">while</span><span class="o">(</span><span class="n">sum</span> <span class="o">!=</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>

            <span class="cm">/**
             * q1과 a2의 값을 교체하는 횟수는 최대 [한 큐의 길이 * 3] 만큼 을 넘지 않는다.
             * 교체 횟수 이상 반복되면 두 큐의 합을 맞추지 못하기에 -1을 반환한다.
             */</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cycle</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            
            <span class="cm">/**
             * q1의 합이 total보다 크다면, 첫번째 원소를 추출하고 q2의 원소를 가져온다.
             * 이때, q1의 합을 다시 계산하기 위해 추출한 수만큼을 뺀다.
             * 그 반대라면 q2의 첫번째 원소를 추출하고 q1의 원소를 가져간다.
             */</span>
            <span class="k">if</span><span class="o">(</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">temp1</span> <span class="o">=</span> <span class="n">q1</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">sum</span> <span class="o">-=</span> <span class="n">temp1</span><span class="o">;</span>
                <span class="n">q2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp1</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">temp2</span> <span class="o">=</span> <span class="n">q2</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="n">temp2</span><span class="o">;</span>
                <span class="n">q1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp2</span><span class="o">);</span>
            <span class="o">}</span>
            
            <span class="c1">// 교체 횟수를 차감한다.</span>
            <span class="n">cycle</span><span class="o">--;</span>

        <span class="o">}</span>

        <span class="c1">// 두 큐의 합을 같게 한 이후, 총 교체횟수를 구한다.</span>
        <span class="k">return</span> <span class="n">queue1</span><span class="o">.</span><span class="na">length</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">cycle</span><span class="o">;</span>
    <span class="o">}</span>    

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        
        <span class="c1">// int[] queue1 = new int[]{3,2,7,2};</span>
        <span class="c1">// int[] queue2 = new int[]{4,6,5,1};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">queue1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">queue2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">1</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>
        
        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">queue1</span><span class="o">,</span> <span class="n">queue2</span><span class="o">);</span>

    <span class="o">}</span>

<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<p>-</p>

<hr />

<p><br /></p>

<h3 id="출처">출처</h3>
<p>-</p>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://school.programmers.co.kr/learn/courses/30/lessons/118667">문제 링크</a>에서 참조바랍니다.</li>
</ul>
:ET