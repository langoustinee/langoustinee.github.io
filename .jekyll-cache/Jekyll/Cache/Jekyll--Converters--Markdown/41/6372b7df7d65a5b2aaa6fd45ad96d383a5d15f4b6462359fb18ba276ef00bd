I"p+<p><br /></p>

<h3 id="문제">문제</h3>
<hr />
<p>아래 와 같은 형태로 데이터를 저장하는 이차원 배열을 생성하세요.</p>

<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FyD8yH%2FbtqvbObYz0O%2FwxKKf03EbLNSpxpkSKJihk%2Fimg.png" width="50%" /></p>

<p><br />
<br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>주어진 문제 보기와 같이 달팽이 모양의 2차원 배열을 만들어야 한다. <br />
여기서 배열을 잘 살펴보면, 안쪽으로 말려 들어가는 달팽이 집과 같은 모양을 보이고 있음을 알 수 있다.</p>

<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbcCJsu%2FbtqvbJvcqgU%2FsdaR8KzGdhKEAPUVymHkSK%2Fimg.png" width="50%" /></p>

<p>이 원리를 코드로 구현하기 위한 아이디어를 생각해보자.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>정사각형 형태의 배열이기에 가로 열과 세로 행은 같다고 보고, 2차원 배열 안에 채워지는 숫자를 어떻게 채워갈지 정해보자.</p>

<ol>
  <li>1부터 5까지는 첫번째 행에 오른쪽으로 채워지며 5부터 9까지는 5번째 열에 아래로 채워진다.</li>
  <li>10부터 13까지는 5번째 행에서 왼쪽으로 채워지며, 13부터 16까지는 1번째 열에서 위로 채워진다.</li>
  <li>16부터 19까지는 2번째 행에서 오른쪽으로 채워지며, 19부터 21까지는 4번째 열에서 아래로 채워진다.</li>
  <li>21부터 23까지는 4번째 행에서 왼쪽으로 채워지며, 23부터 24까지는 2번째 열에서 위로 채워진다.</li>
  <li>마지막으로 24에서 25로 3번째 행에서 채워지게 된다.</li>
</ol>

<p>여기서 총 <strong>5번의 과정</strong>을 통해 1부터 25까지 달팽이 모양으로 2차원 배열을 채우게 되는데 이 5번이라는 것은 정사각형의 행, 열과 동일한 숫자임을 알 수 있다.</p>

<p>이 때, 5번 만큼 배열을 채울 때 일반적인 배열의 순서대로 <strong>오른쪽이나 아래로 채워지는 경우</strong>와, 배열의 순서와는 반대인 <strong>왼쪽이나 위로 채워지는 경우</strong>를 분기하여 채우도록 하면 된다. 그리고 채워질 수는 계속해서 증가시키며 행*열만큼의 수가 되도록 하면 된다.</p>

<h4 id="오른쪽이나-아래로-채워지는-경우">오른쪽이나 아래로 채워지는 경우</h4>
<p>위 <code class="language-plaintext highlighter-rouge">1번</code> 과정과 같이 원래 순서대로 자연스럽게 채워야 하는 경우를 살펴보자. <br />
먼저 열에 값을 오른쪽 방향으로 채운 뒤, 행에 값을 아래 방향으로 아래와 같이 채우게 된다.</p>

<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbwWAhk%2FbtqvbHD9Zlv%2FNPKqcYw2WgdMKhgFi3sVZk%2Fimg.png" width="30%" /></p>

<p>i가 행 인덱스, j가 열 인덱스라고 한다면 <strong>i는 0행으로 고정시키고, j만 1씩 증가</strong>시켜서 1~5까지 첫 행을 채워주어야 한다. <br />
그리고 첫 행 채우기가 끝나면 <strong>열 인덱스 j를 고정시키고, i만 1씩 증가</strong>하며 채워주어야 한다. <br />
단, 첫 열을 채울 때는 5-1번만큼 반복하여 6부터 9까지만 채우면 된다는 점을 유의해야 한다.</p>

<h4 id="왼쪽이나-위로-채워지는-경우">왼쪽이나 위로 채워지는 경우</h4>
<p>1번 과정대로 배열을 채웠다면 10부터 13까지, 14부터 16까지는 반대 방향으로 배열을 채워야 한다. <br />
이 때는 열 인덱스인 j를 1씩 감소시켜서 채워야 하기 때문에 <strong>방향을 반대로 바꿔줄 변수</strong>가 하나 있어야 한다. -1로 바꾸어주도록 하겠습니다.</p>

<p>i는 행 인덱스, j는 열 인덱스, 
tmp는 각 배열에 채워줄 숫자, direction는 방향이 바뀔 시 사용될 스위치 변수, 
repeat는 몇 번을 반복해야 하는지를 알려주는 <code class="language-plaintext highlighter-rouge">반복 인덱스</code>이다.</p>

<p>그러나 전체 반복문은 while의 구문 안에 있으므로, 반드시 탈출 조건을 지정해줘야 합니다.
그 시점은 반복 인덱스인 p가 0과 작거나 같아지는 순간입니다.</p>

<p>이제는 행 인덱스만 변경하며 숫자를 채워주도록 하겠습니다.</p>

<p>이제 다음 숫자를 채우려면 열 인덱스인 j를 1씩 감소시켜야 합니다.
그래서 스위치 변수를 -1로 바꾸어주도록 하겠습니다.</p>

<p>이러한 과정이 p가 0 이하일 때까지 반복된다면, while 구문의 반복은 끝이나게 됩니다.
이제 달팽이 배열을 출력해보도록 하겠습니다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">col</span><span class="o">][</span><span class="n">row</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">// row start index</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// col start index</span>
        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// snail number</span>
        <span class="kt">int</span> <span class="n">direction</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// i with j switch direction(1 or -1)</span>
        <span class="kt">int</span> <span class="n">repeat</span> <span class="o">=</span> <span class="n">row</span><span class="o">;</span> <span class="c1">// repeat count</span>

        <span class="k">while</span><span class="o">(</span><span class="n">repeat</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">l</span><span class="o">&lt;</span><span class="n">repeat</span><span class="o">;</span> <span class="n">l</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">tmp</span><span class="o">++;</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">direction</span><span class="o">;</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">repeat</span><span class="o">--;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">m</span><span class="o">&lt;</span><span class="n">repeat</span><span class="o">;</span> <span class="n">m</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">tmp</span><span class="o">++;</span>
                <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">direction</span><span class="o">;</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                
            <span class="o">}</span>
            <span class="n">direction</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">:</span> <span class="n">answer</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">arr</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li></li>
</ul>
:ET