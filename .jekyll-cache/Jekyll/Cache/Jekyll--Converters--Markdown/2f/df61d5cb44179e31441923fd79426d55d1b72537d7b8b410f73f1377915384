I"KM<p><br /></p>
<center><img src="/assets/images/programmers/20230308_01.png" width="100%" /></center>
<center><img src="/assets/images/programmers/20230308_02.png" width="100%" /></center>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 <code class="language-plaintext highlighter-rouge">괄호 회전하기</code> 문제는 <strong>괄호를 검증</strong>하는 것이 가장 주요하다고 볼 수 있다. <br />
그런데, 그냥 하나의 소괄호 <code class="language-plaintext highlighter-rouge">()</code>만 검증하는 것이 아니라 중괄호 <code class="language-plaintext highlighter-rouge">{}</code>와 대괄호 <code class="language-plaintext highlighter-rouge">[]</code> 까지 올바른 괄호대로 포함되어 있는지를 확인해야 한다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>먼저 주어진 괄호 문자열을 왼쪽으로 한 문자씩 문자열 길이만큼 회전시킨다.
    <ul>
      <li>문자열의 길이와 반복문 인덱스를 활용하여 문자열을 회전시킨다.</li>
    </ul>
  </li>
  <li>왼쪽으로 한 문자씩 회전시킨 문자열마다 올바른 괄호 문자열인지를 검증한다.</li>
  <li>주어진 문자열을 회전시켜서 만들어진 문자열마다 올바른 괄호 문자열인지를 세어서 반환하면 된다.</li>
</ul>

<p><br /></p>

<p>아이디어는 이외로 단순하다. 바로 코드를 작성해보자.</p>

<h4 id="문자열-회전시키기">문자열 회전시키기</h4>
<p>먼저 주어진 문자열 s를 가지고 왼쪽으로 한 문자씩 회전시키기 위해서 <code class="language-plaintext highlighter-rouge">substring()</code> 메소드를 사용한다. <br />
s의 길이만큼 반복하며 현재 인덱스에서 문자열 길이만큼 자른 뒤, 0번째부터 현재 인덱스까지 자른다면,</p>

<p><code class="language-plaintext highlighter-rouge">(){}[]</code> 라는 문자열 이라고 하면 <code class="language-plaintext highlighter-rouge">){}[](</code>로 회전시키기 위해</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">rotate</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">isBracket</span><span class="o">(</span><span class="n">rotate</span><span class="o">))</span> <span class="n">answer</span><span class="o">++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="잘못된-괄호-검증-함수">잘못된 괄호 검증 함수</h4>
<p>Stack을 사용하지 않고 Map을 활용해서 괄호를 검증할 수 있을 줄 알았고, 이를 토대로 괄호 검증 함수를 구현하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isBracket</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">bracket_map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'{'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">switch</span><span class="o">(</span><span class="n">ch</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="sc">'('</span><span class="o">:</span>
                <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="sc">'{'</span><span class="o">:</span>
                <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'{'</span><span class="o">,</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="sc">'{'</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="sc">'['</span><span class="o">:</span>
                <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="sc">')'</span><span class="o">:</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="sc">'('</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="mi">0</span><span class="o">)-</span><span class="mi">1</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="sc">'}'</span><span class="o">:</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="sc">'{'</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'{'</span><span class="o">,</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="sc">'{'</span><span class="o">,</span> <span class="mi">0</span><span class="o">)-</span><span class="mi">1</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="sc">']'</span><span class="o">:</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="sc">'['</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="mi">0</span><span class="o">)-</span><span class="mi">1</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="sc">'('</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">medium</span> <span class="o">=</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="sc">'{'</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="sc">'['</span><span class="o">);</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">small</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">medium</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">big</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">rotate</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">isBracket</span><span class="o">(</span><span class="n">rotate</span><span class="o">))</span> <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isBracket</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">switch</span> <span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">case</span> <span class="sc">'('</span><span class="o">:</span> <span class="k">case</span> <span class="sc">'{'</span><span class="o">:</span> <span class="k">case</span> <span class="sc">'['</span><span class="o">:</span>
                    <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">')'</span><span class="o">:</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span> <span class="o">!=</span> <span class="sc">'('</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">'}'</span><span class="o">:</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span> <span class="o">!=</span> <span class="sc">'{'</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">']'</span><span class="o">:</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span> <span class="o">!=</span> <span class="sc">'['</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        
        <span class="c1">// String s = "[](){}";</span>
        <span class="c1">// String s = "}]()[{";</span>
        <span class="c1">// String s = "{{{}";</span>
        <span class="c1">// String s = "(){{))";</span>
        <span class="c1">// String s = "(){{]]";</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"{(})"</span><span class="o">;</span>
        
        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>중첩 for문 내에서 특정 조건에서는 순회를 이어가고, 특정 조건에서는 순회를 멈추도록 하는 로직을 통해 스택이나 큐를 활용하지 않고도 해당 문제를 풀 수 있었다.</li>
</ul>
:ET