I"Ɓ<p><br /></p>

<center><img src="/assets/images/baekjoon/24060.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제 풀기에 앞서 병합정렬에 대해서 알아보자.</p>

<blockquote>
  <p><strong>병합정렬</strong>이란? <br />
기본적으로 분할 정복 알고리즘을 기반하여 정렬하는 방식으로 문제를 분할하고, 분할한 문제를 정복하여 병합하는 과정이다. <br />
<strong>원소가 저장되어 있는 배열을 계속 쪼개서 길이가 1인 배열을 만들고, 이후 정렬하면서 합치는 알고리즘</strong>이다.</p>
</blockquote>

<h4 id="병합정렬-과정">병합정렬 과정</h4>
<ol>
  <li>주어진 배열을 절반으로 분할한다. 즉 부분배열로 나눈다.</li>
  <li>부분배열의 길이가 1이 될 때까지 1번 과정을 반복한다.</li>
  <li>인접한 부분배열의 원소를 비교하며 정렬하여 합친다.</li>
</ol>

<p>아래 그림을 참고하면 이해하기 쉽다.</p>

<center><img src="https://blog.kakaocdn.net/dn/07jQt/btq1lao22zT/Kkr0QfF1VGxi3bfGYp2r61/img.png" width="1000" /></center>

<p>그리고 장단점도 함께 살펴보자.</p>

<h4 id="병합정렬의-장점-및-단점">병합정렬의 장점 및 단점</h4>
<blockquote>
  <p><strong>[장점]</strong> <br /></p>
  <ol>
    <li>최선과 최악의 경우 모두 O(NlogN)의 시간복잡도를 가진다.</li>
    <li>안정된 정렬 방법이다.</li>
  </ol>
</blockquote>

<blockquote>
  <p><strong>[단점]</strong> <br /></p>
  <ol>
    <li>별도로 배열을 이용하기에 메모리 사용량이 높다.</li>
    <li>데이터가 많을 경우 원본배열로 정렬된 데이터를 덮어씌우는 과정에서 시간이 많이 소요된다.</li>
  </ol>
</blockquote>

<p><br /></p>

<p>이와 같이 병합정렬에 대해서 알아보았으니 실제로 구현을 해보자. <br />
이 문제의 요구사항은 병합정렬 중 <strong>K번째로 병합되어 저장된 수</strong>를 구하는 것이다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>문제 요구사항을 만족하기 위해 생각한 아이디어는 다음과 같다.</p>
<ol>
  <li>주어진 배열을 가지고 병합정렬 작업을 진행한다.</li>
  <li>병합정렬 중 K번째로 저장된 수를 구한다.</li>
  <li>K번째로 저장된 수가 없다면 -1를 반환한다.</li>
</ol>

<p><br /></p>

<p>이제 코드를 작성해보자. <br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">sorted_arr</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 Main 클래스 내에서 사용할 static 변수들을 선언하자. <br />
분해하여 정렬된 데이터들을 저장할 임시 배열 sorted_arr를 선언하고 저장횟수를 기록할 cnt 변수, 입력받을 K를 저장할 K변수, K번째 저장된 수 res 변수를 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="nc">String</span><span class="o">[]</span> <span class="n">str_arr</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">str_arr</span><span class="o">).</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span> <span class="c1">// int형 배열로 변환</span>

<span class="n">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">res</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 main 메서드에서 N과 K, 주어진 수들을 입력받아 int형 arr 배열까지 만든 뒤, sort() 함수를 실행하여 병합정렬을 실행한다. <br />
병합정렬 실행 후 cnt(저장횟수)가 K보다 작다면 -1를 반환하면 된다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// l은 첫번째 인덱스, r은 마지막 인덱스, m은 중간 인덱스</span>
    <span class="n">sorted_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span> <span class="c1">// 정렬 배열 초기화</span>
    <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge_sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span> <span class="c1">// 부분 배열 원소가 1개일 경우 분해할 수 없기 때문에 반환</span>

    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 배열 중간 위치</span>
    
    <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span> <span class="c1">// 첫번째부터 절반까지의 왼쪽 배열 (l ~ m)</span>
    <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 절반 이후부터 마지막까지 오른쪽 배열 (m+1 ~ r) </span>
    
    <span class="n">merge</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 병합 작업 진행</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>sort() 함수에서는 정렬하여 분해한 배열을 저장할 sorted_arr 배열을 초기화한다. <strong>sorted_arr 배열의 경우 앞서 static으로 선언하였기에 전역으로 관리할 수 있다.</strong> <br />
그리고 merge_sort() 함수에 정렬할 배열 arr과 투 포인터로 이용할 값을 넘겨준다.</p>

<p>merge_sort() 함수에서는 매개변수로 받은 투 포인터 값을 통해 <strong>첫번째 원소부터 절반까지의 원소를 통해 왼쪽 배열을 만들고, 절반 이후 원소부터 마지막 원소를 통해 오른쪽 배열을 만든다.</strong> <br />
그렇게 분해하여 만든 부분배열들을 merge() 함수를 통해 병합 작업을 진행한다.</p>

<p>병합 작업을 진행할 merge() 함수 코드는 아래와 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 왼쪽 배열 시작점</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 오른쪽 배열 시작점</span>
    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 정렬된 데이터가 저장될 인덱스</span>

    <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 1. 왼쪽 배열 left번째 원소가 오른쪽 배열 right번째 원소보다 작거나 같다면 </span>
        <span class="c1">// 2. sorted_arr에 left번째 원소를 저장하고 left, idx를 1 증가시킨다.</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">left</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="c1">// 1. 오른쪽 배열 right번째 원소가 왼쪽 배열 left번째 원소보다 작거나 같다면 </span>
        <span class="c1">// 2. sorted_arr에 right번째 원소를 저장하고 right, idx를 1 증가시킨다.</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 왼쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 오른쪽 배열을 차례대로 저장한다.</span>
    <span class="k">if</span><span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 오른쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 왼쪽 배열을 차례대로 저장한다.</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">left</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 병합하여 정렬된 sorted_arr배열을 기존 arr배열에 덮어씌운다.</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">r</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">cnt</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>병합 작업에서는 왼쪽 배열의 첫번째 원소부터 절반까지 원소를 오른쪽 배열의 원소와 비교해가며 작거나 같다면 sorted_arr 새 배열에 첫번째 자리부터 저장해나간다.
또한 마찬가지로 오른쪽 배열의 첫번째 원소부터 마지막까지의 원소를 왼쪽 배열의 원소와 비교해가며 작거나 같다면 sorted_arr 새 배열에 첫번째 자리부터 저장해나간다.</p>

<p>그런데 [1,2,4,5,9,11,25,75]와 같은 배열이 부분배열이 만들어졌다면 앞 왼쪽 배열 원소 모두가 먼저 새 배열에 저장되어 오른쪽 배열 원소가 남게 된다. <br /></p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<p>추후 복습을 위해 이번 문제 작성코드는 주석을 많이 달아놓았다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">sorted_arr</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="nc">String</span><span class="o">[]</span> <span class="n">str_arr</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">str_arr</span><span class="o">).</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span> <span class="c1">// int형 배열로 변환</span>

        <span class="n">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">res</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// l은 첫번째 인덱스, r은 마지막 인덱스, m은 중간 인덱스</span>
        <span class="n">sorted_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span> <span class="c1">// 정렬 배열 초기화</span>
        <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge_sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span> <span class="c1">// 부분 배열 원소가 1개일 경우 분해할 수 없기 때문에 반환</span>

        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 배열 중간 위치</span>
        
        <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span> <span class="c1">// 첫번째부터 절반까지의 왼쪽 배열 (l ~ m)</span>
        <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 절반 이후부터 마지막까지 오른쪽 배열 (m+1 ~ r) </span>
        
        <span class="n">merge</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 병합 작업 진행</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 왼쪽 배열 시작점</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 오른쪽 배열 시작점</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 정렬된 데이터가 저장될 인덱스</span>

        <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 투 포인터 사용</span>
            <span class="c1">// 1. 왼쪽 배열 left번째 원소가 오른쪽 배열 right번째 원소보다 작거나 같다면 </span>
            <span class="c1">// 2. sorted_arr에 left번째 원소를 저장하고 left, idx를 1 증가시킨다.</span>
            <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="c1">// 1. 오른쪽 배열 right번째 원소가 왼쪽 배열 left번째 원소보다 작거나 같다면 </span>
            <span class="c1">// 2. sorted_arr에 right번째 원소를 저장하고 right, idx를 1 증가시킨다.</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">right</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 왼쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 오른쪽 배열을 차례대로 저장한다.</span>
        <span class="k">if</span><span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">right</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 오른쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 왼쪽 배열을 차례대로 저장한다.</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 병합하여 정렬된 sorted_arr배열을 기존 arr배열에 덮어씌운다.</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">r</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">cnt</span><span class="o">++;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li></li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li><a href="https://st-lab.tistory.com/233">병합정렬 이미지 출처</a></li>
</ul>
:ET