I"f*<p><br /></p>

<center><img src="/assets/images/programmers/20220818_01.png" /></center>

<blockquote>
  <p>Input-1 <br />
10 <br />
Output-1 <br />
4</p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
5 <br />
Output-2 <br />
3</p>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>먼저 n까지의 수 중 소수를 찾아야 한다. <br /></p>

<blockquote>
  <p>소수란?
2, 3, 5, 7, 11, 13, 17 … <br />
약수가 1과 자신 뿐인 수이다.</p>
</blockquote>

<h4 id="어떻게-소수를-구할-수-있을까">어떻게 소수를 구할 수 있을까?</h4>
<p>n까지의 수중에서 n보다 작은 수를 나눠지는 수가 있다면 소수가 아니다. <br />
즉, 어떤 수의 배수이면 소수가 아니라는 것이다. <br /></p>

<p>여기까지 이해하였으면 무작정 코딩을 시작해보자. <br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="c1">// 소수가 아닌 0과 1을 제외한 n까지의 수</span>
<span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">isPrime</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 소수 X</span>
            <span class="n">isPrime</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">continue</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
    <span class="n">i</span><span class="o">++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>바깥의 while문을 통해 2부터 n까지 순회하는데 <br />
안쪽의 for문을 통해 i별로 x를 i로 나눠지는 수가 있다면 소수가 아니다. <br />
또한 소수가 아니라면 반복문의 끝까지 순회할 필요가 없고 수행시간이 오래 걸리기에 break문을 추가하였다.</p>

<p>이때 n값을 50000으로 부여하여 코드를 실행해보니 수행시간은 약 <strong>150 밀리초</strong>가 소요되었다. <br />
그리고 테스트케이스 11, 12에서 시간초과 문제가 발생하였다.</p>

<h4 id="수행시간을-줄이는-방법은">수행시간을 줄이는 방법은?</h4>
<p>이제 어떠한 로직으로 접근하여 수행시간을 최소화할 수 있는지 생각해 보아야 한다. <br /></p>

<p>먼저 <strong>n보다 작은 수의 소수들로만 나누어보면</strong> 어떨까? <br />
prime(리스트)에 소수를 넣어두고 2부터 n까지 순회하며 i별로 prime의 원소와 나누어지는 지를 검증해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prime</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 소수를 관리할 리스트</span>
<span class="n">prime</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">prime</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="n">prime</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="n">prime</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 안쪽 반복문을 통해 n까지의 수중에서 소수들로만 나누어 떨어지면 break하여 불필요한 반복을 줄일 수 있다. <br /></p>

<p>이때도 동일하게 n을 50000으로 실행해보았고 수행시간은 첫번째 풀이의 절반정도인 <strong>70 밀리초</strong> 정도 소요되었다. <br />
하지만 이번 풀이도 테스트케이스 11에서 시간초과가 발생하였다.</p>

<h4 id="에라토스테네스의-체를-활용한-풀이">에라토스테네스의 체를 활용한 풀이</h4>
<p>소수를 찾는 방법중 잘 알려져 있는 에라토스테네스의 체 방식을 활용해 풀어보자.</p>

<blockquote>
  <p>에라토스테네스의 체 알고리즘
n이 100이라고 하면 2부터 100까지를 배열에 담은 후 소수가 아닌 것들을 마킹하여 마킹이 안된 수들인 소수를 판별하는 알고리즘이다.</p>
</blockquote>

<p>이 알고리즘을 구현하며 중요하게 생각해야 할 것은 앞에서도 언급했지만 바로 <strong>불필요한 반복을 줄이는 것</strong>이다! <br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// 제곱근까지만 반복하며 중첩반목문을 통해 n의 배수에서 소수가 아닌 수를 검증</span>
<span class="c1">// 소수가 아니면 true, 소수일 경우 false</span>
<span class="c1">// 0, 1은 소수가 아니기에 true</span>
<span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">res</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">res</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span> <span class="c1">// 소수의 개수</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li></li>
</ul>
:ET