<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-09T23:03:16+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 백준(실버-4) 4949번 - 균형잡힌 세상</title><link href="http://localhost:4000/java/127-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 4949번 - 균형잡힌 세상" /><published>2022-11-08T00:00:00+09:00</published><updated>2022-11-08T00:00:00+09:00</updated><id>http://localhost:4000/java/127-post</id><content type="html" xml:base="http://localhost:4000/java/127-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/4949-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/4949-attach02.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 괄호 문자열에서 괄호 종류가 “(“와 “[“로 두가지이다. <br />
단일 괄호 문자열과 비교하면 서로 다른 괄호의 짝이 맞는지를 검증해야한다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>”(“는 “)”를 value값으로, “[“는 “]”를 value값으로 가지는 Map을 미리 만들어둔다.</li>
  <li>개행 기준으로 주어지는 문자열에서 “(“나 “[“가 나온다면 스택에 삽입한다.</li>
  <li>”)”가 나온다면 현재 닫혀야할 괄호가 “)”가 맞는지, “]”가 나온다면 현재 닫혀야할 괄호가 “]”가 맞는지 <strong>최신 열린 괄호(스택의 맨 위 값)를 key값으로 Map에서 value값을 조회하여 확인</strong>한다.</li>
  <li>괄호 짝 검증후 스택이 비어있다면 짝이 맞으므로 yes를 출력한다.
    <ul>
      <li>주어진 문자열에서 괄호가 없더라도 yes를 출력한다.</li>
    </ul>
  </li>
  <li>위 괄호 짝 검증 과정 중 괄호 짝이 맞지 않는다면 NO를 출력한다.
    <ul>
      <li>EmptyStackException 예외가 발생할 경우 no를 출력한다.</li>
      <li>열린 괄호와 닫혀야 할 괄호 짝이 하나라도 맞지 않는다면 no를 출력한다.</li>
    </ul>
  </li>
  <li>입력 문자열이 “.”으로만 이루어져 있다면 입력의 끝으로 간주하고 입력을 종료한다.</li>
</ul>

<p><br /></p>

<p>아이디어가 복잡해 보일 수 있는데, <strong>핵심은 “(“ 및 “[” 열린 괄호들이 잘 닫혀있는지 확인</strong>하는 것이다. <br />
말로 설명하자니 길어지는 것 같아 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="sc">')'</span><span class="o">);</span>
<span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="sc">']'</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 여는 괄호 “(“와 “[“의 짝을 미리 Map에 저장해둔다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="kt">boolean</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">"."</span> <span class="o">||</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>주어진 문자열을 담을 input String과 여는 괄호들을 담아둘 Stack인 bracket_list, 짝이 안맞을 경우에 상태를 변경할 boolean 변수 brackets를 선언하자. <br />
“.” 마침표 하나가 입력문자열로 들어올 때까지 입력을 받아야 하기에 while문 내에서 탈출조건을 작성했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'('</span><span class="o">);</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'['</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">brackets</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"yes"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">EmptyStackException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ol>
  <li>EmptyStackException 예와 처리를 하기위해서 try/catch문 내에서 여는 괄호 “(“, “[“가 올 때마다 스택에 삽입해둔다. <br /></li>
  <li>주어진 문자열에서 <strong>닫는 괄호 “)”가 나왔다면 현재 스택에 담긴 최신 값(맨 위)을 키로 Map의 value값을 조회하여 닫혀야 할 괗로가 “(“인지 확인하며, “]”도 동일하게 수행</strong>한다. <br /></li>
</ol>

<p>위 과정을 수행하며 brackets가 false이거나 스택이 비어있지 않다면 괄호 짝이 맞지 않는 것이기에 no를 출력한다. <br />
물론 EmptyStackException 예외가 발생해도 짝이 맞지 않는 것이기에 no를 출력한다. <br />
스택이 비어있고, brackets이 true라면 정상적으로 괄호들의 짝이 맞는 것이기 때문에 yes를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="sc">')'</span><span class="o">);</span>
        <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="sc">']'</span><span class="o">);</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
            <span class="kt">boolean</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

            <span class="k">if</span><span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">"."</span> <span class="o">||</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>

            <span class="k">try</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'('</span><span class="o">);</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'['</span><span class="o">);</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">brackets</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"yes"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">EmptyStackException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>단일 괄호 문자열에서 괄호의 짝을 스택만으로 구현이 가능했지만, 다중 괄호 문자열에서는 별도로 여는 괄호들의 짝이 맞는지를 알아야 하기에 괄호들의 짝을 별도로 담아둘 HashMap을 함께 활용하여 문제를 풀 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제만든이 자세한 내용은 <a href="https://www.acmicpc.net/problem/4949">4949번 문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[4949번 - 균형잡힌 세상]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 9012번 - 괄호</title><link href="http://localhost:4000/java/126-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 9012번 - 괄호" /><published>2022-11-08T00:00:00+09:00</published><updated>2022-11-08T00:00:00+09:00</updated><id>http://localhost:4000/java/126-post</id><content type="html" xml:base="http://localhost:4000/java/126-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10773.png" width="100%" /></center>
<p><br />
자세한 입출력 테스트케이스는 <a href="https://www.acmicpc.net/problem/9012">문제 링크</a>를 참고하자.</p>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 주어지는 괄호문자열의 짝이 맞는지를 확인해야 한다. <br />
스택을 활용하면 단일 괄호 문자열의 짝이 맞는지 쉽게 구할 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>주어지는 괄호 문자열을 순회하며 여는 괄호 “(“가 주어지면 스택에 삽입하고 닫는 괄호 “)”가 주어지면 스택에서 추출한다.
    <ul>
      <li>이 때, 닫는 괄호가 나오면 스택에서 추출하는데, <strong>스택이 비어있는 상태에서 닫는 괄호가 나올 수 있으니 try/catch문으로 EmprtyStackException을 처리</strong>하여 예외 발생시에는 짝이 맞지 않음으로 간주하고 NO를 출력한다.</li>
    </ul>
  </li>
  <li>괄호의 짝이 맞는다면 스택이 비어있으면 된다. 스택이 비어있다면 YES 아니라면 NO를 출력한다.</li>
</ul>

<p><br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>T개의 테스트케이스를 갯수를 입력받는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="nc">String</span> <span class="n">bracketList</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">bracketList</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">bracketList</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">)</span> <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'('</span><span class="o">);</span>
            <span class="k">else</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"YES"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"NO"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">EmptyStackException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"NO"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>T개의 단일 괄호 문자열을 줄마다 입력받는다. <br /></p>
<ol>
  <li>이 때 문자열마다 스택에 담아 처리하고 짝검증을 해야하기에 줄 단위로 스택을 새로 생성한다. <br /></li>
  <li>그리고 try/catch문 안에서 여는 괄호 “(“가 나오면 스택에 삽입하고, 닫는 괄호 “)”가 나오면 스택에서 추출한다. <br /></li>
  <li>try/catch문 안에서 여는 괄호와 닫는 괄호의 짝을 검사하는데, 닫는 괄호가 먼저 나올 경우 <br />
 스택이 비어있을 수도 있기에 스택이 비어있을 때 pop연산을 할 경우 EmptyStackException를 통해 제어할 수 있도록 한다.<br /></li>
</ol>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
            <span class="nc">String</span> <span class="n">bracketList</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">bracketList</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">bracketList</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">)</span> <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'('</span><span class="o">);</span>
                    <span class="k">else</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="o">}</span>

                <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"YES"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"NO"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">EmptyStackException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"NO"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>괄호 문자열 관련 문제는 대부분 스택을 활용하여 푸는 것이 대중적인 풀이방식으로 알고 있는데, EmptyStackException을 처리하지 않고도 풀어봐야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[9012번 - 괄호]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 10773번 - 제로</title><link href="http://localhost:4000/java/125-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 10773번 - 제로" /><published>2022-11-08T00:00:00+09:00</published><updated>2022-11-08T00:00:00+09:00</updated><id>http://localhost:4000/java/125-post</id><content type="html" xml:base="http://localhost:4000/java/125-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10773.png" width="100%" /></center>
<p><br />
자세한 입출력 테스트케이스는 <a href="https://www.acmicpc.net/problem/10773">문제 링크</a>를 참고하자.</p>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 스택의 후입 선출(LIFO) 구조를 활용하면 손쉽게 풀 수 있다. <br />
K개의 주어지는 정수가 0 이상이면 스택에 저장하고, 0이라면 맨 위 값을 추출하면 된다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>주어지는 정수가 0보다 크면 스택에 삽입한다.<strong>(push연산)</strong></li>
  <li>주어지는 정수가 0이라면 스택에서 추출한다.<strong>(pop연산)</strong></li>
  <li>모든 정수 입력이 끝나면 스택에 남은 값의 합을 구한다.</li>
</ul>

<p><br />
아이디어를 토대로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 정수의 갯수 K를 입력받고 K개의 0보다 큰 정수를 담을 스택을 하나 생성하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
    <span class="k">else</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>K개의 정수를 입력받으며 0보다 크다면 push연산을 통해 스택에 삽입하고, 정수가 0이라면 pop연산을 통해 스택에서 추출한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>정수 입력이 끝나면 스택에 값이 있는지 확인 후 값이 있다면 값들의 합을 구하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
            <span class="k">else</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>스택의 장바구니 속성, 즉 후입선출(LIFO) 기능을 통해 주어지는 정수마다 push연산과 pop연산을 하여 최종 스택에 존재하는 값들의 합을 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10773번 - 제로]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 10828번 - 스택</title><link href="http://localhost:4000/java/124-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 10828번 - 스택" /><published>2022-11-07T00:00:00+09:00</published><updated>2022-11-07T00:00:00+09:00</updated><id>http://localhost:4000/java/124-post</id><content type="html" xml:base="http://localhost:4000/java/124-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10828.png" width="100%" /></center>
<p><br />
자세한 입출력 테스트케이스는 <a href="https://www.acmicpc.net/problem/10828">문제 링크</a>를 참고하자.</p>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 스택의 각종 기능을 활용해 스택에 데이터를 삽입 및 추출하면 된다. <br />
복잡한 로직 없이 순수한 스택의 기능만으로 쉽게 구현이 가능하다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>주어지는 명령어대로 스택을 처리하면 된다.
    <ul>
      <li>명령어에 “push” 문자열이 있다면 “push [num]”의 num 값을 스택에 삽입한다. 이 때 별도로 출력할 필요는 없다.</li>
      <li>“pop”이라면 스택에서 pop연산을 하여 삭제된 값을 출력한다. 이 때 스택이 비어있는지 확인 후 비어있다면 -1을 출력한다.</li>
      <li>“size”라면 스택의 존재하는 값 개수를 출력한다.</li>
      <li>“empty”라면 스택이 비어있는지 확인하여 비어있다면 1, 비어있지 않다면 0을 출력한다.</li>
      <li>“top”라면 스택의 맨 위 값을 출력한다. 이 때 스택이 비어있는지 확인 후 비어있다면 -1을 출력한다.</li>
    </ul>
  </li>
</ul>

<p><br />
명령어대로 스택을 조작하여 값을 출력하면 된다. 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>명령어 갯수 N을 입력받고 스택을 하나 생성하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// 1</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
        <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="s">"pop"</span><span class="o">:</span> <span class="c1">// 2</span>
                <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="s">"top"</span><span class="o">:</span> <span class="c1">// 3</span>
                <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="s">"size"</span><span class="o">:</span> <span class="c1">// 4</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span> <span class="c1">// 5</span>
                <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>주어지는 명령어를 cmd라 하고 cmd 명령어에 따라 연산하여 결과를 출력하면 된다.</p>
<ol>
  <li>push [num] 일 때는 cmd에 “push” 문자열이 있는지 확인하여 num값을 스택에 삽입한다.</li>
  <li>pop일 때는 스택이 비어있는지 확인 후 pop 연산을 하여 삭제된 값을 출력한다.</li>
  <li>top일 때는 peek() 메서드를 활용하여 스택의 맨 위 값을 출력한다. 역시나 스택이 비어있다면 -1을 출력하면 된다.</li>
  <li>size일 때는 스택의 값 개수를 출력하면 된다.</li>
  <li>empty일 때는 값 유무에 따라 비어있다면 1, 비어있지 않다면 0을 출력하면 된다.</li>
</ol>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="s">"pop"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"top"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"size"</span><span class="o">:</span>
                        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">default</span><span class="o">:</span>
                        <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>스택에서 제공하는 각종 기능들을 활용해 복잡한 알고리즘 없이 순수한 스택을 활용하여 문제를 풀 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10828번 - 스택]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 옹알이 (2)</title><link href="http://localhost:4000/java/123-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 옹알이 (2)" /><published>2022-11-05T00:00:00+09:00</published><updated>2022-11-05T00:00:00+09:00</updated><id>http://localhost:4000/java/123-post</id><content type="html" xml:base="http://localhost:4000/java/123-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20221105_01.png" width="100%" /></center>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 주어진 옹알이 단어중에서 “aya”, “ye”, “woo”, “ma” 4가지 조합의 발음만을 하는지를 검증해야 한다. <br />
위의 4가지 발음이 <strong>연속으로 조합</strong>된다거나, <strong>단어 사이에 조합</strong>된다면 올바른 발음이 되지 않음을 유의해야 한다.</p>

<p><br /></p>

<h4 id="최초-아이디어-도출">최초 아이디어 도출</h4>
<ul>
  <li>옹알이 단어 배열을 두어, 주어진 발음에서 옹알이 단어가 나오는지 확인한다.
    <ul>
      <li>또한, 연속으로 옹알이 단어가 나오는지 확인하기 위해 <strong>연속 옹알이 조합 배열도 별도로 생성</strong>한다.</li>
    </ul>
  </li>
  <li>주어진 발음 단어를 순회하며 연속된 옹알이인지 확인한다.
    <ul>
      <li>연속된 옹알이는 올바른 옹알이가 아니기 때문에 카운트하지 않는다.</li>
    </ul>
  </li>
  <li>주어진 발음 단어를 순회하며 올바른 옹알이인지 확인한다.
    <ul>
      <li>주어진 발음 단어의 조합이 올바른 옹알이들로 이루어져있다면 ““로 만든다.</li>
    </ul>
  </li>
  <li>주어진 발음단어가 ““이라면 발음 가능한 옹알이로 조합되어 있다고 판단하고 카운트한다.</li>
</ul>

<p><br />
말로써 설명하면 좀 복잡한데, 중요한 핵심은 <strong>연속된 옹알이와 올바른 옹알이를 잘 구분</strong>하면 된다는 것이다.
코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">String</span><span class="o">[]</span> <span class="n">realBabbling</span> <span class="o">=</span> <span class="o">{</span><span class="s">"aya"</span><span class="o">,</span> <span class="s">"ye"</span><span class="o">,</span> <span class="s">"woo"</span><span class="o">,</span> <span class="s">"ma"</span><span class="o">};</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">dupBabbling</span> <span class="o">=</span> <span class="o">{</span><span class="s">"ayaaya"</span><span class="o">,</span> <span class="s">"yeye"</span><span class="o">,</span> <span class="s">"woowoo"</span><span class="o">,</span> <span class="s">"mama"</span><span class="o">};</span>
<span class="kt">int</span> <span class="n">possiableBabCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>작성한 아이디어대로 올바른 옹알이와 연속된 옹알이를 구분하기 위해 각각 별도의 배열로 만들어두자. <br />
그리고 최종적으로 발음 가능한 옹알이 단어의 갯수를 반환하기 위한 possiableBabCnt 변수를 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">bab</span> <span class="o">:</span> <span class="n">babbling</span><span class="o">)</span> <span class="o">{</span>  
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">dbab</span> <span class="o">:</span> <span class="n">dupBabbling</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bab</span> <span class="o">=</span> <span class="n">bab</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">dbab</span><span class="o">,</span> <span class="s">"*"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">rbab</span> <span class="o">:</span> <span class="n">realBabbling</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bab</span> <span class="o">=</span> <span class="n">bab</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">rbab</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">if</span><span class="o">(</span><span class="n">bab</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">))</span> <span class="n">possiableBabCnt</span><span class="o">++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>String의 replace()를 활용하여 주어진 발음 단어에 연속된 옹알이가 존재한다면 연속된 옹알이 부분을 “*“로 치환한다. <br />
그리고 올바른 옹알이는 ““로 치환하면 연속된 옹알이인지, 올바른 옹알이인지 구분할 수 있다. <br />
주어진 발음 단어가 올바른 옹알이로 구성되었다면 ““의 문자열 값을 가지기 때문에 해당 값이 ““라면 카운트를 세면 된다.</p>

<p>그런데, 이대로 코드를 작성하고 테스트해보니 문제가 발생하였다.</p>

<h4 id="발음-불가능한-옹알이-단어가-존재한다고">발음 불가능한 옹알이 단어가 존재한다고?</h4>
<p>예를 들어 “mwooa” 라는 발음 단어를 살펴보면, 위의 코드대로라면 “woo”라는 옹알이가 발음단어에 존재하기에 ““로 치환되어 “ma”가 될테고, <br />
“ma”도 옹알이로 인정받는 발음이기에 동일하게 ““로 치환된다. 결국 <strong>“mwooa”는 정상적인 옹알이 발음 조합이 아님에도 불구하고 발음 가능한 단어로 취급받는 문제가 발생</strong>한다.</p>

<p><br /></p>

<h4 id="최종-아이디어-수정">최종 아이디어 수정</h4>
<p>“mwooa”와 같은 replace()를 통해 치환할 때 발생할 문제를 해결하기 위해 아이디어를 수정하였다.</p>

<ul>
  <li>옹알이 단어 배열을 두어, 주어진 발음에서 옹알이 단어가 나오는지 확인한다.
    <ul>
      <li>또한, 연속으로 옹알이 단어가 나오는지 확인하기 위해 연속 옹알이 조합 배열도 별도로 생성한다.</li>
    </ul>
  </li>
  <li>주어진 발음 단어를 순회하며 연속된 옹알이인지 확인한다.
    <ul>
      <li>연속된 옹알이는 올바른 옹알이가 아니기 때문에 카운트하지 않는다.</li>
    </ul>
  </li>
  <li>주어진 발음 단어를 순회하며 올바른 옹알이인지 확인한다.
    <ul>
      <li>주어진 발음 단어의 조합이 올바른 옹알이들로 이루어져있다면 <del>"”로</del> <strong>“O”로</strong> 만든다.</li>
    </ul>
  </li>
  <li><del>주어진 발음단어가 ““이라면 발음 가능한 옹알이로 조합되어 있다고 판단하고 카운트한다.</del> <br />
<strong>주어진 발음단어가 “O”라는 문자로만 구성되어 있다면 발음 가능한 옹알이 조합으로 판단하고 카운트한다.</strong></li>
</ul>

<p><br />
위 아이디어대로라면 “mwooa”의 경우에도 “mOa”로 잘못된 발음 조합으로 구분할 수 있다. <br />
이제 수정한 아이디어대로 코드를 수정해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">bab</span> <span class="o">:</span> <span class="n">babbling</span><span class="o">)</span> <span class="o">{</span>  
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">dbab</span> <span class="o">:</span> <span class="n">dupBabbling</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bab</span> <span class="o">=</span> <span class="n">bab</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">dbab</span><span class="o">,</span> <span class="s">"*"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">rbab</span> <span class="o">:</span> <span class="n">realBabbling</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bab</span> <span class="o">=</span> <span class="n">bab</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">rbab</span><span class="o">,</span> <span class="s">"O"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">boolean</span> <span class="n">babPossiable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">bab</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">bab</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">'O'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">babPossiable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="n">babPossiable</span><span class="o">)</span> <span class="n">possiableBabCnt</span><span class="o">++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>연속된 옹알이를 “*“로 치환하는 부분은 동일하고, 올바른 옹알이일 경우 ““가 아니라 “O”라는 문자로 치환한다. <br />
그리고 치환된 발음 단어 bab을 살펴보고 <strong>“O”로 이루어졌다면 올바른 옹알이 조합이고, “O” 이외에 다른 문자가 존재한다면 발음 불가능한 옹알이 조합으로 판단</strong>하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// String[] babbling = {"aya", "yee", "u", "maa"};</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">babbling</span> <span class="o">=</span> <span class="o">{</span><span class="s">"ayaye"</span><span class="o">,</span> <span class="s">"uuu"</span><span class="o">,</span> <span class="s">"yeye"</span><span class="o">,</span> <span class="s">"yemawoo"</span><span class="o">,</span> <span class="s">"ayaayaa"</span><span class="o">,</span> <span class="s">"mwooa"</span><span class="o">};</span>
        
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">babbling</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">babbling</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">realBabbling</span> <span class="o">=</span> <span class="o">{</span><span class="s">"aya"</span><span class="o">,</span> <span class="s">"ye"</span><span class="o">,</span> <span class="s">"woo"</span><span class="o">,</span> <span class="s">"ma"</span><span class="o">};</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">dupBabbling</span> <span class="o">=</span> <span class="o">{</span><span class="s">"ayaaya"</span><span class="o">,</span> <span class="s">"yeye"</span><span class="o">,</span> <span class="s">"woowoo"</span><span class="o">,</span> <span class="s">"mama"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">possiableBabCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">bab</span> <span class="o">:</span> <span class="n">babbling</span><span class="o">)</span> <span class="o">{</span>  
            <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">dbab</span> <span class="o">:</span> <span class="n">dupBabbling</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bab</span> <span class="o">=</span> <span class="n">bab</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">dbab</span><span class="o">,</span> <span class="s">"*"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">rbab</span> <span class="o">:</span> <span class="n">realBabbling</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bab</span> <span class="o">=</span> <span class="n">bab</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">rbab</span><span class="o">,</span> <span class="s">"O"</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="kt">boolean</span> <span class="n">babPossiable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">bab</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bab</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">'O'</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">babPossiable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">babPossiable</span><span class="o">)</span> <span class="n">possiableBabCnt</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">possiableBabCnt</span><span class="o">;</span>  
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>충분히 고려할 수 있는 테스트케이스를 깊게 생각하지 않고 문제를 풀었기 때문에 문제 푸는 도중 코드를 수정하게 되었다. <br />
정해진 시간 내에 가능한 발생할 수 있는 경우의 수를 많이 생각하고 대입하여 최악을 대비하는 아이디어를 먼저 구상할 수 있도록 노력해야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 옹알이 (2)]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 푸드 파이트 대회</title><link href="http://localhost:4000/java/122-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 푸드 파이트 대회" /><published>2022-11-03T00:00:00+09:00</published><updated>2022-11-03T00:00:00+09:00</updated><id>http://localhost:4000/java/122-post</id><content type="html" xml:base="http://localhost:4000/java/122-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20221103_01.png" width="100%" /></center>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문재의 지문은 어려워 보이지만 테스트케이스를 잘 보면 쉽게 풀 수 있다. <br />
요구하는 내용을 잘 살펴보면 <strong>1번, 2번, 3번 음식을 몇 번 먹었는지를 ‘데칼코마니’처럼 “0”을 사이에 두고 출력</strong>하면 된다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>food 배열의 1번째 음식인 1번째 원소부터 2명이서 나누어 먹을 수 있는지를 확인하며 <strong>남는 음식은 신경쓰지 않고 2명에게 분배</strong>한다.</li>
  <li>두명 모두 같은 음식 배치로 음식을 먹어야 하기에 <strong>첫번째 선수의 음식 배치를 거꾸로하면 두번째 선수의 음식 배치</strong>가 된다.
    <ul>
      <li>결국, 첫번째 선수의 음식 배치만 구하면 <strong>두번째 선수의 음식배치는 별도로 구하지 않아도 된다.</strong></li>
    </ul>
  </li>
  <li>주어지는 food 배열의 0번째 원소, 즉 물의 양은 1로 고정이기에 신경쓰지 않아도 된다.</li>
</ul>

<p><br />
아이디어를 장황하게 작성하긴 했지만, 목적은 단순하다. <br />
핵심은 2명 중 첫번째 선수의 음식 배치를 구하면 두번째 선수의 음식배치는 반대로 하면 구할 수 있다는 것이다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">StringBuilder</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="nc">StringBuilder</span> <span class="n">first_player</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>StringBuilder를 활용하여 음식 배치를 담으려 한다. <br />
먼저 두 선수의 음식 배치를 담을 res와 첫번째 선수의 음식배치를 담을 first_player를 선언하자.</p>

<blockquote>
  <p><strong>왜 첫번째 선수의 음식배치를 담을 StringBuilder를 별도로 만들었나?</strong> <br />
첫번째 선수의 음식 배치를 구하고 이를 반대로 뒤집어서 두번째 선수의 음식배치를 구해야 하는데, <strong>물인 “0”을 중간에 추가한다면 첫번째 선수의 음식배치에 “0”이 포함된 채로 뒤집어지기 때문에</strong> 별도로 2개의 StringBuilder에 담았다.</p>
</blockquote>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">food</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">food</span><span class="o">[</span><span class="n">i</span><span class="o">]/</span><span class="mi">2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="n">first_player</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>다음으로 첫번째 선수의 음식 배치를 구한다. food 배열에서 1번음식부터 N번째 음식이 몇가지 준비되었는지 확인하고 <br />
2명의 선수가 나눠먹도록 N번째 음식을 2로 나누어 분배한다. 결국 첫번째 선수가 먹어야할 음식배치를 구할 수 있게 된다. <br />
또한, 이중 for문 종료후 반대로 뒤집어 두번째 선수의 음식배치를 구하기 위해 첫번째 선수의 음식배치도 함께 담는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">first_player</span><span class="o">.</span><span class="na">reverse</span><span class="o">();</span>
<span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
<span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">first_player</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 첫번째 선수의 음식배치를 반대로 뒤집어 두번째 선수의 음식배치를 구한다. <br />
그리고 물의 배치를 추가해야 하기에 “0”을 미리 첫번째 선수 음식배치를 담아놓았던 res StringBuilder에 추가한 후, 위에서 구한 두번째 선수의 음식배치를 마지막으로 추가하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">food</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="o">};</span>
        <span class="c1">// int[] food = {1,7,1,2};</span>
        <span class="c1">// int[] food = {1,5,3,4};</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">food</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">food</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="nc">StringBuilder</span> <span class="n">first_player</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">food</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">food</span><span class="o">[</span><span class="n">i</span><span class="o">]/</span><span class="mi">2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="n">first_player</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">first_player</span><span class="o">.</span><span class="na">reverse</span><span class="o">();</span>
        <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
        <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">first_player</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>

        <span class="k">return</span> <span class="n">res</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>알고리즘과 관련된 내용은 아니지만 ‘데칼코마니’ 방식으로 문제를 풀기위한 아이디어를 생각해낼 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 푸드 파이트 대회]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 2563번 - 색종이</title><link href="http://localhost:4000/java/121-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 2563번 - 색종이" /><published>2022-11-02T00:00:00+09:00</published><updated>2022-11-02T00:00:00+09:00</updated><id>http://localhost:4000/java/121-post</id><content type="html" xml:base="http://localhost:4000/java/121-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2563.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 최대한 단순하게 풀기 위한 아이디어를 생각해야 한다. <br />
처음엔 주어진 x와 y 좌표마다 +10을 한 후 뺄셈한 결과가 10 이상이어야 하는 등 복잡한 조건을 걸어야 한다고 생각했지만, 더 쉽게 풀 수 있는 방법이 있었다. <br />
바로 100X100 크기의 도화지에서 <strong>색종이가 붙여진 자리마다 마킹을 하여 마킹한 자리의 갯수</strong>를 세면 자연스럽게 붙여진 색종이의 면적을 구할 수 있다는 것이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>100X100 크기의 2차원 배열을 활용한다.</li>
  <li>위에서 만든 2차원 배열을 순회하며 <strong>색종이가 붙여진 자리마다 마킹</strong>을 한다.
    <ul>
      <li>주어진 x와 y의 좌표를 보고 <em>x부터 x+10까지, y부터 y+10까지의 크기만큼 마킹</em>한다.</li>
    </ul>
  </li>
  <li>2차원 배열에서 마킹한 갯수를 세면 된다.</li>
</ul>

<p><br />
위와 같이 도화지 자체에 마킹을 해놓고 마킹의 갯수를 세기만 하면 간단하게 문제를 풀 수 있다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">100</span><span class="o">][</span><span class="mi">100</span><span class="o">];</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 도화지로 사용할 100X100 크기를 가지는 2차원 배열 arr를 초기화하고, 색종이 갯수 N을 입력받는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">x</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span> <span class="n">x</span><span class="o">+</span><span class="mi">10</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">y</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span> <span class="n">y</span><span class="o">+</span><span class="mi">10</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>색종이 갯수대로 x, y를 입력받는데, 두 좌표를 입력받을 때마다 <strong>도화지 배열 arr에서 색종이가 붙여질 자리를 탐색(x~x+10, y~y+10까지)하여 1로 변경</strong>한다. <br />
그러면 자연스럽게 N개의 색종이가 붙여진 자리가 1로 이루어진다고 보면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 도화지 배열 arr를 순회하며 색종이가 붙여진 자리, 즉 1로 마킹된 값들의 갯수를 세면 N개의 붙여진 색종이의 넓이를 구할 수 있게 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">100</span><span class="o">][</span><span class="mi">100</span><span class="o">];</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">x</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span> <span class="n">x</span><span class="o">+</span><span class="mi">10</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">y</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span> <span class="n">y</span><span class="o">+</span><span class="mi">10</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>이번 색종이 문제는 단순한 아이디어로 접근하는 것이 더 쉬운 풀이를 낼 수 있었다. 처음에 색종이가 붙여질 자리마다 복잡한 로직을 통해 구하려고 하는데 오히려 코드의 가독성은 떨어졌고 잘못된 방향임을 느꼈다.
차분히 다시 쉬운 방법은 없을까 생각해보니 도화지 자체에서 색종이가 붙여질 자리마다 마킹하는 방법을 생각해낼 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2563번 - 색종이]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-3) 2566번 - 최댓값</title><link href="http://localhost:4000/java/120-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-3) 2566번 - 최댓값" /><published>2022-11-01T00:00:00+09:00</published><updated>2022-11-01T00:00:00+09:00</updated><id>http://localhost:4000/java/120-post</id><content type="html" xml:base="http://localhost:4000/java/120-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2566.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>9X9 격자판 크기에 주어지는 값들 중 최댓값을 찾고, 최댓값이 어느 행, 어느 열에 위치하는지를 구해야 한다. <br />
중첩 반복문으로 2차원 배열을 활용해 접근하면 손쉽게 알아낼 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>격자판에 주어지는 9X9 크기의 입력값들을 2차원 배열에 저장한다.</li>
  <li>위에서 만든 2차원 배열을 순회하며 최댓값을 찾는다.</li>
</ul>

<p><br />
아이디어대로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">9</span><span class="o">][</span><span class="mi">9</span><span class="o">];</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>9X9 크기의 2차원 배열 arr를 선언하여 초기화하고, 입력으로 받는 격자판의 값들을 arr 배열에 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 구해야 할 최댓값과 최댓값의 행과 열을 변수로 만들어 담기위해 미리 변수를 각각 0으로 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
            <span class="n">row</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">col</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 이중 for문으로 2차원 배열 arr를 순회하며 격자판들의 값중에서 최댓값과 최댓값의 행과 열을 찾아 각각의 변수에 저장하면 된다.</p>

<p><br /></p>

<h4 id="모든-격자판81칸의-값이-0이라면">모든 격자판(81칸)의 값이 0이라면?</h4>
<p>위와 같이 코드를 작성하고 제출하니 <strong>정답 내역이 100%까지 가서 “틀렸습니다”</strong> 로 나왔다. <br />
오답이 될만한 테스트케이스를 살펴보니 역시 작성한 코드에는 허점이 있었다. <br /></p>

<p>바로 <strong>모든 격자판의 값이 0일 경우</strong>이다. 말 그대로 81칸, 모든 격자판의 값이 0이라면 결국 <strong>첫번째로 나오는 1번째 행, 1번째 열의 0이 최댓값이 된다.</strong> <br />
그런데 내가 작성한 코드는 0번째 행, 0번째 열을 출력하고 있었다. <br />
바로 최댓값 변수 <strong>max의 초기값을 0으로 주었기 때문</strong>이다. <br />
그렇게 위의 이중 for문 내에 있는 조건문을 충족하지 못하기에 행과 열을 탐색하지 못하고 반복문이 종료되어 문제가 발생하게 되었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
            <span class="n">row</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">col</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">max</span><span class="o">+</span><span class="s">"\n"</span> <span class="o">+</span> <span class="n">row</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">col</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 <strong>max 변수를 -1 음수로 두어 격자판의 값이 0이어도 최댓값을 탐색할 수 있도록 수정</strong>하니 정상적으로 정답을 낼 수 있었다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">9</span><span class="o">][</span><span class="mi">9</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                    <span class="n">row</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                    <span class="n">col</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">max</span><span class="o">+</span><span class="s">"\n"</span> <span class="o">+</span> <span class="n">row</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">col</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>최댓값의 초기값이 2차원 배열을 순회하며 충족해야 하는 조건에 부합되지 않아 문제가 발생했지만, 빠르게 문제가 무엇인지 알아내어 수정할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2566번 - 최댓값]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-5) 2738번 - 행렬 덧셈</title><link href="http://localhost:4000/java/119-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-5) 2738번 - 행렬 덧셈" /><published>2022-10-31T00:00:00+09:00</published><updated>2022-10-31T00:00:00+09:00</updated><id>http://localhost:4000/java/119-post</id><content type="html" xml:base="http://localhost:4000/java/119-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2738.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>2차원 배열 분야가 부족한 것 같아 2차원 배열 카테고리의 문제를 풀어보기로 하였다. <br />
이번 문제는 2차원 배열을 활용해 A 행렬과 B 행렬의 덧셈 연산을 하면 된다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>공백 기준으로 입력받은 A 행렬과 B 행렬의 값을 각각 2차원 배열로 만들어 저장한다.</li>
  <li>이중 for문을 통해 A, B 행렬을 순회하며 각 자리의 원소값을 더한다.</li>
</ul>

<p><br /></p>

<p>간단한 방법으로 2차원 배열에서의 덧셈을 할 수 있다. <br />
바로 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="kt">int</span><span class="o">[][]</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[][]</span> <span class="no">B</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N*M 크기의 A와 B행렬을 만들어야 하기에 N과 M을 입력받아 NXM 크기를 가진 2차원 배열 A, B을 초기화하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// A 행렬의 값을 2차원 배열에 저장</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// B 행렬의 값을 2차원 배열에 저장</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>문제 입력 테스트케이스를 보면 A 행렬의 값을 먼저 입력받고 B 행렬의 값을 입력받기 때문에 <br />
A 행렬을 먼저 2차원배열에 저장해주고, 다음에 B 행렬을 2차원배열로 저장해준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+=</span> <span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span> <span class="c1">// A 행렬에 B 행렬의 값을 덧셈</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>A와 B 행렬 모두 NXM 크기이기 때문에 <strong>이중 for문으로 NXM 만큼 순회하면서 A 행렬의 각 원소값에 B 행렬의 각 원소의 값을 덧셈</strong>해주면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">:</span> <span class="no">A</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 A에 B 값을 더했으니 A 행렬의 값을 공백을 추가하여 출력해주면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span><span class="o">[][]</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="no">B</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+=</span> <span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">:</span> <span class="no">A</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>2차원 배열 문제들을 풀어보며, 2차원 배열의 인덱스 값 접근, 값 활용 등 2차원 배열을 활용하는 문제를 많이 풀어야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2738번 - 행렬 덧셈]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 2587번 - 대표값2</title><link href="http://localhost:4000/java/118-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 2587번 - 대표값2" /><published>2022-10-30T00:00:00+09:00</published><updated>2022-10-30T00:00:00+09:00</updated><id>http://localhost:4000/java/118-post</id><content type="html" xml:base="http://localhost:4000/java/118-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2587.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제의 요구사항은 주어진 5개의 값들의 평균값과 중앙값을 구하는 것이다. <br />
값들을 더해 평균을 구하고 값들이 정렬된 상태에서 중앙값을 구하는 것은 크게 어렵지 않다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>주어진 5개의 값들을 배열로 만든다.</li>
  <li>5개의 값들을 더하고, 5로 나누어 평균값을 구한다.</li>
  <li>5개의 값이 들어있는 배열을 오름차순으로 정렬하고, 세번째 인덱스로 접근하여 중앙값을 구한다.</li>
</ul>

<p><br />
아이디어는 간단하니 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
<span class="kt">int</span> <span class="n">avr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 5개의 값들을 담을 1차원 배열 arr를 선언하고, 평균값을 구할 avr 변수를 하나 생성하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">avr</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>

<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="n">avr</span> <span class="o">=</span> <span class="n">avr</span><span class="o">/</span><span class="mi">5</span><span class="o">;</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">avr</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="mi">5</span><span class="o">/</span><span class="mi">2</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>평균값은 5개의 값들을 더해준 avr 변수를 5로 나눈 값으로 구할 수 있고, <br />
중앙값은 5개의 값들을 저장한 arr 배열을 오름차순으로 정렬한 후, <strong>arr[배열의 길이/2]</strong>로 접근하여 중앙값을 구할 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">avr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">avr</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
        <span class="n">avr</span> <span class="o">=</span> <span class="n">avr</span><span class="o">/</span><span class="mi">5</span><span class="o">;</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">avr</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="mi">5</span><span class="o">/</span><span class="mi">2</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>1차원 배열에 값을 저장해두고 5개의 고정된 홀수 길이인 점을 고려해, 중앙값을 쉽게 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2587번 - 대표값2]]></summary></entry></feed>