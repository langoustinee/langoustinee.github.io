<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-03T23:14:17+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 백준(브론즈-3) 4153번 - 직각삼각형</title><link href="http://localhost:4000/java/135-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-3) 4153번 - 직각삼각형" /><published>2022-12-03T00:00:00+09:00</published><updated>2022-12-03T00:00:00+09:00</updated><id>http://localhost:4000/java/135-post</id><content type="html" xml:base="http://localhost:4000/java/135-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/4153.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 피타고라스 정리의 개념만 알고 있다면 큰 문제없이 풀 수 있을 것이다.</p>

<blockquote>
  <p><strong>피타고라스의 정리</strong>란? <br />
직각을 낀 두변의 길이를 a, b라고 하고, 빗변의 길이를 c라고 했을 때 <code class="language-plaintext highlighter-rouge">a^2 + b^2 = c^2</code>가 성립된다.</p>
</blockquote>

<p>문제에서 유의할 점은 <strong>a, b, c의 위치가 특정되지 않았기에 별도로 정렬을 해야한다.</strong></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>공백을 기준으로 세 변의 길이값을 입력받아 배열에 저장한다.</li>
  <li>빗변의 길이가 가장 긴게 c이기에 배열을 오름차순으로 정렬하여 작은 값부터 큰 값 순서대로 a, b, c로 정한다.</li>
  <li>피타고라스 정리 공식을 활용해 직각삼각형 여부를 판단한다.</li>
</ul>

<p><br /></p>

<p>주어지는 세 변의 길이 중 가장 긴 길이를 c로 정한다면 피타고라스 정리 공식을 이용해 직각삼각형 여부를 알 수 있다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

    <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
    
    <span class="k">if</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"right"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"wrong"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>공백을 기준으로 한 줄에 세 변의 길이를 입력받아 배열에 저장하고 해당 배열을 오름차순으로 정렬한 뒤 순서대로 a, b, c에 대입한다. <br />
그리고 피타고라스 정리 공식 <code class="language-plaintext highlighter-rouge">a^2 + b^2 = c^2</code>을 적용하여 주어진 삼각형이 직각삼각형인지 판단하여 맞다면 “right”를, 틀리다면 “wrong”를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

            <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

            <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            
            <span class="k">if</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"right"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"wrong"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>주어진 세 변의 길이가 특정되지 않았기에 배열 정렬을 활용해 세 변 a, b, c를 정하여 직각삼각형 여부를 알아낼 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/4153">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[4153번 - 직각삼각형]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 15828번 - Router</title><link href="http://localhost:4000/java/134-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 15828번 - Router" /><published>2022-12-01T00:00:00+09:00</published><updated>2022-12-01T00:00:00+09:00</updated><id>http://localhost:4000/java/134-post</id><content type="html" xml:base="http://localhost:4000/java/134-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/15828-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/15828-attach02.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/15828-attach03.png" width="100%" /></center>

<p>자세한 테스트케이스 데이터는 <a href="https://www.acmicpc.net/problem/15828">문제링크</a>를 참고하자.</p>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 큐의 개념을 잘 알고 있다면 쉽게 풀 수 있는 문제이다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>양수가 주어졌을 때 큐의 크기가 버퍼 크기(N)보다 작다면 양수를 큐에 삽입한다.</li>
  <li>0이 주어졌을 때 큐에서 값을 추출(삭제)한다.</li>
  <li>-1이 주어졌을 때 큐를 확인하여 큐가 비어있다면 “empty”를, 비어있지 않다면 큐의 원소를 출력한다.</li>
</ul>

<p><br />
테스트케이스를 잘 보면 큐의 <strong>선입선출 성질</strong>을 그대로 적용하였음을 알 수 있다. <br />
에제 1을 한번 살펴보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>N(버퍼의 크기) = 5, Q(큐).size = 0
1 =&gt; N &gt; Q.size =&gt; 큐에 1 삽입 Q[1]
2 =&gt; N &gt; Q.size =&gt; 큐에 2 삽입 Q[1, 2]
0 =&gt; 큐에서 1 추출 =&gt; Q[2]
3 =&gt; N &gt; Q.size =&gt; 큐에 3 삽입 Q[2, 3]
4 =&gt; N &gt; Q.size =&gt; 큐에 4 삽입 Q[2, 3, 4]
0 =&gt; 큐에서 2 추출 =&gt; Q[3, 4]
5 =&gt; N &gt; Q.size =&gt; 큐에 5 삽입 Q[3, 4, 5]
6 =&gt; N &gt; Q.size =&gt; 큐에 6 삽입 Q[3, 4, 5, 6]
0 =&gt; 큐에서 3 추출 =&gt; [4, 5, 6]
0 =&gt; 큐에서 6 추출 =&gt; [5, 6]
-1 =&gt; Q[5, 6] 출력
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같은 방식대로 요구사항에 대한 솔루션을 도출할 수 있다. 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>버퍼의 크기 N을 입력받고 연산간에 활용할 Queue를 하나 생성하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre> <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">info</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">if</span><span class="o">(</span><span class="n">info</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">info</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">info</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> 
    <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"empty"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">qu</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">num</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>핵심 로직에 대한 내용은 다음과 같다.</p>

<ol>
  <li>-1을 입력받을 때까지 while문으로 입력을 받는다.</li>
  <li>0보다 큰 양수를 입력받으면 N보다 큐의 크기가 작은지 확인하고 큐에 양수를 삽입한다.</li>
  <li>0을 입력받으면 현재 큐에서 원소 하나를 추출(삭제)한다.</li>
  <li>-1을 입력받는다면 while문을 탈출한 후 큐가 비어있는지 확인하여 비어있다면 “empty”를, 비어있지 않다면 큐의 원소를 출력하면 된다.</li>
</ol>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">info</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">info</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">info</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">info</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> 
            <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"empty"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">qu</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">num</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>큐의 개념을 잘 숙지하고 있다면 쉽게 풀 수 있었던 문제였다. 큐를 응용하는 문제들도 많이 풀어봐야겠다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/15828">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[15828번 - Router]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 2609번 - 최대공약수와 최소공배수</title><link href="http://localhost:4000/java/133-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 2609번 - 최대공약수와 최소공배수" /><published>2022-11-30T00:00:00+09:00</published><updated>2022-11-30T00:00:00+09:00</updated><id>http://localhost:4000/java/133-post</id><content type="html" xml:base="http://localhost:4000/java/133-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2609.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 최대공약수를 구하는 것이 관건이다. <br />
최대공약수를 구하는데 특정 수의 약수가 매우 많다면, 인수분해 및 두수를 비교하여 곱하는 과정에서 많은 시간이 소요된다.<br />
그래서 <strong>유클리드 호제법</strong>을 활용하여 최대공약수를 구해야 한다.</p>

<p>유클리드 호제법을 활용한 풀이는 <a href="http://localhost:4000/java/28-post/">최대공약수와 최소공배수</a> 문제에서 자세히 다루었으니 참고하자.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>두 수를 입력받고 두 수 중 큰수와 작은수를 구분하여 최대공약수와 최소공배수를 구한다.</li>
  <li>유클리드 호제법인 <strong>큰 수를 작은 수로나눈 나머지가 0보다 클 경우 재귀함수를 통해 0이 되는 시점의 작은 수을 반환</strong>하는 함수를 통해 최대공약수를 구한다.</li>
  <li>두 수의 곱을 최대공약수로 나누어 최소공배수를 구한다.</li>
</ul>

<p><br /></p>

<p>최대공약수와 최소공배수는 많이 접하고 풀어봤던 문제이기에 솝쉽게 아이디어를 낼 수 있었다. 이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="kt">int</span> <span class="n">bn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">sn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N과 M을 입력받고 큰 수 bn과 작은 수 sn을 정하여 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">GCD</span> <span class="o">=</span> <span class="n">eucd</span><span class="o">(</span><span class="n">bn</span><span class="o">,</span> <span class="n">sn</span><span class="o">);</span> <span class="c1">// 유클리드 호제법으로 최대공약수 구함</span>
<span class="kt">int</span> <span class="no">LCM</span> <span class="o">=</span> <span class="no">N</span> <span class="o">*</span> <span class="no">M</span> <span class="o">/</span> <span class="no">GCD</span><span class="o">;</span> <span class="c1">// 최소공배수</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="no">GCD</span><span class="o">+</span><span class="s">"\n"</span><span class="o">+</span><span class="no">LCM</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>    
</pre></td></tr></tbody></table></code></pre></div></div>
<p>eucd() 메서드에 큰 수와 작은 수를 인자로 넘겨 호출하고 해당 메서드로 구한 최대공약수를 가지고 최소공배수를 구하면 된다.</p>

<p><br /></p>

<p>eucd 메서드를 살퍄보면 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">static</span> <span class="kt">int</span> <span class="nf">eucd</span><span class="o">(</span><span class="kt">int</span> <span class="n">bn</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sn</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bn</span> <span class="o">%</span> <span class="n">sn</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">sn</span><span class="o">;</span>
    <span class="k">else</span> <span class="k">return</span> <span class="nf">eucd</span><span class="o">(</span><span class="n">sn</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>bn을 sn으로 나눈 나머지를 r에 저장하는데 r이 0보다 클 경우 재귀함수를 통해 0이 되는 시점의 sn을 반환하게 되면 최대공약수를 구할 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">bn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">sn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>

        <span class="kt">int</span> <span class="no">GCD</span> <span class="o">=</span> <span class="n">eucd</span><span class="o">(</span><span class="n">bn</span><span class="o">,</span> <span class="n">sn</span><span class="o">);</span> <span class="c1">// 유클리드 호제법으로 최대공약수 구함</span>
        <span class="kt">int</span> <span class="no">LCM</span> <span class="o">=</span> <span class="no">N</span> <span class="o">*</span> <span class="no">M</span> <span class="o">/</span> <span class="no">GCD</span><span class="o">;</span> <span class="c1">// 최소공배수</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="no">GCD</span><span class="o">+</span><span class="s">"\n"</span><span class="o">+</span><span class="no">LCM</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>    

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   

    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">eucd</span><span class="o">(</span><span class="kt">int</span> <span class="n">bn</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sn</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bn</span> <span class="o">%</span> <span class="n">sn</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">sn</span><span class="o">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="nf">eucd</span><span class="o">(</span><span class="n">sn</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>최대공약수를 구하는 알고리즘인 유클리드 호제법을 활용할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/2609">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2609번 - 최대공약수와 최소공배수]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 1920번 - 수 찾기</title><link href="http://localhost:4000/java/132-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 1920번 - 수 찾기" /><published>2022-11-30T00:00:00+09:00</published><updated>2022-11-30T00:00:00+09:00</updated><id>http://localhost:4000/java/132-post</id><content type="html" xml:base="http://localhost:4000/java/132-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1920.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 시간 제한이 1초이고, 주어지는 정수의 범위가 2의 31승 정도로 굉장히 크다. <br />
그렇기에 중첩반복문을 사용하게 되면 시간 초과가 발생할 것이기에 O(lonN)의 시간복잡도를 가지는 <strong>이분 탐색</strong>을 활용해야 한다.</p>

<p><br /></p>

<blockquote>
  <p><strong>이분(이진)탐색</strong>이란? <br />
이진 탐색(이분 탐색) 알고리즘은 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법이다. <br />
변수 3개(start, end, mid)를 사용하여 탐색한다. 찾으려는 데이터와 중간점 위치에 있는 데이터를 반복적으로 비교해서 원하는 데이터를 찾는 것이 이진 탐색의 과정이다.</p>
</blockquote>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>N개의 수들을 배열에 저장한 뒤 해당 배열을 오름차순으로 정렬한다.</li>
  <li>M개의 수별로 N개의 수들을 저장한 배열에 <strong>이분 탐색을 하여 M개의 수들 중 해당 배열에 포함된 수가 있는지 검증</strong>한다.</li>
</ul>

<p><br /></p>

<p>말 그대로 이분 탐색을 위해 배열을 정렬한 뒤 정렬한 배열에서 M개의 수들에 대한 이분 탐색을 진행하면 된다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span> 
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N을 입력받고 N개의 수들을 배열에 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="no">A</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>M을 입력받은 후 이분 탐색을 위해 앞에서 N개의 수들을 저장한 배열을 정렬한다.</p>

<blockquote>
  <p>이분 탐색을 위해서 왜 <strong>배열을 정렬해야 하나?</strong> <br />
이진 탐색은 배열 내부의 데이터가 정렬되어 있어야만 사용할 수 있는 알고리즘이기 때문이다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="no">A</span><span class="o">,</span> <span class="n">num</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">res</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>M개의 수를 입력받으며 Arrays에서 제공하는 binarySearch() 메서드를 활용해 A배열에 포함되는지 이분 탐색을 진행한다. <br />
해당 메서드의 반환값이 0보다 크거나 같다면 M번째 수는 A배열에 포함되었다는 뜻이기에 “1”을 출력하면 되고, <br />
음수가 나왔다면  A배열에 없는 수이기에 “0”을 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span> 
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="no">A</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="no">A</span><span class="o">,</span> <span class="n">num</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">res</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>O(logN)의 시간복잡도를 가지는 이분(이진)탐색 알고리즘을 활용하는데, Arrays 패키지에 존재하는 binarySearch 메서드를 통해 손쉽게 솔루션 코드를 작성할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1920">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2920번 - 음계]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 2920번 - 음계</title><link href="http://localhost:4000/java/131-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 2920번 - 음계" /><published>2022-11-28T00:00:00+09:00</published><updated>2022-11-28T00:00:00+09:00</updated><id>http://localhost:4000/java/131-post</id><content type="html" xml:base="http://localhost:4000/java/131-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2920.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 ascending 계열과 descending 계열 두가지 패턴으로 주어졌을 때만 고려하면 된다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>ascending 계열 [1,2,3,4,5,6,7,8]과 descending 계열 [8,7,6,5,4,3,2,1] 두 가지 방식을 공백없는 문자열로 생성한다.</li>
  <li>주어진 문자열과 ascending 문자열을, descending 문자열을 비교한다.</li>
  <li>두 문자열과 다르다면 mixed를 출력하고 ascending 문자열과 같다면 ascending을, descending 문자열과 같다면 descending을 출력한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">ascending</span> <span class="o">=</span> <span class="s">"12345678"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">descending</span> <span class="o">=</span> <span class="s">"87654321"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">replace</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>ascending과 descending 문자열을 생성하고 주어진 문자열을 공백없이 String형으로 만들자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">ascending</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"ascending"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">descending</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"descending"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"mixed"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>주어진 문자열이 ascending 문자열과 같다면 ascending을, descending 문자열과 같다면 descending을 출력하고 <br />
두 문자열에 포함되지 않는다면 mixed를 출력한다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">String</span> <span class="n">ascending</span> <span class="o">=</span> <span class="s">"12345678"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">descending</span> <span class="o">=</span> <span class="s">"87654321"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">replace</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">ascending</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"ascending"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">descending</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"descending"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"mixed"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>문제에서 요구하는 ascending descending 두가지를 충족하면 되기에 미리 두가지 경우의 수를 모두 비교하여 검증할 수 있었다.</li>
  <li>단순하게 두가지 경우의 수의 범위를 요구했기에 가능한 풀이였다고 생각한다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/2920">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2920번 - 음계]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 1257번 - 팰린드롬수</title><link href="http://localhost:4000/java/130-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 1257번 - 팰린드롬수" /><published>2022-11-27T00:00:00+09:00</published><updated>2022-11-27T00:00:00+09:00</updated><id>http://localhost:4000/java/130-post</id><content type="html" xml:base="http://localhost:4000/java/130-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1257.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 주어지는 문자열 수들을 데칼코마니 방식으로 접근하면 쉽게 풀 수 있다. <br />
말 그대로 첫번째 인덱스 문자와 마지막 인덱스 문자를 비교하고 그 다음 인덱스들을 비교하는 방식으로 검증하며 이 인덱스가 다르면 팰린드롬 수가 아니라고 판단하면 된다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>“0”을 입력받으면 입력을 종료한다.</li>
  <li>첫번째 인덱스와 마지막 인덱스부터 비교하기 위해 주어진 문자열 수를 순회한다.
    <ul>
      <li><strong>순회할 때 해당 문자열 길이/2 만큼 순회하면 첫번째와 마지막부터 비교해갈 수 있다.</strong></li>
    </ul>
  </li>
  <li>위 과정중에서 첫번째 인덱스 문자열부터 마지막 인덱스 문자열까지 비교하며 문자열이 다르다면 no를 출력하고 같으면 yes를 출력하면 된다.</li>
</ul>

<p>아이디어를 보면 알겠지만 단순한 방법으로 풀 수 있음을 알 수 있다. 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"0"</span><span class="o">))</span> <span class="k">break</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마음대로 문자열들을 입력받으면서 입력의 종료는 “0”을 기준으로 판단하기에 “0”을 입력받으면 입력을 종료한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="kt">boolean</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()/</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">))</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="n">res</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"yes"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>첫번째 인덱스 문자열부터 마지막 인덱스 문자열까지 비교하며 팰린드롬 수인지 확인할 때 사용할 boolean 변수를 하나 만든다. <br />
그리고 주어진 <strong>문자열 길이의 절반만큼 순회하면서 첫번째 인덱스와 마지막 인덱스 문자를 비교하며 팰린드롬 수인지 확인</strong>한다. <br />
팰린드롬수라면 res가 true이기에 yes를 출력하고, 순회과정 중 팰린드롬수가 아니라면 res가 false가 되기에 no를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="kt">boolean</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

            <span class="k">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"0"</span><span class="o">))</span> <span class="k">break</span><span class="o">;</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()/</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">))</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">res</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"yes"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>주어진 문자열의 앞 뒤부터 안쪽으로 접근하니 문제를 쉽게 풀 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1257">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1257번 - 팰린드롬수]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 2164번 - 카드2</title><link href="http://localhost:4000/java/129-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 2164번 - 카드2" /><published>2022-11-10T00:00:00+09:00</published><updated>2022-11-10T00:00:00+09:00</updated><id>http://localhost:4000/java/129-post</id><content type="html" xml:base="http://localhost:4000/java/129-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2164.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 큐의 선입선출(FIFO) 기능을 알고 활용할 줄 알면 쉽게 풀 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>N을 입력받으면 1부터 N까지의 수를 Queue에 삽입한다.</li>
  <li>큐의 삽입된 값이 1개가 될 때까지 아래 작업을 수행한다.
    <ul>
      <li>front(맨앞의 수)를 하나 삭제한다.</li>
      <li><strong>front(새로운 맨앞의 수)를 추출하여 새로 삽입</strong>한다.</li>
    </ul>
  </li>
  <li>위 과정을 반복하며 큐의 값이 1개가 된다면 큐의 front값을 출력한다.</li>
</ul>

<p><br />
아이디어는 굉장히 단순하다. 중요한 부분은 front(맨 앞의 수)를 추출한 후 변경된 front값을 맨 뒤로 보내는 것이다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N을 입력받고 1부터 N까지의 수를 담을 Queue를 하나 생성하자. <br />
그리고 1부터 N까지의 수를 Queue에 삽입해둔다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">front</span> <span class="o">=</span> <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
    <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">front</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">peek</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 큐의 삽입된 값이 1개가 될 때까지 큐에서 값을 2번 추출하는데, 1번째 추출은 삭제를 의미한다. <br />
2번째 추출된 값을 큐에 다시 삽입하면 된다. 이 값을 맨 뒤로 추출하는 이유는 큐는 선입선출 방식이기에 <strong>가장 최신에 넣은 값이 결국 맨 뒤의 값이기 때문</strong>이다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">while</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">front</span> <span class="o">=</span> <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">front</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">peek</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li><a href="https://jooney-95.github.io/java/128-post/">큐 2</a> 문제와 동일하게 Queue 인터페이스 자체로 푸는 방식도 좋지만, LinkedList나 Deque를 통해서도 꼭 풀어볼 예정이다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/2164">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2164번 - 카드2]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 18258번 - 큐 2</title><link href="http://localhost:4000/java/128-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 18258번 - 큐 2" /><published>2022-11-09T00:00:00+09:00</published><updated>2022-11-09T00:00:00+09:00</updated><id>http://localhost:4000/java/128-post</id><content type="html" xml:base="http://localhost:4000/java/128-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/18258-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/18258-attach02.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이제 큐,덱 카테고리 문제를 풀기 시작했다. 스택과 더불어 큐 문제 풀 때는 구현과정이 직관적(?)으로 느껴져 재밌게 풀고 있는 것 같다. <br />
이번 문제는 시간 제한이 1초로 빡센 편이니 Scanner보다는 BufferedReader 및 BufferedWriter를 활용하는게 시간 단축에 조금이나마 도움이 되지 않을까 생각한다.</p>

<p>일단 큐(Queue)에 대한 원리를 어느 정도 알고 있어야 한다. <br />
잠깐 큐에 대해서 설명하자면 큐(Queue) 자료구조는 <strong>선입선출(FIFO) 구조로 먼저 들어간 데이터가 먼저 나오는 형식</strong>으로 이루어진다.</p>

<p>또한, Java에서는 Queue 인터페이스를 선언하여 사용할 경우 맨 앞 값을 가져올 수는 있지만(peek() 메서드) 맨 뒤 값을 가져올 수 있는 back()과 같은 메서드가 없기 때문에 맨 뒤 값을 꺼내올 수 없어 직접 구해야 한다.</p>

<p>이를 해결하기 위해서는 <strong>Deque 인터페이스, 흔히 말하는 ‘덱’을 활용하거나 LinkedList 라이브러리를 활용</strong>하여 풀 수 있다. <br />
하지만 위 두가지 방식이 아닌 Queue 인터페이스를 사용하는데 직접 back을 구하는 방식으로 풀어보았다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>push [N]이라면 N을 큐에 삽입한다. 이 때 <strong>back(맨 뒤값)에 N의 값을 저장</strong>한다.</li>
  <li>pop이라면 큐에서 값을 추출한다. 추출된 front(맨 앞값)를 출력한다.</li>
  <li>size라면 현재 큐의 삽입된 값의 개수를 출력한다.</li>
  <li>empty라면 큐가 비어있는지 확인후 비어있다면 1, 비어있지 않다면 0을 출력한다.</li>
  <li>front라면 맨 앞값을 출력해야 하기에 qu.peek() 메서드를 통해 큐의 front(맨 앞값)를 출력한다.</li>
  <li>back이라면 push일 때 담아둔 back 값을 출력한다.</li>
</ul>

<p><br /></p>

<p>back을 N으로 지정한 이유는 큐의 FIFO 구조를 이용하기 위함이다. 1,2,3을 순서대로 큐에 삽입하는 예를 들어보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>push 1
    queue =&gt; front [1] back
push 2
    queue =&gt; front [1,2] back
push 3
    queue =&gt; front [1,2,3] back
</pre></td></tr></tbody></table></code></pre></div></div>
<p>순서대로 1,2,3을 큐에 삽입하면서 front(맨 앞값)는 제일 먼저 삽입한 값이고, back(맨 뒤값)은 제일 최신에 삽입한 값이 된다. <br />
그래서 <strong>큐에 N을 삽입할 때마다 N을 back에 담아둔다면 맨 뒤값을 기록</strong>하고 있게 되는 것이다.</p>

<p><br />
이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="kt">int</span> <span class="n">back</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 명령의 갯수 N을 입력받고, push [N] 명령어를 받을 때마다 N을 담을 Queue, 맨 뒤값을 저장해둘 back 변수를 선언하자. <br /></p>

<blockquote>
  <p><strong>back을 -1로 초기화한 이유는?</strong> <br />
혹여 push 명령어가 없어 back 값이 변경되지 않았을 경우 큐가 비어있기에 back 명령어가 들어왔을 때 “-1”을 출력해야 하기 때문이다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
        <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
        <span class="n">back</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="s">"pop"</span><span class="o">:</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="s">"size"</span><span class="o">:</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="s">"front"</span><span class="o">:</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">peek</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="s">"back"</span><span class="o">:</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">back</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N개의 명령어를 입력받으며 다음을 수행한다.</p>
<ul>
  <li>push [N] 명령어를 받으면 N을 큐에 삽입하고 back에 N 값을 저장한다.</li>
  <li>pop 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 front(맨 앞값)를 추출하고 출력한다.</li>
  <li>size 명령어를 받으면 현재 큐의 삽입된 값의 개수를 출력한다.</li>
  <li>empty 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “1”, 비어있지 않다면 “0”을 출력한다.</li>
  <li>front 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 현재 큐의 front(맨 앞값)를 출력한다.</li>
  <li>back 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 <strong>push 명령 조건에서 저장해둔 back의 값을 출력</strong>한다.</li>
</ul>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">back</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
                <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
                <span class="n">back</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="s">"pop"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"size"</span><span class="o">:</span>
                        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"front"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">peek</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"back"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">back</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">default</span><span class="o">:</span>
                        <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>스택에 이어 큐를 활용하는 문제를 푸는데 스택 문제를 풀 때와 비슷하게 재미를 느끼는 것 같다. LIFO, FIFO 같은 직관적인 속성들이 문제 접근에 도움을 주는 것 같다.</li>
  <li>추후 시간이 나면 맨 뒤값을 제공해주는 Deque, LinkedList를 활용하는 방식도 꼭 풀어보고 수정해놓자!</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며  자세한 내용은 <a href="https://www.acmicpc.net/problem/18258">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[18258번 - 큐 2]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 4949번 - 균형잡힌 세상</title><link href="http://localhost:4000/java/127-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 4949번 - 균형잡힌 세상" /><published>2022-11-08T00:00:00+09:00</published><updated>2022-11-08T00:00:00+09:00</updated><id>http://localhost:4000/java/127-post</id><content type="html" xml:base="http://localhost:4000/java/127-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/4949-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/4949-attach02.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 괄호 문자열에서 괄호 종류가 “(“와 “[“로 두가지이다. <br />
단일 괄호 문자열과 비교하면 서로 다른 괄호의 짝이 맞는지를 검증해야한다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>”(“는 “)”를 value값으로, “[“는 “]”를 value값으로 가지는 Map을 미리 만들어둔다.</li>
  <li>개행 기준으로 주어지는 문자열에서 “(“나 “[“가 나온다면 스택에 삽입한다.</li>
  <li>”)”가 나온다면 현재 닫혀야할 괄호가 “)”가 맞는지, “]”가 나온다면 현재 닫혀야할 괄호가 “]”가 맞는지 <strong>최신 열린 괄호(스택의 맨 위 값)를 key값으로 Map에서 value값을 조회하여 확인</strong>한다.</li>
  <li>괄호 짝 검증후 스택이 비어있다면 짝이 맞으므로 yes를 출력한다.
    <ul>
      <li>주어진 문자열에서 괄호가 없더라도 yes를 출력한다.</li>
    </ul>
  </li>
  <li>위 괄호 짝 검증 과정 중 괄호 짝이 맞지 않는다면 NO를 출력한다.
    <ul>
      <li>EmptyStackException 예외가 발생할 경우 no를 출력한다.</li>
      <li>열린 괄호와 닫혀야 할 괄호 짝이 하나라도 맞지 않는다면 no를 출력한다.</li>
    </ul>
  </li>
  <li>입력 문자열이 “.”으로만 이루어져 있다면 입력의 끝으로 간주하고 입력을 종료한다.</li>
</ul>

<p><br /></p>

<p>아이디어가 복잡해 보일 수 있는데, <strong>핵심은 “(“ 및 “[” 열린 괄호들이 잘 닫혀있는지 확인</strong>하는 것이다. <br />
말로 설명하자니 길어지는 것 같아 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="sc">')'</span><span class="o">);</span>
<span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="sc">']'</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 여는 괄호 “(“와 “[“의 짝을 미리 Map에 저장해둔다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="kt">boolean</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">"."</span> <span class="o">||</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>주어진 문자열을 담을 input String과 여는 괄호들을 담아둘 Stack인 bracket_list, 짝이 안맞을 경우에 상태를 변경할 boolean 변수 brackets를 선언하자. <br />
“.” 마침표 하나가 입력문자열로 들어올 때까지 입력을 받아야 하기에 while문 내에서 탈출조건을 작성했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'('</span><span class="o">);</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'['</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">brackets</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"yes"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">EmptyStackException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ol>
  <li>EmptyStackException 예와 처리를 하기위해서 try/catch문 내에서 여는 괄호 “(“, “[“가 올 때마다 스택에 삽입해둔다. <br /></li>
  <li>주어진 문자열에서 <strong>닫는 괄호 “)”가 나왔다면 현재 스택에 담긴 최신 값(맨 위)을 키로 Map의 value값을 조회하여 닫혀야 할 괗로가 “(“인지 확인하며, “]”도 동일하게 수행</strong>한다. <br /></li>
</ol>

<p>위 과정을 수행하며 brackets가 false이거나 스택이 비어있지 않다면 괄호 짝이 맞지 않는 것이기에 no를 출력한다. <br />
물론 EmptyStackException 예외가 발생해도 짝이 맞지 않는 것이기에 no를 출력한다. <br />
스택이 비어있고, brackets이 true라면 정상적으로 괄호들의 짝이 맞는 것이기 때문에 yes를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span> <span class="sc">')'</span><span class="o">);</span>
        <span class="n">bracket_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span> <span class="sc">']'</span><span class="o">);</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">bracket_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
            <span class="kt">boolean</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

            <span class="k">if</span><span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="s">"."</span> <span class="o">||</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>

            <span class="k">try</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'('</span><span class="o">);</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="sc">'['</span><span class="o">);</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">bracket_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">)</span> <span class="n">bracket_list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="k">else</span> <span class="n">brackets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bracket_list</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">brackets</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"yes"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">EmptyStackException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>단일 괄호 문자열에서 괄호의 짝을 스택만으로 구현이 가능했지만, 다중 괄호 문자열에서는 별도로 여는 괄호들의 짝이 맞는지를 알아야 하기에 괄호들의 짝을 별도로 담아둘 HashMap을 함께 활용하여 문제를 풀 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/4949">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[4949번 - 균형잡힌 세상]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 10773번 - 제로</title><link href="http://localhost:4000/java/125-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 10773번 - 제로" /><published>2022-11-08T00:00:00+09:00</published><updated>2022-11-08T00:00:00+09:00</updated><id>http://localhost:4000/java/125-post</id><content type="html" xml:base="http://localhost:4000/java/125-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10773.png" width="100%" /></center>
<p><br />
자세한 입출력 테스트케이스는 <a href="https://www.acmicpc.net/problem/10773">문제 링크</a>를 참고하자.</p>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 스택의 후입 선출(LIFO) 구조를 활용하면 손쉽게 풀 수 있다. <br />
K개의 주어지는 정수가 0 이상이면 스택에 저장하고, 0이라면 맨 위 값을 추출하면 된다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>주어지는 정수가 0보다 크면 스택에 삽입한다.<strong>(push연산)</strong></li>
  <li>주어지는 정수가 0이라면 스택에서 추출한다.<strong>(pop연산)</strong></li>
  <li>모든 정수 입력이 끝나면 스택에 남은 값의 합을 구한다.</li>
</ul>

<p><br />
아이디어를 토대로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 정수의 갯수 K를 입력받고 K개의 0보다 큰 정수를 담을 스택을 하나 생성하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
    <span class="k">else</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>K개의 정수를 입력받으며 0보다 크다면 push연산을 통해 스택에 삽입하고, 정수가 0이라면 pop연산을 통해 스택에서 추출한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>정수 입력이 끝나면 스택에 값이 있는지 확인 후 값이 있다면 값들의 합을 구하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
            <span class="k">else</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>스택의 장바구니 속성, 즉 후입선출(LIFO) 기능을 통해 주어지는 정수마다 push연산과 pop연산을 하여 최종 스택에 존재하는 값들의 합을 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10773번 - 제로]]></summary></entry></feed>