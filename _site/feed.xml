<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-20T12:35:15+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 백준(실버-4) 1018번 - 체스판 다시 칠하기</title><link href="http://localhost:4000/java/108-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 1018번 - 체스판 다시 칠하기" /><published>2022-10-20T00:00:00+09:00</published><updated>2022-10-20T00:00:00+09:00</updated><id>http://localhost:4000/java/108-post</id><content type="html" xml:base="http://localhost:4000/java/108-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1018.png" /></center>
<p><br />
자세한 테스트케이스 데이터는 <a href="https://www.acmicpc.net/problem/1018">문제링크</a>를 참고하자.</p>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 이해하는 것부터 어려움이 있었다. <br />
8X8 크기의 정사각형을 아무데서나 골라서 가장 적게 칠해야할 횟수를 구해야 하는데 잘 생각해보니 결국 NXM 크기의 정사각형에서 8X8 크기의 정삭각형 범위만큼 탐색해야 했다. <br /></p>

<p>모든 8X8 정사각형을 탐색하면서 <strong>블랙체스판일 때 칠해야할 횟수와 화이트체스판일 때 칠해야할 횟수를 비교하여 더 적은 횟수를 구하면 된다.</strong></p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>주어진 NXM 크기의 정사각형을 2차원 배열에 담는다.</li>
  <li>NXM 크기의 정사각형에서 8X8 정사각형 범위만큼 순회한다.</li>
  <li>8X8 정사각형에서 블랙체스판, 화이트체스판 2가지 경우일 때 칠해야 할 횟수를 비교하여 더 적은 횟수를 구한다.
    <ul>
      <li>8X8 정사각형에서 <strong>(0,0) 값이 “B”이면 블랙체스판, “W”라면 화이트체스판으로 간주</strong>하자.</li>
      <li>블랙 체스판 일 경우 짝수행(0,2,4,6)이 “BWBWBWBW”이고, 홀수행(1,3,5,7)이 “WBWBWBWB”이어야 한다.
        <ul>
          <li>주어진 행 값과 <strong>블랙체스판이 되어야 할 문자열 “BWBWBWBW”을 비교하여 다른 문자열이 있다면 칠해야할 횟수를 1 증가</strong>시킨다.</li>
        </ul>
      </li>
      <li>화이트 체스판 일 경우 짝수행(0,2,4,6)이 “WBWBWBWB”이고, 홀수행(1,3,5,7)이 “BWBWBWBW”이어야 한다.
        <ul>
          <li>주어진 행 값과 <strong>화이트체스판이 되어야 할 문자열 “WBWBWBWB”을 비교하여 다른 문자열이 있다면 칠해야할 횟수를 1 증가</strong>시킨다.</li>
        </ul>
      </li>
      <li><strong>블랙체스판이나 화이트체스판일 경우의 칠해야할 횟수 중 더 작은 값으로 반환</strong>한다.</li>
    </ul>
  </li>
  <li>NXM 크기의 정사각형에서 8X8 크기의 정사각형만큼 돌면서 가장 최소값으로 칠해야 할 횟수를 구한다.</li>
</ul>

<p>겉으로 보기엔 복잡해보이지만 아이디어는 단순하다. <br />
말 그대로 NXM 크기의 2차원 배열에서 8X8 크기만큼 순회하는데, <br />
여기서 핵심은 <strong>8X8 정사각형에서 블랙체스판, 화이트체스판 2가지 경우의 수를 비교</strong>하는 것이다. <br />
그래서 결국 8X8 정사각형에서 칠해야할 횟수를 구해가며 더 적게 칠해야할 횟수를 구할 수 있게 된다.</p>

<p><br /></p>

<p>이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N과 M을 입력받고, 2차원 String 배열 arr를 NXM 크기로 선언하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">strs</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">strs</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 arr에 입력받은 NXM 크기의 정사각형 원소들을 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">getMinCnt</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">cnt</span><span class="o">,</span> <span class="n">getMinCnt</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>NXM 크기의 정사각형에서 8X8 크기의 정사각형만큼 돌면서 각 <strong>8X8 정사각형마다의 칠해야 할 횟수를 getMinCnt() 함수를 통해 구하여 cnt에 저장</strong>해나간다. <br />
<strong>8X8 정사각형마다 구해진 칠해야할 횟수가 더 적은 횟수로 cnt를 최신화</strong>하면 NXM 정사각형에서 다시 칠해야할 최소 횟수를 구할 수 있다.</p>

<blockquote>
  <p>이중 for문을 돌며 NXM 정사각형에서 8X8 크기의 정사각형만큼 순회하기 위해 i와 j는 8만큼 반복한다.</p>
</blockquote>

<p><br />
이제 8X8 정사각형에서 다시 칠해야할 최소 횟수를 구하는 getMinCnt() 함수를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMinCnt</span><span class="o">(</span><span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start_x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start_y</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">chess</span> <span class="o">=</span> <span class="o">{</span><span class="s">"BWBWBWBW"</span><span class="o">,</span><span class="s">"WBWBWBWB"</span><span class="o">};</span>
    <span class="kt">int</span> <span class="n">end_x</span> <span class="o">=</span> <span class="n">start_x</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">end_y</span> <span class="o">=</span> <span class="n">start_y</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kt">boolean</span> <span class="no">BW</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">start_x</span><span class="o">][</span><span class="n">start_y</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"W"</span><span class="o">))</span> <span class="no">BW</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">else</span> <span class="no">BW</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start_x</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">end_x</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">row</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">start_y</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">end_y</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">row</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="cm">/* 8X8 사각형의 (0,0) 값이 B, 블랙 체스판 일 경우
            * 0,2,4,6 행이 BWBWBWBW 이어야 함.
            * 1,3,5,7 행이 WBWBWBWB 이어야 함.
            *
        */</span>
        <span class="k">if</span><span class="o">(</span><span class="no">BW</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="cm">/* 8X8 사각형의 (0,0) 값이 W, 화이트 체스판 일 경우
            * 0,2,4,6 행이 WBWBWBWB 이어야 함.
            * 1,3,5,7 행이 BWBWBWBW 이어야 함.
            *
        */</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(!</span><span class="no">BW</span><span class="o">)</span> <span class="o">{</span> 
            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 블랙체스판 이라면 칠해야할 횟수와 화이트체스판의 칠해야할 횟수(64 - 블랙체스판 횟수)를 비교하여 적은 값을 반환한다. </span>
    <span class="c1">// 반대로 화이트체스판 이라면 칠해야할 횟수와 블랙체스판의 칠해야할 횟수(64 - 화이트체스판 횟수)를 비교하여 적은 값을 반환한다.</span>
    <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">cnt</span><span class="o">,</span> <span class="mi">64</span><span class="o">-</span><span class="n">cnt</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이 함수의 내용이 가장 중요하다고 본다. 순서대로 무슨 코드인지 살펴보자.</p>

<ol>
  <li>
    <p>먼저 8X8 정사각형에서 (0,0) 값을 통해 블랙체스판인지 화이트체스판인지를 구분한다.</p>
  </li>
  <li>
    <p>그리고 NXM에서 인덱스를 하나씩 옮겨가며 8X8 정사각형들을 탐색해야하기 때문에 <strong>(0~7,0~7), (0~7, 1~8), (0~7, 2~9) …</strong> 등의 인덱스로 접근해야 한다. <br />
main 메서드에서 getMinCnt() 함수의 인자로 넘겨준 <strong>i와 j 값부터 각각 8씩 증가시켜 탐색하여 8X8 정사각형들을 찾을 수 있다.</strong></p>
  </li>
  <li>
    <p>만약 현재 탐색된 8X8 정사각형이 블랙 체스판이라면 짝수행이 “BWBWBWBW”인지 검증하고, 홀수행이 “WBWBWBWB”인지 검증한다. <br />
반대로 화이트체스판이라면 짝수행이 “WBWBWBWB”인지 검증하고, 홀수행이 “BWBWBWBW”인지 검증한다. <br />
위 <strong>2가지 비교검증을 통해서 다른 문자열이 있다면 칠해야할 횟수를 1 증가</strong>시킨다.</p>
  </li>
  <li>
    <p>마지막으로 각 8X8 정사각형에서 체스판 여부와 칠해야할 횟수를 구했으니, <strong>반대되는 체스판 칠해야할 횟수와 비교하여 더 적게 칠해야할 횟수를 반환</strong>하면 된다.</p>
  </li>
</ol>

<p>예를 들어 현재 탐색된 정사각형이 블랙체스판이고 12번의 칠해야할 횟수를 구했다면, 화이트체스판일 때는 52(64-12)번만큼 칠해야 하기 때문에 블랙체스판 일때의 <strong>칠해야할 횟수 12번을 반환</strong>하면 되는 것이다.</p>

<p><br /><br /></p>

<p>자 다시, main 메서드로 돌아와 코드를 살펴보면</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">getMinCnt</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">cnt</span><span class="o">,</span> <span class="n">getMinCnt</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>cnt 변수에 getMinCnt() 함수를 통해 8X8 정사각형마다의 최소 칠할 횟수를 받아온다. <br />
여기서도 마찬가지로 cnt가 가장 최소로 칠할 횟수로 최신화 되어야 하기에 <strong>최소가 되는 횟수를 cnt에 저장해나가면 된다.</strong></p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">strs</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">strs</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">getMinCnt</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">cnt</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">cnt</span><span class="o">,</span> <span class="n">getMinCnt</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMinCnt</span><span class="o">(</span><span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start_x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start_y</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">chess</span> <span class="o">=</span> <span class="o">{</span><span class="s">"BWBWBWBW"</span><span class="o">,</span><span class="s">"WBWBWBWB"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">end_x</span> <span class="o">=</span> <span class="n">start_x</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">end_y</span> <span class="o">=</span> <span class="n">start_y</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="kt">boolean</span> <span class="no">BW</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">start_x</span><span class="o">][</span><span class="n">start_y</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"W"</span><span class="o">))</span> <span class="no">BW</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">else</span> <span class="no">BW</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start_x</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">end_x</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">row</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
            
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">start_y</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">end_y</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">row</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
            <span class="o">}</span>

            <span class="cm">/* 8X8 사각형의 (0,0) 값이 B, 블랙 체스판 일 경우
             * 0,2,4,6 행이 BWBWBWBW 이어야 함.
             * 1,3,5,7 행이 WBWBWBWB 이어야 함.
             *
            */</span>
            <span class="k">if</span><span class="o">(</span><span class="no">BW</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">]))</span> <span class="o">{</span>
                        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
                        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="cm">/* 8X8 사각형의 (0,0) 값이 W, 화이트 체스판 일 경우
             * 0,2,4,6 행이 WBWBWBWB 이어야 함.
             * 1,3,5,7 행이 BWBWBWBW 이어야 함.
             *
            */</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(!</span><span class="no">BW</span><span class="o">)</span> <span class="o">{</span> 
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
                        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(!</span><span class="n">row</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">]))</span> <span class="o">{</span>
                        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">!=</span> <span class="n">chess</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">k</span><span class="o">))</span> <span class="n">cnt</span><span class="o">++;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">cnt</span><span class="o">,</span> <span class="mi">64</span><span class="o">-</span><span class="n">cnt</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>문제를 풀기 위한 아이디어는 생각해냈지만, 2차원 배열을 통해서 생각한대로 구현하는게 만만치 않았다. 2차원 배열을 활용해 특정 인덱스별로 바뀌며 탐색해야 하는 방식을 더 공부하고 2차원 배열 관련 문제를 더 풀어야겠다.</li>
  <li>다른 분들의 풀이를 살펴보니, boolean 2차원 배열을 활용하여 푼 방식이 있었는데, 짝수행, 홀수행을 구분짓지 않고도 풀 수 있음에 감탄하였다. <a href="https://st-lab.tistory.com/101">st님의 풀이</a>를 나중에 꼭 참고하여 다시 풀어보자.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1018번 - 체스판 다시 칠하기]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 7568번 - 덩치</title><link href="http://localhost:4000/java/107-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 7568번 - 덩치" /><published>2022-10-18T00:00:00+09:00</published><updated>2022-10-18T00:00:00+09:00</updated><id>http://localhost:4000/java/107-post</id><content type="html" xml:base="http://localhost:4000/java/107-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/7568.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 N명의 키와 몸무게를 통해 덩치 순위를 구해야한다. <br />
처음엔 HashMap으로 풀다가, 문제 요구사항을 보니 <br />
<strong>같은 키와 같은 몸무게를 가진 사람도 입력으로 받을 수 있어 같은 키를 가질 수 없는 HashMap이 아닌 2차원 배열을 활용</strong>하여 풀었다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>2차원 배열에서 N명의 키와 몸무게를 통해 덩치를 구하는 아이디어를 생각해보았다.</p>

<ul>
  <li>N명의 키와 몸무게를 입력받아 2차원 배열에 저장하고, 2차원 배열에서 모든 사람의 키와 몸무게를 비교한다.</li>
  <li>자기 자신보다 덩치가 큰 사람이 있다면 순위가 1씩 밀린다.</li>
</ul>

<p><br /></p>

<p>이제 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">rank</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="mi">2</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N을 입력받고, N명의 순위를 저장할 rank 배열과 N명의 키와 몸무게를 저장할 2차원 배열 arr를 선언하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 N번만큼 받복하며 각 N명들의 키와 몸무게를 입력받아 arr에 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">winCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="n">rank</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">((</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">1</span><span class="o">]))</span> <span class="n">winCnt</span><span class="o">++;</span>
        <span class="o">}</span>   
    <span class="o">}</span>
    <span class="n">rank</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">winCnt</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>2차원 배열에 N명의 키와 몸무게를 모두 담았으니, 이제 덩치에 따른 순위를 구하면 된다. <br />
순위를 1로 초기화 한 후 이중 for문을 돌며 모든 사람들과 덩치를 비교하여 <strong>더 큰 덩치를 가진 사람이 있다면 자기 자신의 순위를 1씩 증가</strong>시킨다. <br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">user</span> <span class="o">:</span> <span class="n">rank</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">user</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 N명의 순위를 공백 기준으로 한 줄에 출력해야 하기에 StringBuilder에 담아 출력하도록 하였다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">rank</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="mi">2</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">winCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">rank</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">((</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]&lt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">1</span><span class="o">]))</span> <span class="n">winCnt</span><span class="o">++;</span>
                <span class="o">}</span>   
            <span class="o">}</span>
            <span class="n">rank</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">winCnt</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">user</span> <span class="o">:</span> <span class="n">rank</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">user</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>처음엔 HashMap을 활용하여 접근했으나, HashMap의 중복 허용이 안되는 점을 다시 한번 깨닫고, 2차원 배열을 활용하여 문제를 풀었다.</li>
  <li>문제를 단순하게 풀기에 2차원 배열을 활용하는게 더 도움이 되었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[7568번 - 덩치]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 2231번 - 분해합</title><link href="http://localhost:4000/java/106-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 2231번 - 분해합" /><published>2022-10-17T00:00:00+09:00</published><updated>2022-10-17T00:00:00+09:00</updated><id>http://localhost:4000/java/106-post</id><content type="html" xml:base="http://localhost:4000/java/106-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2231.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 완전탐색 알고리즘을 활용하여 <strong>N의 생성자가 되는 모든 경우를 탐색</strong>해야 한다. <br />
N까지의 수들 중에서 <strong>[자기 자신 + 자기 자신의 각 자리수의 합]</strong> 이 N이 되는 수를 찾으면 된다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>N의 범위는 1부터 1,000,000 이기에 1부터 N까지 순회하며 분해합을 통해 N을 만들 수 있는 수를 찾는다.</li>
  <li>N의 생성자를 찾았다면 N의 생성자를 변수에 저장한 후 반복문을 탈출한다.</li>
</ul>

<p><br /></p>

<p>위 아이디어를 토대로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="n">constructor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N을 입력받고, 반복문 내에서 찾은 생성자 값을 담을 constructor를 0으로 초기화 해주자.<br />
<strong>constructor를 0으로 초기화하는 이유는 혹시나 N의 생성자가 없다면 0을 반환해야 하기 때문이다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">calSum</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">sum</span> <span class="o">==</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">constructor</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">constructor</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>다음으로 1부터 N까지 반복문을 돌면서 N의 생성자가 되는 수를 찾는다. <br />
<strong>‘자기 자신(i) + 자기 자신(i)의 각 자리수의 합’</strong>이 N이라면 i는 N의 가장 작은 생성자이기에 앞서 초기화했던 constructor에 i를 담아주고 반복문을 종료하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">calSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
    <span class="k">while</span><span class="o">(</span><span class="n">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span><span class="o">%</span><span class="mi">10</span><span class="o">;</span>
        <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위에서 사용했던 calSum 함수의 내용을 간단히 보자면, while문에서 매개변수로 받은 수를 10으로 나눠가며 각 자리수를 구하고 각 자리수의 합을 sum에 담아 반환한다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="kt">int</span> <span class="n">constructor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">calSum</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">sum</span> <span class="o">==</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">constructor</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">constructor</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">calSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span><span class="o">%</span><span class="mi">10</span><span class="o">;</span>
            <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>주어진 N의 범위에 비해 간단한 아이디어로 쉽게 접근하여 풀 수 있었던 문제였다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2231번 - 분해합]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 2798번 - 블랙잭</title><link href="http://localhost:4000/java/105-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 2798번 - 블랙잭" /><published>2022-10-16T00:00:00+09:00</published><updated>2022-10-16T00:00:00+09:00</updated><id>http://localhost:4000/java/105-post</id><content type="html" xml:base="http://localhost:4000/java/105-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2798.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 브루트포스, 즉 완전탐색 알고리즘을 활용하여 푸는 대표적인 문제라고 한다. <br />
완전탐색 알고리즘은 <strong>가능한 모든 경우의 수를 다 체크해서 정답을 찾는 방법</strong>이다. <br /></p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>N개의 카드중에서 3장을 택하여 M과 같거나 가장 가까운 수를 만들어야 한다. <br />
M과 같거나 근접한 수를 만들기 위해 생각한 아이디어는 다음과 같다.</p>
<ul>
  <li>N개의 카드들 중에서 순서대로 3장을 뽑는다. <strong>이때, 1장을 뽑았으면, 뽑은 1장은 제외하고 N-1개중에서 새로운 1장을 뽑는다.</strong></li>
  <li>뽑은 3장의 합이 M과 같을 때까지 max에 저장해나간다.</li>
  <li>뽑은 3장의 합이 M과 같다면 3장의 합을 출력하고 더 이상 카드를 뽑지 않아도 되니 반복문을 탈출한다.</li>
</ul>

<p><br /></p>

<p>이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">());</span>

<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">cards</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Scanner를 통해 카드개수 N과 블랙잭 수 M, N개의 카드뭉치들을 입력받는다. <br />
그리고 3장의 카드를 뽑아가며 합을 저장해둘 max 변수를 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1">// 3중 반복문을 통해 3장의 카드을 순서대로 뽑는다.</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cards</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">cards</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">cards</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cards</span><span class="o">[</span><span class="n">i</span><span class="o">])+</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cards</span><span class="o">[</span><span class="n">j</span><span class="o">])+</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cards</span><span class="o">[</span><span class="n">k</span><span class="o">]);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="no">M</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">sum</span> <span class="o">==</span> <span class="no">M</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">max</span> <span class="o">=</span> <span class="n">sum</span><span class="o">;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>3중 for문을 통해 뽑은 카드를 제외한 다음 카드를 뽑아가는 방식으로 <strong>중복되지 않는 3장의 카드들을 뽑아 sum(합)을 구한다.</strong> <br />
그리고 sum이 M과 같아질 때까지 max에 sum을 저장해나간다. 만약 <strong>3장을 모두 뽑았는데도 합이 M보다 작다면 M과 가장 근접한 수를 출력</strong>해야 하기 때문이다.</p>

<p>또한 sum이 M과 같다면 max에 sum을 저장하고, max를 출력하고 return하여 삼중 for문을 종료시킨다.</p>

<blockquote>
  <ul>
    <li><strong>이 때, break문을 사용하지 않는 이유는 별도의 예외 처리 없이 바로 3개의 반복문을 종료하기 위해서이다.</strong> <br /></li>
    <li>sout를 통해 출력을 한 이유는 <strong>반복문에서 return을 활용해 함수를 종료하기에 BufferedWritter가 아닌 sout를 활용</strong>하였다.
      <ul>
        <li>BufferedWritter에 담아두었다가 출력하는 방식인데 그 전에 return을 하기 때문에 출력이 되지 않는다.</li>
      </ul>
    </li>
  </ul>
</blockquote>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">cards</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cards</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">cards</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">cards</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cards</span><span class="o">[</span><span class="n">i</span><span class="o">])+</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cards</span><span class="o">[</span><span class="n">j</span><span class="o">])+</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cards</span><span class="o">[</span><span class="n">k</span><span class="o">]);</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="no">M</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">sum</span> <span class="o">==</span> <span class="no">M</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">max</span> <span class="o">=</span> <span class="n">sum</span><span class="o">;</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
                        <span class="k">return</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>카드 3장을 뽑아가면서 연산을 진행하였는데, 3중 for문에서의 탈출을 return이 아닌 다른 예외처리 방식으로도 접근해봐야겠다.</li>
  <li>BufferedWritter의 경우 버퍼에 출력물을 모두 담아두었다가 출력하는데, 반복문 내에서의 return문 때문에 사용하지 못하였다. BufferdWritter의 출력시점과 return문 시점에 대해서 적절한 상황에 사용할 수 있도록 꼭 찾아보고 공부해야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2798번 - 블랙잭]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 숫자 짝꿍</title><link href="http://localhost:4000/java/104-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 숫자 짝꿍" /><published>2022-10-15T00:00:00+09:00</published><updated>2022-10-15T00:00:00+09:00</updated><id>http://localhost:4000/java/104-post</id><content type="html" xml:base="http://localhost:4000/java/104-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20221015_01.png" width="1000" /></center>
<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>주어진 X와 Y 문자열에서 공통되는 문자들을 찾아 가장 큰 수로 만들어야 한다. <br /></p>

<h4 id="초기-아이디어-도출">초기 아이디어 도출</h4>
<ul>
  <li>X와 Y를 각각 순회하며 동일한 값들을 별도로 저장한다. 이 때, 연속으로 같은 수가 올 수 있음을 염두해야 한다.</li>
  <li>별도로 저장한 문자들을 가장 큰 수, 즉 내림차순으로 만들어 반환한다.</li>
</ul>

<p><br /></p>

<p>먼저 X와 Y에서 동일한 문자를 찾는 코드를 작성하였다. <br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">X</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">Y</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">X</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="no">Y</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="no">X</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)));</span>
            <span class="no">Y</span> <span class="o">=</span> <span class="no">Y</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span> <span class="o">+</span> <span class="s">""</span> <span class="o">+</span> <span class="no">Y</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="no">Y</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이중 for문을 순회하며 X와 Y의 각 문자 중 같은 문자를 list에 저장하는 코드를 작성하였는데, 이후 코드를 제출하니 시간초과가 발생하였다.</p>

<p><br /><br /></p>

<h4 id="시간초과-발생">시간초과 발생</h4>
<p>그런데 이중 for문으로 X와 Y를 기준으로 각 숫자들마다 같은 수(짝꿍)을 찾으니 <strong>시간초과가 발생</strong>한다. <br />
다시 문제를 잘 읽어보니 <strong>X와 Y의 길이가 최대 3,000,000</strong> 까지 올 수 있음을 고려하지 않았기 때문임을 알 수 있었다.</p>

<p><br /></p>

<h4 id="최종-아이디어-도출">최종 아이디어 도출</h4>
<p>어떻게 시간초과를 해결할 수 있을까? <br />
X와 Y 기준으로 숫자를 탐색하지 않고, X와 Y 각각 <strong>0~9까지의 카운트를 가지는 배열을 활용</strong>하면 이중 for문 없이 for문 하나로 해결할 수 있을 것이라 생각하였다.</p>

<ul>
  <li>0~9까지 순회하며 X와 Y의 숫자가 몇번 나왔는지를 카운트하여 별도의 배열에 저장한다.</li>
  <li>카운팅된 X와 Y 배열에서 카운팅된 숫자 중 공통된 숫자가 있는지 확인한다.</li>
  <li>가장 큰 수로 만들어야 하기에 9~0 순서로 순회하며 새로운 문자열에 내림차순 순서로 저장한다.</li>
</ul>

<p><br /></p>

<p>이제 최종 아이디어를 토대로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

<span class="c1">// X와 Y가 0~9까지 몇개의 수를 가지고 있는지 배열에 카운트.</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">X_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">Y_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>최종적으로 반환할 문자열은 StringBuilder에 담아서 반환할 것이기에 StringBuilder를 하나 선언하자. <br />
그리고 0~9까지 X와 Y에서 각각 카운트할 두 배열을 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">// X와 Y에서 0~9 중 출몰한 숫자를 X_arr에 카운트</span>
<span class="n">countArr</span><span class="o">(</span><span class="no">X</span><span class="o">,</span> <span class="n">X_arr</span><span class="o">);</span> 
<span class="n">countArr</span><span class="o">(</span><span class="no">Y</span><span class="o">,</span> <span class="n">Y_arr</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 X와 Y의 숫자들을 카운트하여 각각 X_arr와 Y_arr에 카운트한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">countArr</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]++;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>countArr 함수 내용이다. <br />
X와 Y를 순회하며 나온 숫자의 X_arr의 인덱스를 증가시킨다.</p>
<blockquote>
  <p>예들 들어 X=5525, Y=1255라면 X_arr=[0,0,1,0,3,0,0,0,0,0], Y_arr=[0,1,1,0,0,2,0,0,0,0]가 된다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// 9~0까지 돌면서 X와 Y의 공통된 수를 StringBuilder에 저장</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="n">X_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">Y_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">X_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]--;</span>
        <span class="n">Y_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]--;</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>X와 Y에서 어떤 수가 나왔는지를 알았으니, 두 문자열에서 공통된 문자를 찾는다. <br />
<strong>이 때, 공통 된 수를 통해 가장 큰 수를 만들어야 하기에 0~9 순서가 아닌 9~0 순서로 내림차순으로 반복한다.</strong> <br /></p>

<p>X_arr, Y_arr의 카운트가 1 이상인 문자는 공통된 수이기 때문에 해당 문자를 StringBuilder에 담으면 된다. <br />
하지만 X와 Y에서 <strong>동일한 숫자가 연속으로 존재할 수 있기 때문에 카운트가 1 이상이어도 카운트횟수가 다를 수 있다.</strong></p>

<p>그렇기에 별도로 while문을 순회하며 카운트가 1이 될 때까지 해당 문자에 대한 카운트를 X_arr, Y_arr에서 감소시키면서 StringBuilder에 저장하면 연속으로 존재하는 문자를 담을 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">if</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">"-1"</span><span class="o">;</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"0"</span><span class="o">))</span> <span class="k">return</span> <span class="s">"0"</span><span class="o">;</span>
<span class="k">else</span> <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>X와 Y의 공통된 문자를 찾아 내림차순으로 StringBuilder에 담는 것까지 성공하였다. <br />
마지막으로 이 StringBuilder를 String으로 형변환하여 반환하면 된다. <br /></p>

<p>그런데, 문제 요구사항을 살펴보면 숫자 짝꿍이 존재하지 않을 떄에는 “-1”을 반환해야 한다고 하며, 반환할 문자열은 0으로 시작하지 않는다고 한다. <br /></p>
<ul>
  <li>StringBuilder에는 공통된 문자를 담기 때문에 숫자 짝궁이 존재하지 않을 때는 sb에는 값이 없기 때문에 <strong>sb를 String으로 형변환후 길이가 0이라면 “-1”을 반환</strong>하면 된다.</li>
  <li>반환할 문자열이 0으로 시작한다는 것은 <strong>X와 Y에서 공통된 문자를 조합해 가장 큰수를 만들어도 0으로 시작</strong>한다는 것이다. “00”이 올수도 “000…” 등 무수히 많은 0의 개수를 가진 문자열이 올 수 있기 때문에  결국 “0”만 반환하면 된다.</li>
</ul>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

        <span class="nc">String</span> <span class="no">X</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="nc">String</span> <span class="no">Y</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="no">X</span><span class="o">,</span> <span class="no">Y</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="no">X</span><span class="o">,</span> <span class="nc">String</span> <span class="no">Y</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="c1">// X와 Y가 0~9까지 몇개의 수를 가지고 있는지 배열에 카운트.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">X_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">Y_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
        
        <span class="n">countArr</span><span class="o">(</span><span class="no">X</span><span class="o">,</span> <span class="n">X_arr</span><span class="o">);</span>
        <span class="n">countArr</span><span class="o">(</span><span class="no">Y</span><span class="o">,</span> <span class="n">Y_arr</span><span class="o">);</span>

        <span class="c1">// 9~0까지 돌면서 X와 Y의 공통된 수를 StringBuilder에 저장</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="n">X_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">Y_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">X_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]--;</span>
                <span class="n">Y_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]--;</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">if</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">"-1"</span><span class="o">;</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"0"</span><span class="o">))</span> <span class="k">return</span> <span class="s">"0"</span><span class="o">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">countArr</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>시간초과를 해결하기 위한 아이디어를 새로 생각해내는게 어려웠다. 주어진 N의 범위가 클 경우를 항상 염두해두고 초기 아이디어를 잘 구상해야 시간이 덜 잡아먹을 것이다.</li>
  <li>배열을 활용해 각 문자열들의 숫자들을 카운팅하는 방식에 대해서는 잘 숙지해두어야 겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 숫자 짝꿍]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 삼총사</title><link href="http://localhost:4000/java/103-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 삼총사" /><published>2022-10-14T00:00:00+09:00</published><updated>2022-10-14T00:00:00+09:00</updated><id>http://localhost:4000/java/103-post</id><content type="html" xml:base="http://localhost:4000/java/103-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20221014_01.png" width="1000" /></center>
<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>int형 배열 numbers에서 3개의 원소를 뽑아 합이 0일 경우에만 카운트를 하면 되는 문제이다.<br />
간단한 <strong>조합공식을 활용</strong>해서 3개의 수를 뽑을 수 있다.</p>

<p>조합을 활용해 접근할 수 있는 아이디어를 생각해보자.</p>
<ul>
  <li>문제에서 3개의 수를 뽑는다고 정해놨기 때문에 단순하게 반복문을 3번 돌면 된다.</li>
  <li>뽑은 수를 또 뽑으면 안되니(중복되면 안됨) 앞에서부터 차례대로 뽑으면 된다.</li>
</ul>

<p><br /></p>

<p>그럼 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">number</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">number</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">number</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>3중 반복문을 통해 첫번째, 두번째, 세번째 수를 자기자신이 아닌 다음 수를 고르면 된다.</strong> <br />&gt;
그렇게 뽑은 3개의 수의 합이 0이 될 때 카운트를 1씩 증가시키면 된다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">number</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">5</span><span class="o">};</span>
        <span class="c1">// int[] number = {-3, -2, -1, 0, 1, 2, 3};</span>
        <span class="c1">// int[] number = {-1, 1, -1, 1};</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">number</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">number</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">number</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>프로그래머스 코딩테스트 연습에 새로운 문제가 추가되어 못참고 바로 풀기 시작했다.</li>
  <li>백트래킹이나 재귀를 통한 조합 공식으로도 풀어봐야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 삼총사]]></summary></entry><entry><title type="html">[Java] 백준(실버-1) 11729번 - 하노이의 탑 이동 순서</title><link href="http://localhost:4000/java/101-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-1) 11729번 - 하노이의 탑 이동 순서" /><published>2022-10-13T00:00:00+09:00</published><updated>2022-10-13T00:00:00+09:00</updated><id>http://localhost:4000/java/101-post</id><content type="html" xml:base="http://localhost:4000/java/101-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11729.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>하노이의 탑에서 원판을 이동시키는 원리는 워낙 유명했지만 잘 기억이 안나서 다시 찾아보았다. <br /></p>

<blockquote>
  <p>하노이의 탑 원판 이동 조건 <br /></p>
  <ul>
    <li>하노이의 탑은 위 그림과 같이 크기 가 다른 원반이 한 기둥에 놓여져 있고 원반을 모두 왼쪽에서 오른쪽으로 옮겨야 한다.</li>
    <li>원반은 큰 것이 아래로 가게 쌓아야 하며 작은 원반 위에 큰 원반이 올 수 없다.</li>
    <li>원반을 옮길 때에는 가장 위에 쌓여있는 원반 부터 옮겨야 한다.</li>
  </ul>
</blockquote>

<p>문제 카테고리에서 주어진 대로 <strong>재귀 알고리즘을 이용해 3개의 탑에서 N개의 원판이 주어지면 첫번째 탑에서 마지막 탑까지 N개의 원판을 이동</strong>시켜야 한다. <br />
하노이탑 이동조건에서의 핵심은 <strong>“작은 원판 위에 큰 원판은 올 수 없다.”</strong>라는 조건이다. <br /></p>

<p><br /></p>

<h4 id="하노이탑-이동-원리">하노이탑 이동 원리</h4>
<p>간단히 이동 원리를 살펴보자면, <br /></p>
<ol>
  <li><strong>첫번째 탑의 가장 큰 원판을 마지막 탑으로 옮기기 위해서는 N-1개의 원판이 첫번째 탑에서 중간 탑으로로 가야한다.</strong></li>
  <li><strong>그러면 첫번째 탑에 있는 가장 큰 원판이 마지막 탑으로 이동할 수 있다.</strong></li>
  <li><strong>가장 큰 원판이 마지막 탑으로 옮겨지면, 중간 탑에 있는 N-1개의 원판을 마지막 탑로 이동시키면 된다.</strong></li>
</ol>

<p><br /></p>

<h4 id="재귀함수-활용하기">재귀함수 활용하기</h4>
<p>재귀를 어떻게 활용해야할지 처음엔 감이 안잡혔지만, 곰곰히 생각해보니 단순하게 풀 수 있었다. <br />
첫번째 탑에서 두번째 탑으로 이동해야할 N-1개의 원판들을 재귀함수를 호출하여 이동시키고, 남은 1개의 원판을 이동시킨 후 다시 재귀함수를 호출하면 된다.</p>

<p>말로 설명하자면 너무 어려운데, 간단히 의사코드를 작성하여 살펴보자. <br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>하노이 함수(첫번째탑, 중간탑, 마지막탑, N) {
    if(옮겨야할 원판이 1개라면) { // 2
        이동 횟수 1증가
        첫번째탑 마지막탑 출력
    }
    else {
        하노이 함수(첫번째탑, 마지막탑, 중간탑, N-1) // 1
        이동 횟수 1증가
        첫번째탑 마지막탑 출력
        하노이 함수(중간탑, 첫번째탑, 마지막탑, N-1) // 3
    }
}
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위왁 같이 계속 <strong>(1)첫번째 탑에서 중간 탑으로 이동하는 함수를 재귀호출하여 N-1개 원판을 이동</strong>하면 <strong>(2)이동해야 할 원판이 1개</strong>가 남고, <br />
그 때 첫번째탑에서 마지막탑으로 이동했다는 것을 출력하고, <strong>(3)마지막으로 중간탑에 있는 N-1개의 원판을 마지막탑으로 이동하는 함수를 재귀호출</strong>하면 된다.</p>

<p><br />
자 이제 위에서 작성한 의사코드를 통해 문제 솔루션 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">static</span> <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="kd">static</span> <span class="kt">int</span> <span class="n">moveCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 탑 이동 과정을 함수 수행후 출력해야 하기에 StringBuilder을 static으로 선언하여 사용할 것이다. 그리고 원판 이동 횟수를 담을 moveCnt 또한 static으로 선언하여 변수를 만들자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>        
<span class="n">hanoi</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="no">N</span><span class="o">);</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">moveCnt</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>원판 갯수 N을 입력받고 탑은 3개로 고정이니, hanoi 함수에 첫번째 탑 1, 중간 탑 2, 마지막 탑 3, N을 인자로 실행한다. <br />
그리고 함수 수행 후 하노이탑 원판 이동횟수와 함수 내에서 StringBuilder에 담은 수행 과정을 출력하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">hanoi</span><span class="o">(</span><span class="kt">int</span> <span class="n">first</span><span class="o">,</span> <span class="kt">int</span> <span class="n">center</span><span class="o">,</span> <span class="kt">int</span> <span class="n">last</span><span class="o">,</span> <span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">moveCnt</span><span class="o">++;</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">first</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">last</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="n">hanoi</span><span class="o">(</span><span class="n">first</span><span class="o">,</span> <span class="n">last</span><span class="o">,</span> <span class="n">center</span><span class="o">,</span> <span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">moveCnt</span><span class="o">++;</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">first</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">last</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="n">hanoi</span><span class="o">(</span><span class="n">center</span><span class="o">,</span> <span class="n">first</span><span class="o">,</span> <span class="n">last</span><span class="o">,</span> <span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 hanoi 함수를 살펴보자. 의사코드에서 작성한 것과 동일하다. <br />
예를 들어 hanoi(1,2,3,N=3)을 실행한다면, 2개의 원판을 중간 탑에 이동시킬 때까지 재귀호출을 하고, (이때 2개 원판을 이동시킬 때마다 이동횟수를 1씩 증가시키고 수행과정을 출력한다.) <br />
2개의 원판을 모두 중간탑으로 이동시키고 원판이 1개 남는다면 마지막 탑으로 이동시키고 중간 탑에 있는 2개의 원판을 마지막 탑으로 옮기는 함수를 호출하면 된다.</p>

<blockquote>
  <p>여기서 중요한 점은 <strong>원판이 1개가 남을 때까지 재귀호출을 통해 이동시킨다는 점</strong>이다. 이 원리는 문제를 풀 때 정말 큰 도움이 되었다.</p>
</blockquote>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    
    <span class="kd">static</span> <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">moveCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>        

        <span class="n">hanoi</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="no">N</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">moveCnt</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">hanoi</span><span class="o">(</span><span class="kt">int</span> <span class="n">first</span><span class="o">,</span> <span class="kt">int</span> <span class="n">center</span><span class="o">,</span> <span class="kt">int</span> <span class="n">last</span><span class="o">,</span> <span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">moveCnt</span><span class="o">++;</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">first</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">last</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">hanoi</span><span class="o">(</span><span class="n">first</span><span class="o">,</span> <span class="n">last</span><span class="o">,</span> <span class="n">center</span><span class="o">,</span> <span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
            <span class="n">moveCnt</span><span class="o">++;</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">first</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">last</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
            <span class="n">hanoi</span><span class="o">(</span><span class="n">center</span><span class="o">,</span> <span class="n">first</span><span class="o">,</span> <span class="n">last</span><span class="o">,</span> <span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>하노이의 탑의 원판이 이동하는 원리를 제대로 알고 있지 않아 원리 자체를 다시 공부하였다.</li>
  <li><strong>재귀 알고리즘을 통해 가장 작은 함수까지 재귀로 파고 들어가는 원리</strong>를 이해하면 쉽게 풀 수 있는 문제라고 생각이 들었다.</li>
  <li>쌓인 순서대로 이동시켜야 한다는 점에서 stack을 활용해서도 풀 수 있는 문제라고 생각하여 추후 스택으로도 풀어봐야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[11729번 - 하노이의 탑 이동 순서]]></summary></entry><entry><title type="html">[Java] 백준(실버-1) 2447번 - 별 찍기 - 10</title><link href="http://localhost:4000/java/102-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-1) 2447번 - 별 찍기 - 10" /><published>2022-10-13T00:00:00+09:00</published><updated>2022-10-13T00:00:00+09:00</updated><id>http://localhost:4000/java/102-post</id><content type="html" xml:base="http://localhost:4000/java/102-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2447.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>*로 이루어진 사각형의 패턴이 무엇인지 파악해보자. <br />
N이 3이라면 가운데 한칸이 공백인 사각형을 나타냄을 알 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>N=3
***
* *
***
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p>그러면 N이 3보다 큰 거듭제곱일 경우는 어떨까? <br />
N이 9일 경우와 27일 경우에 별이 출력되는 패턴을 살펴보자. (보기 편하도록 * 사이에 공백을 추가한 사진을 첨부하였다.)<br /></p>

<p><strong>[N=9일 때]</strong> <br />
<img src="/assets/images/baekjoon/2447-attach1.png" width="300" border-radius="1" /></p>

<p><strong>[N=27일 때]</strong> <br />
<img src="/assets/images/baekjoon/2447-attach2.png" width="500" border-radius="1" /></p>

<p>잘 보면 N이 9일 때와 27일 때 모두 N이 3일 때의 블록을 <strong>3X3의 크기로 출력</strong>됨을 알 수 있다. <br />
즉 <strong>N/3 만큼 반복</strong>하여 각 블록을 채우고 있음을 알 수 있다.</p>

<ul>
  <li>N = 27일 경우는 9X9 크기의 별 사각형을 3X3 크기의 블록으로 출력한다. -&gt; 9번 출력</li>
  <li>N = 9일 경우는 3X3 크기의 별 사각형을 3X3 크기의 블록으로 출력한다. -&gt; 3번 출력</li>
  <li>N = 3일 경우는 3X3 크기의 별 사각형을 한 번 출력한다. -&gt; 1번 출력</li>
</ul>

<p>이를 통해 <strong>재귀함수 호출횟수는 N/3</strong>번이라는 것을 유추할 수 있다. <br /></p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>재귀함수를 이용한 아이디어를 생각해보았다.</p>

<ol>
  <li>모든 원소에 공백값이 저장된 2차원 배열을 활용한다. <br />
 1.1 <strong>3X3 크기로 블록을 나누어 별을 출력한다고 생각하면 결국 가운데 칸인 (1,1) 좌표만 공백이 되면 된다.</strong> <br />
 1.2 결국 (1,1) 좌표가 아닌 경우는 *을 저장하면 된다. <br />
 1.3 모든 원소에 공백값을 저장하고 재귀함수를 통해 <strong>공백값이 아닌 위치에만 *을 저장</strong>한다. <br />
 1.4 <strong>재귀함수의 종료 조건</strong>은 (N/3)만큼 재귀함수가 호출되면서 결국 <strong>N이 1이 되는 순간에 2차원 배열에 *을 저장</strong>한다.</li>
  <li>N/3만큼 1번 과정을 수행하는 재귀함수를 호출한다.</li>
  <li>*과 공백이 저장된 2치원 배열을 출력한다.</li>
</ol>

<p><br /></p>

<h4 id="재귀함수-함수-작성">재귀함수 함수 작성</h4>
<p>위 아이디어를 통해 생각해낸 재귀함수의 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">star</span><span class="o">(</span><span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="no">X</span><span class="o">,</span> <span class="kt">int</span> <span class="no">Y</span><span class="o">,</span> <span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="no">X</span><span class="o">][</span><span class="no">Y</span><span class="o">]</span> <span class="o">=</span> <span class="s">"*"</span><span class="o">;</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(!(</span><span class="n">i</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">==</span><span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">star</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="no">X</span><span class="o">+</span><span class="n">i</span><span class="o">*(</span><span class="no">N</span><span class="o">/</span><span class="mi">3</span><span class="o">),</span> <span class="no">Y</span><span class="o">+</span><span class="n">j</span><span class="o">*(</span><span class="no">N</span><span class="o">/</span><span class="mi">3</span><span class="o">),</span> <span class="o">(</span><span class="no">N</span><span class="o">/</span><span class="mi">3</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>재귀함수 star는 매개변수로 2차원 배열과 x,y 좌표값, N을 받아 실행한다. <br />
N이 1이 될 때까지 가운데 칸, 즉 <strong>(1,1) 좌표값이 아닐 경우에만 *을 저장해야 하기에 2중 for문 내에 ‘!(i==1 &amp;&amp; j==1)’라는 조건을 부여</strong>했다. <br />
그렇게 N/3만큼 재귀함수를 호출해가며 <strong>N이 1이 되는 순간에 *을 저장</strong>하면 된다.</p>

<p><br /></p>

<p>이제 나머지 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>        
<span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">N</span><span class="o">];</span>   
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N을 입력받고 N*N 크기를 가진 2차원 배열 arr를 선언하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="s">" "</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 아이디어대로 arr의 모든 자리를 공백값으로 채우고 star함수로 공백값이 아닌 자리에 *을 저장하기로 하였으니, 모든 원소를 공백값으로 채우자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">star</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="no">N</span><span class="o">);</span>

<span class="k">for</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arrs</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">arrs</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">s</span><span class="o">+</span><span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>공백값으로 채워진 2차원 배열 arr를 star의 인자로 넘겨 함수를 실행하자. <strong>(X, Y 즉 인덱스 좌표는 0부터 시작해야 하니 0,0으로 넘겨준다.)</strong> <br />
마지막으로 star 함수 실행 후 arr에 저장된 값을 출력하면 된다. <strong>이 때, 각 행마다 개행을 넣어 출력해야 한다.</strong><br /></p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>        
        <span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">N</span><span class="o">];</span>        

        <span class="c1">// 1. 먼저 arr를 공백으로 채운다.</span>
        <span class="c1">// 2. star 함수에서 공백이 아닌 자리에 *을 채운다.</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="s">" "</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">star</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="no">N</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arrs</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">arrs</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">s</span><span class="o">+</span><span class="s">""</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">star</span><span class="o">(</span><span class="nc">String</span><span class="o">[][]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="no">X</span><span class="o">,</span> <span class="kt">int</span> <span class="no">Y</span><span class="o">,</span> <span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="no">X</span><span class="o">][</span><span class="no">Y</span><span class="o">]</span> <span class="o">=</span> <span class="s">"*"</span><span class="o">;</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(!(</span><span class="n">i</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">==</span><span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                        <span class="n">star</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="no">X</span><span class="o">+</span><span class="n">i</span><span class="o">*(</span><span class="no">N</span><span class="o">/</span><span class="mi">3</span><span class="o">),</span> <span class="no">Y</span><span class="o">+</span><span class="n">j</span><span class="o">*(</span><span class="no">N</span><span class="o">/</span><span class="mi">3</span><span class="o">),</span> <span class="o">(</span><span class="no">N</span><span class="o">/</span><span class="mi">3</span><span class="o">));</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>매커니즘 자체는 단순했지만, 2차원 배열을 활용해 재귀함수를 구현하는 것까지 생각해내는게 어려웠던 문제였다.</li>
  <li>재귀함수를 호출해가며 재귀에서 가장 작은 단위의 연산을 실행한 후의 종료 조건을 잘 구성해야 함을 알 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2447번 - 별 찍기 - 10]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 10870번 - 피보나치 수 5</title><link href="http://localhost:4000/java/98-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 10870번 - 피보나치 수 5" /><published>2022-10-11T00:00:00+09:00</published><updated>2022-10-11T00:00:00+09:00</updated><id>http://localhost:4000/java/98-post</id><content type="html" xml:base="http://localhost:4000/java/98-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10870.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p><strong>피보나치 수란 첫번째 항 0과 두번째 항 1부터 시작하여 앞 두수의 합으로 다음 수를 만들어 나가는 수열</strong>이다. <br />
이번 피보나치 수 5 문제도 재귀함수 및 반복문을 활용하여 두가지 방식으로 풀어보았다. <br />
피보나치 수에 대한 내용은 이전에 풀었던 <a href="https://jooney-95.github.io/java/51-post/">피보나치 수 문제</a> 에서 확인할수 있다.</p>

<p><br /></p>

<h4 id="재귀함수-활용하기">재귀함수 활용하기</h4>
<p>피보나치 수는 첫번째 항과 두번째 항이 0과 1로 고정이기에 <strong>N이 0과 1일 때 각각 0과 1을 반환</strong>하면 된다. <br />
그러면 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fibo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="k">return</span> <span class="nf">fibo</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>코드 자체는 단순하다. fibo 함수에서 n이 0이거나 1일 때 각각 0과 1을 반환하고, 그 외일 경우는 앞 두수의 합을 반환한다.</p>

<p><br /><br /></p>

<h4 id="배열-및-반복문-활용하기">배열 및 반복문 활용하기</h4>
<p>재귀함수 대신 배열과 반복문을 활용하여 피보나치 수를 구현해보자. <br />
재귀함수를 이용한 방식과 비슷하게 앞 두수의 합을 배열 크기(N+1)만큼 원소에 더해가면 된다. 결국 배열의 마지막 원소가 구할 N번째 피보나치 수가 된다. <br />
그럼 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[]</span> <span class="n">fibo_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">fibo_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 첫번째 항 0</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 두번째 항 1</span>
    <span class="k">else</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">];</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>피보나치 수는 첫번째 항이 0부터 시작하기 때문에 <strong>배열의 크기도 N+1만큼 지정</strong>해주어야 한다. <br />
첫번째 항과 두번째 항에 0과 1을 저장하고, 세번째 항 부터 앞 두수의 합을 저장해나가면 된다. <br />
fibo_arr[N]번째 원소가 구하려는 N번째 피보나치 수이다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<h4 id="작성코드---재귀함수-활용">작성코드 - 재귀함수 활용</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fibo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">return</span> <span class="nf">fibo</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="작성코드---배열-및-반복문-활용">작성코드 - 배열 및 반복문 활용</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">fibo_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">fibo_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 첫번째 항 0</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 두번째 항 1</span>
            <span class="k">else</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">fibo_arr</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">fibo_arr</span><span class="o">[</span><span class="no">N</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>피보나치 수를 재귀함수를 통해 구하는 것 뿐 만 아니라 배열 및 반복문을 통해서도 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10870번 - 피보나치 수 5]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 24060번 - 병합정렬 1</title><link href="http://localhost:4000/java/100-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 24060번 - 병합정렬 1" /><published>2022-10-11T00:00:00+09:00</published><updated>2022-10-11T00:00:00+09:00</updated><id>http://localhost:4000/java/100-post</id><content type="html" xml:base="http://localhost:4000/java/100-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/24060.png" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제 풀기에 앞서 병합정렬에 대해서 알아보자.</p>

<blockquote>
  <p><strong>병합정렬</strong>이란? <br />
기본적으로 분할 정복 알고리즘을 기반하여 정렬하는 방식으로 문제를 분할하고, 분할한 문제를 정복하여 병합하는 과정이다. <br />
<strong>원소가 저장되어 있는 배열을 계속 쪼개서 길이가 1인 배열을 만들고, 이후 정렬하면서 합치는 알고리즘</strong>이다.</p>
</blockquote>

<h4 id="병합정렬-과정">병합정렬 과정</h4>
<ol>
  <li>주어진 배열을 절반으로 분할한다. 즉 부분배열로 나눈다.</li>
  <li>부분배열의 길이가 1이 될 때까지 1번 과정을 반복한다.</li>
  <li>인접한 부분배열의 원소를 비교하며 정렬하여 합친다.</li>
</ol>

<p>아래 그림을 참고하면 이해하기 쉽다.</p>

<center><img src="https://blog.kakaocdn.net/dn/07jQt/btq1lao22zT/Kkr0QfF1VGxi3bfGYp2r61/img.png" width="1000" /></center>

<p>그리고 장단점도 함께 살펴보자.</p>

<h4 id="병합정렬의-장점-및-단점">병합정렬의 장점 및 단점</h4>
<blockquote>
  <p><strong>[장점]</strong> <br /></p>
  <ol>
    <li>최선과 최악의 경우 모두 O(NlogN)의 시간복잡도를 가진다.</li>
    <li>안정된 정렬 방법이다.</li>
  </ol>
</blockquote>

<blockquote>
  <p><strong>[단점]</strong> <br /></p>
  <ol>
    <li>별도로 배열을 이용하기에 메모리 사용량이 높다.</li>
    <li>데이터가 많을 경우 원본배열로 정렬된 데이터를 덮어씌우는 과정에서 시간이 많이 소요된다.</li>
  </ol>
</blockquote>

<p><br /></p>

<p>이와 같이 병합정렬에 대해서 알아보았으니 실제로 구현을 해보자. <br />
이 문제의 요구사항은 병합정렬 중 <strong>K번째로 병합되어 저장된 수</strong>를 구하는 것이다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>문제 요구사항을 만족하기 위해 생각한 아이디어는 다음과 같다.</p>
<ol>
  <li>주어진 배열을 가지고 병합정렬 작업을 진행한다.</li>
  <li>병합정렬 중 K번째로 저장된 수를 구한다.</li>
  <li>K번째로 저장된 수가 없다면 -1를 반환한다.</li>
</ol>

<p><br /></p>

<p>이제 코드를 작성해보자. <br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">sorted_arr</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 Main 클래스 내에서 사용할 static 변수들을 선언하자. <br />
분해하여 정렬된 데이터들을 저장할 임시 배열 sorted_arr를 선언하고 저장횟수를 기록할 cnt 변수, 입력받을 K를 저장할 K변수, K번째 저장된 수 res 변수를 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="nc">String</span><span class="o">[]</span> <span class="n">str_arr</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">str_arr</span><span class="o">).</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span> <span class="c1">// int형 배열로 변환</span>

<span class="n">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">res</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 main 메서드에서 N과 K, 주어진 수들을 입력받아 int형 arr 배열까지 만든 뒤, sort() 함수를 실행하여 병합정렬을 실행한다. <br />
병합정렬 실행 후 cnt(저장횟수)가 K보다 작다면 -1를 반환하면 된다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// l은 첫번째 인덱스, r은 마지막 인덱스, m은 중간 인덱스</span>
    <span class="n">sorted_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span> <span class="c1">// 정렬 배열 초기화</span>
    <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge_sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span> <span class="c1">// 부분 배열 원소가 1개일 경우 분해할 수 없기 때문에 반환</span>

    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 배열 중간 위치</span>
    
    <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span> <span class="c1">// 첫번째부터 절반까지의 왼쪽 배열 (l ~ m)</span>
    <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 절반 이후부터 마지막까지 오른쪽 배열 (m+1 ~ r) </span>
    
    <span class="n">merge</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 병합 작업 진행</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>sort() 함수에서는 정렬하여 분해한 배열을 저장할 sorted_arr 배열을 초기화한다. <strong>sorted_arr 배열의 경우 앞서 static으로 선언하였기에 전역으로 관리할 수 있다.</strong> <br />
그리고 merge_sort() 함수에 정렬할 배열 arr과 투 포인터로 이용할 값을 넘겨준다.</p>

<p>merge_sort() 함수에서는 매개변수로 받은 투 포인터 값을 통해 <strong>첫번째 원소부터 절반까지의 원소를 통해 왼쪽 배열을 만들고, 절반 이후 원소부터 마지막 원소를 통해 오른쪽 배열을 만든다.</strong> <br />
그렇게 분해하여 만든 부분배열들을 merge() 함수를 통해 병합 작업을 진행한다.</p>

<p>병합 작업을 진행할 merge() 함수 코드는 아래와 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 왼쪽 배열 시작점</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 오른쪽 배열 시작점</span>
    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 정렬된 데이터가 저장될 인덱스</span>

    <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 1. 왼쪽 배열 left번째 원소가 오른쪽 배열 right번째 원소보다 작거나 같다면 </span>
        <span class="c1">// 2. sorted_arr에 left번째 원소를 저장하고 left, idx를 1 증가시킨다.</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">left</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="c1">// 3. 오른쪽 배열 right번째 원소가 왼쪽 배열 left번째 원소보다 작거나 같다면 </span>
        <span class="c1">// 4. sorted_arr에 right번째 원소를 저장하고 right, idx를 1 증가시킨다.</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 5. 왼쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 오른쪽 배열을 차례대로 저장한다.</span>
    <span class="k">if</span><span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 6. 오른쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 왼쪽 배열을 차례대로 저장한다.</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
            <span class="n">idx</span><span class="o">++;</span>
            <span class="n">left</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 7. 병합하여 정렬된 sorted_arr배열을 기존 arr배열에 덮어씌운다.</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">r</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">cnt</span><span class="o">++;</span> <span class="c1">// 저장횟수 </span>
        <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="c1">// K번째 저장된 수 </span>
        <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>[1,2,3,4번 과정]</strong> <br />
병합 작업에서는 왼쪽 배열의 첫번째 원소부터 절반까지 원소를 오른쪽 배열의 원소와 비교해가며 작거나 같다면 sorted_arr 새 배열에 첫번째 자리부터 저장해나간다.
또한 마찬가지로 오른쪽 배열의 첫번째 원소부터 마지막까지의 원소를 왼쪽 배열의 원소와 비교해가며 작거나 같다면 sorted_arr 새 배열에 첫번째 자리부터 저장해나간다.</p>

<blockquote>
  <p>그런데 <strong>왼쪽 배열이나 오른쪽 배열에 원소가 모두 반대쪽 배열의 원소보다 작아 먼저 새 배열에 저장되는 경우</strong>가 있다. <br />
[1,2,4,5,9,11,25,75]와 같은 배열이 부분배열이 만들어졌다면 앞 왼쪽 배열 원소 모두가 먼저 새 배열에 저장되어 오른쪽 배열 원소가 남게 된다.</p>
</blockquote>

<p><strong>[5,6번 과정]</strong> <br />
위와 같은 경우를 대비해 왼쪽 배열이나 오른쪽 배열의 원소가 먼저 sorted_arr에 저장되었다면 결국 <strong>나머지 배열의 원소를 차례대로 저장</strong>하면 된다.</p>

<p><strong>[7번 과정]</strong> <br />
그렇게 정렬된 새 sorted_arr 배열을 기존 배열인 arr 배열에 덮어씌워야 한다. <br />
여기서 전역변수인 cnt에 저장횟수를 증가시키면서 저장시키고, cnt가 K와 같다면 res 변수에 K번째 저장된 수를 담으면 된다.</p>

<p><br /></p>

<p>이후 main 메서드에서 cnt와 K를 비교하여 res 값을 정한 뒤 출력하면 K번째 저장된 수를 출력할 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">res</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<p>추후 복습을 위해 이번 문제 작성코드는 주석을 많이 달아놓았다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">sorted_arr</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="nc">String</span><span class="o">[]</span> <span class="n">str_arr</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">str_arr</span><span class="o">).</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span> <span class="c1">// int형 배열로 변환</span>

        <span class="n">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">res</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// l은 첫번째 인덱스, r은 마지막 인덱스, m은 중간 인덱스</span>
        <span class="n">sorted_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span> <span class="c1">// 정렬 배열 초기화</span>
        <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge_sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span> <span class="c1">// 부분 배열 원소가 1개일 경우 분해할 수 없기 때문에 반환</span>

        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 배열 중간 위치</span>
        
        <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span> <span class="c1">// 첫번째부터 절반까지의 왼쪽 배열 (l ~ m)</span>
        <span class="n">merge_sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 절반 이후부터 마지막까지 오른쪽 배열 (m+1 ~ r) </span>
        
        <span class="n">merge</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 병합 작업 진행</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 왼쪽 배열 시작점</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 오른쪽 배열 시작점</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 정렬된 데이터가 저장될 인덱스</span>

        <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 투 포인터 사용</span>
            <span class="c1">// 1. 왼쪽 배열 left번째 원소가 오른쪽 배열 right번째 원소보다 작거나 같다면 </span>
            <span class="c1">// 2. sorted_arr에 left번째 원소를 저장하고 left, idx를 1 증가시킨다.</span>
            <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="c1">// 1. 오른쪽 배열 right번째 원소가 왼쪽 배열 left번째 원소보다 작거나 같다면 </span>
            <span class="c1">// 2. sorted_arr에 right번째 원소를 저장하고 right, idx를 1 증가시킨다.</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">right</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 왼쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 오른쪽 배열을 차례대로 저장한다.</span>
        <span class="k">if</span><span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="n">right</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">right</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 오른쪽 배열의 원소가 모두 sorted_arr에 채워졌다면 나머지 자리에 왼쪽 배열을 차례대로 저장한다.</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sorted_arr</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="n">idx</span><span class="o">++;</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 병합하여 정렬된 sorted_arr배열을 기존 arr배열에 덮어씌운다.</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">r</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">cnt</span><span class="o">++;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="n">res</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sorted_arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>O(NlogN)의 시간복잡도를 가지는 병합정렬에 대해 공부할 수 있었다. 분할 정복 알고리즘과 함께 자주 다뤄지는 정렬방식이라고 한다. 분할 정복 알고리즘에 대해서도 공부해야겠다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li><a href="https://st-lab.tistory.com/233">병합정렬 이미지 출처</a></li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[24060번 - 병합정렬 1]]></summary></entry></feed>