<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-17T01:08:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 프로그래머스(level-2) - H-index</title><link href="http://localhost:4000/java/72-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - H-index" /><published>2022-09-17T00:00:00+09:00</published><updated>2022-09-17T00:00:00+09:00</updated><id>http://localhost:4000/java/72-post</id><content type="html" xml:base="http://localhost:4000/java/72-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220917_01.png" width="700" /></center>
<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>citations = [3, 0, 6, 1, 5]</strong> <br />
Output-1 <br />
<strong>3</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제 풀이에 앞서 H-index가 뭔지 짚고 넘어가자.</p>

<blockquote>
  <p><strong>h-index</strong>란? <br />
위키피디아에 기재된 내용을 보면 “h-index는 주어진 저자/저널이 각각 최소 h회 인용된 최소 h개의 논문을 출판 한 h의 최대값으로 정의됩니다.” 라고 한다.</p>
</blockquote>

<p>위키피디아 내용을 보면 <strong>내림차순으로 정렬된 배열</strong>이 있어야 h-index를 구할 수 있다. <br />
그리고 각각의 인덱스값과 인덱스에 해당하는 값을 비교해 <strong>인덱스가 인덱스에 해당하는 값보다 크거나 같으면 그 값이 h-index</strong>라고 이해하면 된다.</p>

<p>말로는 잘 이해가 안되니 citations배열 [3, 0, 6, 1, 5]을 예시로 들어보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>citations = [6,5,3,1,0] // 내림차순 정렬

i=1, citations=6 -&gt; index&lt;citations -&gt; h-index 아님
i=2, citations=5 -&gt; index&lt;citations -&gt; h-index 아님
i=3, citations=3 -&gt; index==citations -&gt; i값이 h-index

</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 과정대로 h-index를 구할 수 있다. 이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">Integer</span><span class="o">[]</span> <span class="n">cit</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">citations</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span> 
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">cit</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>

<span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="n">none</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 citations를 내림차순 정렬한 cit 배열을 초기화하고, h-index를 담을 answer와 index 값을 담을 i, h가 0으로만 존재할 때를 검증할 none 변수를 초기화했다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cit</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">((</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)&lt;=</span><span class="n">cit</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">)&gt;</span><span class="n">cit</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">((</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)&gt;</span><span class="n">cit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="n">none</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">if</span><span class="o">(</span><span class="n">none</span><span class="o">==</span><span class="kc">false</span><span class="o">)</span> <span class="n">answer</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>cit에서 마지막-1까지 순회하며 현재 인덱스값이 cit값보다 작거나 같고, 다음 인덱스값이 다음 cit값보다 크면 현재 인덱스값이 h-index임을 표현하였다. <br />
그리고 인덱스 값이 하나라도 크다면 none을 true로 변경한다. none을 통해 인덱스값이 항상 작을 때 마지막 인덱스값이 h-index임을 구할 수 있다.</p>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">citations</span>	<span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="c1">// int[] citations = {10,8,5,4,3};</span>
        <span class="c1">// int[] citations = {25,8,5,3,3};</span>
        <span class="c1">// int[] citations = {4,4,4};</span>
        <span class="c1">// int[] citations = {10,10,10,10,10};</span>
        <span class="c1">// int[] citations = {0,0,0,0,0};</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution2</span><span class="o">(</span><span class="n">citations</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">citations</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">cit</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">citations</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span> 
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">cit</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">boolean</span> <span class="n">none</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cit</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">((</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)&lt;=</span><span class="n">cit</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">)&gt;</span><span class="n">cit</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">((</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)&gt;</span><span class="n">cit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="n">none</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span><span class="o">(</span><span class="n">none</span><span class="o">==</span><span class="kc">false</span><span class="o">)</span> <span class="n">answer</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>문제를 봐도 H-index에 대해 이해가 잘 안되었는데, 링크된 <a href="https://en.wikipedia.org/wiki/H-index">위키피디아</a> 글을 보고 이해하였다.</li>
  <li>현재 작성한 코드가 맘에 안든다.. 다음에 다시 풀며 간결한 코드로 수정할 예정이다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - H-index]]></summary></entry><entry><title type="html">[Java] 프로그래머스(데모) - 나머지 한 점</title><link href="http://localhost:4000/java/70-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(데모) - 나머지 한 점" /><published>2022-09-16T00:00:00+09:00</published><updated>2022-09-16T00:00:00+09:00</updated><id>http://localhost:4000/java/70-post</id><content type="html" xml:base="http://localhost:4000/java/70-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220916_03.png" width="700" /></center>
<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>v = [[1, 4], [3, 4], [3, 10]]</strong> <br />
Output-1 <br />
<strong>[1, 10]</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>v = [[1, 1], [2, 2], [1, 2]]</strong> <br />
Output-2 <br />
<strong>[2, 1]</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 직사각형에서 3개의 좌표를 가지고 나머지 한 좌표를 구해야 한다. <br />
조건문 및 비트연산자를 활용하여 풀어봤다.</p>

<h4 id="1-조건문-활용">1. 조건문 활용</h4>
<p>조건문을 활용한 풀이는 간단한데, 먼저 x좌표와 y좌표를 구분된 조건으로 구해보자. <br />
2차원 배열이고, 세 점은 이미 주어졌기에 <strong>3개의 좌표를 모두 돌면서 중복되지 않은 x좌표와 y좌표</strong>를 찾으면 된다.</p>

<p>코드로 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// x좌표 </span>
<span class="k">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="n">x</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="n">x</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="n">x</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
<span class="c1">// y좌표</span>
<span class="k">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이미 세 점의 위치를 알고 있기에 별도로 반복문을 돌릴 필요없이 x좌표가 존재하는 v[0][0], v[1][0], v[2][0]을 모두 확인하여 중복되지 않은 좌표가 x좌표가 된다. y좌표도 동일하게 v[0][0], v[0][1], v[0][2]을 모두 확인하여 중복되지 않은 y좌표를 찾으면 된다.</p>

<h4 id="2-반복문-내-조건문-활용">2. 반복문 내 조건문 활용</h4>
<p>그런데, x좌표와 y좌표를 1번 풀이처럼 하드코딩으로 작성하는 것이 아니라 반복문에서 인덱스를 통해 접근해서 찾을 수 있지 않을까? 한 번 반복문에서 나머지 한 좌표를 구해보자. <br />
반복문 0번 인덱스에서 x좌표를 먼저 구하고 1번 인덱스에서 y좌표를 구한다.</p>

<p>코드로 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>인덱스가 0일 때는 x좌표를 1일 때는 y좌표를 v[0][i], v[1][i], v[2][i]를 확인하여 찾을 수 있다.</p>

<h4 id="3-비트연산자-활용">3. 비트연산자 활용</h4>
<p>마지막으로 <strong>비트연산자</strong>를 활용하면 위의 2가지 풀이보다 더 간단하게 풀 수 있다.</p>

<blockquote>
  <p><strong>비트연산자</strong>란? <br />
논리연산자와 비슷하지만, 비트(bit) 단위로 논리 연산을 할 때 사용하는 연산자이다. <br />
또한, 비트 단위로 왼쪽이나 오른쪽으로 전체 비트를 이동하거나 1의 보수를 만들 때 사용한다.</p>
</blockquote>

<p>이 문제에선 비트연산자 중에서 XOR 연산을 할 수 있는 <strong>”^”</strong> 연산자를 이용한다. <strong>XOR연산은 두 수가 같으면 같은 값을, 다르면 다른 값을 반환</strong>한다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th style="text-align: center">B</th>
      <th style="text-align: center">A^B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
  </tbody>
</table>

<p>v=[[1, 4], [3, 4], [3, 10]] 일 때, XOR 연산과정을 예를 들어 살펴보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>x좌표 : v[0][0] ^ v[1][0] ^ v[2][0]
y좌표 : v[0][1] ^ v[1][1] ^ v[2][1]

v[0][0]^v[1][0]^v[2][0] = 1^3^3 = 1
v[0][1]^v[1][1]^v[2][1] = 4^4^10 = 10
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 A와 B에 XOR 연산을 하고 다시 B로 XOR연산을 하게 되면 처음 값 A가 나오게 된다. <br />
이제 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
<span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>한눈에 봐도 코드가 너무나도 간결해졌다.</p>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">v</span> <span class="o">=</span> <span class="o">{{</span><span class="mi">1</span><span class="o">,</span><span class="mi">4</span><span class="o">},{</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">},{</span><span class="mi">3</span><span class="o">,</span><span class="mi">10</span><span class="o">}};</span>
        <span class="c1">// int[][] v ={{1,1},{2,2},{1,2}};</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution3</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="c1">// 1. 조건문 활용</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="n">x</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="n">x</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">])</span> <span class="n">x</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span> <span class="n">y</span><span class="o">=</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">};</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 2. 반복문 내 조건문 활용</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution2</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 3. 비트연산자 활용</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution3</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">v</span> <span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

        <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">^</span> <span class="n">v</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>프로그래머스 데브코스 코딩테스트 사전 테스트 중 나온 문제인데, 어떻게 푸냐에 따라서 코드의 가독성이 달라져 재미있게 풀었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[데모 - 나머지 한 점]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 구명보트</title><link href="http://localhost:4000/java/67-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 구명보트" /><published>2022-09-16T00:00:00+09:00</published><updated>2022-09-16T00:00:00+09:00</updated><id>http://localhost:4000/java/67-post</id><content type="html" xml:base="http://localhost:4000/java/67-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220916_01.png" width="700" /></center>
<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>people = [70, 50, 80, 50]</strong> <br />
<strong>limit = 100</strong> <br />
Output-1 <br />
<strong>3</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>people = [70, 80, 50]</strong> <br />
<strong>limit = 100</strong> <br />
Output-2 <br />
<strong>3</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>먼저, 보트에는 <strong>단 2명</strong>만 탈 수 있다는 점을 유의해야 한다. <br />
문제를 풀기 위한 아이디어 자체는 간단하다.</p>

<h4 id="초안-아이디어">초안 아이디어</h4>
<ul>
  <li>무게제한/2 을 넘는 사람이면, 한 보트에 혼자 태워 보낸다.</li>
  <li>무게제한/2 을 넘지 않는 사람이면, 이미 태워 보낸 보트에 탈 수 있는지 확인하고 탈 수 있다면 타고, 탈 수 없다면 새 보트에 탄다.</li>
</ul>

<p>위 아이디어를 적용해보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>people=[70,50,80,50], limit=100 일 떄,
80 -&gt; 80&gt;50(limit/2) -&gt; 새 보트=[80]
70 -&gt; 70&gt;50(limit/2) -&gt; 새 보트=[80,70]
50 -&gt; 50==50(limit/2) -&gt; 새 보트=[80,70,50]
50 -&gt; 50==50(limit/2) -&gt; 기존 보트=[80,70,50+50]

people=[40,50,160,150], limit=200 일 떄,
160 -&gt; 160&gt;100 -&gt; 새 보트=[160]
150 -&gt; 150&gt;100 -&gt; 새 보트=[160,150]
50 -&gt; 50&lt;100 -&gt; 기존 보트=[160,150+50]
40 -&gt; 40&lt;100 -&gt; 기존 보트=[160+40,150+50]
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="테스트케이스-실패-및-시간초과-발생">테스트케이스 실패 및 시간초과 발생</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>people = {70,50,80,50}, limit = 100
people = {70,80,50}, limit = 100
people = {40, 50, 150, 160}, limit = 200
people = {100,500,500,900,950}limit = 1000
people = {40,40,40}, limit = 120
people = {40,40,40,40,50}, limit = 200
people = {40, 55, 55, 60, 60, 60, 70, 80}, limit = 100
people = {40}, limit = 100
people = {60,60,51,51,100}, limit = 100
</pre></td></tr></tbody></table></code></pre></div></div>
<p>하지만, 위와 같은 다양한 반례들을 테스트하면서, 조건식의 검증이 불가함을 알게 되었다. 살펴보니, 무거운 사람부터 가벼운 사람순으로 순회하며 무게제한/2 을 넘긴 사람이면 새 보트 배열에 추가되는데 여기서 <strong>이중 for문을 통해 새 보트 배열의 원소를 추가로 탐색하게 되면서 조건식을 검증할 수 없었다.</strong> <br />
거기다 코드의 가독성도 너무 떨어진 상태이기에 처음부터 다시 아이디어를 생각한 후 코드를 작성하기로 결심하였다.</p>

<h4 id="최종-아이디어">최종 아이디어</h4>
<p>처음부터 다시 아이디어를 차분히 생각해보았다.</p>
<ul>
  <li>먼저 무거운 사람부터 보트에 태워 보내기 위해 people배열을 내림차순으로 정렬한다.</li>
  <li>제일 무거운 사람과 제일 가벼운 사람의 합이 보트의 무게 제한을 넘는지 확인한다.
    <ul>
      <li>무게 제한을 넘는다면 제일 무거운 사람만 보트에 태운다.</li>
      <li>무게 제한을 넘지 않는다면 같이 탈 수 있으므로 같이 보트에 태운다.</li>
    </ul>
  </li>
</ul>

<p>위 아이디어를 어떻게 구현할지 예를 들어보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>내림차순 정렬하여 people=[80,70,50,50], limit=100 일 때,
1. 80 -&gt; 80+50=130 &gt; limit -&gt; 80만 보트 탑승
2. 70 -&gt; 70+50=120 &gt; limit -&gt; 70만 보트 탑승
3. 50 -&gt; 50+50=100 == limit -&gt; 50과 50 함께 보트 탑승
4. 50 -&gt; 3번에서 이미 탑승함
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그럼 코드로 한 번 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="nc">Integer</span><span class="o">[]</span> <span class="n">tmp</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">people</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span> 
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 반환할 보트의 개수 answer를 초기화하고, people 배열을 내림차순 정렬하여 tmp에 담는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">light</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">heavy</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">heavy</span><span class="o">&lt;=</span><span class="n">light</span><span class="o">;</span> <span class="n">heavy</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">((</span><span class="n">tmp</span><span class="o">[</span><span class="n">heavy</span><span class="o">]+</span><span class="n">tmp</span><span class="o">[</span><span class="n">light</span><span class="o">])</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="o">)</span> <span class="n">light</span><span class="o">--;</span>
    <span class="n">answer</span><span class="o">++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 tmp에서 가장 무거운 사람과 가장 가벼운 사람의 무게 합을 limit와 비교하기 위해선 <strong>무거운 사람에서 가벼운 사람 순으로 반복</strong>해가며 확인하면 된다. 무거운 사람과 가벼운 사람의 합이 무게제한을 넘으면 무거운 사람 혼자 탑승하고, 무게제한을 넘지 않으면 같이 탑승하기 위해 <strong>인덱스를 하나 줄여서 반복문을 종료</strong>시키면 된다.</p>

<p>위 내용대로 작성한 코드를 제출하니, 모든 테스트케이스와 효율성 테스트를 정상적으로 통과하였다.</p>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">people</span> <span class="o">=</span> <span class="o">{</span><span class="mi">70</span><span class="o">,</span><span class="mi">50</span><span class="o">,</span><span class="mi">80</span><span class="o">,</span><span class="mi">50</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="c1">// int[] people = {70,80,50};</span>
        <span class="c1">// int limit = 100;</span>
        <span class="c1">// int[] people = {40, 50, 150, 160};</span>
        <span class="c1">// int limit = 200;</span>
        <span class="c1">// int[] people = {100,500,500,900,950};</span>
        <span class="c1">// int limit = 1000;</span>
        <span class="c1">// int[] people = {40,40,40};</span>
        <span class="c1">// int limit = 120;</span>
        <span class="c1">// int[] people = {40,40,40,40,50};</span>
        <span class="c1">// int limit = 200;</span>
        <span class="c1">// int[] people = {40, 55, 55, 60, 60, 60, 70, 80};</span>
        <span class="c1">// int limit = 100;</span>
        <span class="c1">// int[] people = {40};</span>
        <span class="c1">// int limit = 100;</span>
        <span class="c1">// int[] people = {60,60,51,51,100};</span>
        <span class="c1">// int limit = 100;</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution2</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="n">limit</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="c1">// 내림차순 풀이</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">people</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">tmp</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">people</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span> 
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        
        <span class="kt">int</span> <span class="n">light</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">heavy</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">heavy</span><span class="o">&lt;=</span><span class="n">light</span><span class="o">;</span> <span class="n">heavy</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">((</span><span class="n">tmp</span><span class="o">[</span><span class="n">heavy</span><span class="o">]+</span><span class="n">tmp</span><span class="o">[</span><span class="n">light</span><span class="o">])</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="o">)</span> <span class="n">light</span><span class="o">--;</span>
            <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 오름차순 정렬 풀이</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution2</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">people</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">people</span><span class="o">);</span>
        
        <span class="kt">int</span> <span class="n">light</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">heavy</span><span class="o">=</span><span class="n">people</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">light</span><span class="o">&lt;=</span><span class="n">heavy</span><span class="o">;</span> <span class="n">heavy</span><span class="o">--)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">((</span><span class="n">people</span><span class="o">[</span><span class="n">heavy</span><span class="o">]+</span><span class="n">people</span><span class="o">[</span><span class="n">light</span><span class="o">])</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="o">)</span> <span class="n">light</span><span class="o">++;</span>
            <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>문제에서 요구하는 논리를 아이디어로 풀어내는 게 굉장히 어려웠던 문제였다.</li>
  <li>생각했던 논리대로 풀기 위해 여섯시간을 삽질했지만, 풀지 못하고 투 포인터를 활용하여 정답을 냈다. 다음부턴 문제에서 요구되는 알고리즘이 보인다면 적극적으로 활룡하자.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 구명보트]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 2750번 - 수 정렬하기</title><link href="http://localhost:4000/java/71-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 2750번 - 수 정렬하기" /><published>2022-09-16T00:00:00+09:00</published><updated>2022-09-16T00:00:00+09:00</updated><id>http://localhost:4000/java/71-post</id><content type="html" xml:base="http://localhost:4000/java/71-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2750.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
5
5
2
3
4
1
</pre>
<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
1
2
3
4
5
</pre>
<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 N의 범위가 최대 1,000으로 작기 때문에 <strong>버블정렬</strong>을 활용해서 풀었다.</p>

<h4 id="버블정렬-풀이">버블정렬 풀이</h4>
<blockquote>
  <p><strong>버블정렬</strong>이란? <br />
데이터의 인접요소끼리 비교하고 swqp 연산을 수행하여 정렬하는 방식이다.</p>
</blockquote>

<p>주어진 배열이 [5,2,3,4,1]일때, 버블정렬을 통해 정렬되는 과정을 알아보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>i가 0일 때
    5&gt;2 -&gt; swap = [2,5,3,4,1]
    5&gt;3 -&gt; swap = [2,3,5,4,1]
    5&gt;4 -&gt; swap = [2,3,4,5,1]
    5&gt;1 =&gt; swap = [2,3,4,1,5]
i가 1일 때
    2&lt;3 = [2,3,4,1,5]
    3&lt;4 = [2,3,4,1,5]
    4&gt;1 -&gt; swap = [2,3,1,4,5]
i가 2일 때
    2&lt;3 = [2,3,1,4,5]
    3&gt;1 -&gt; swap = [2,1,3,4,5]
i가 3일 때 
    2&gt;1 -&gt; swap = [1,2,3,4,5]
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 i는 N만큼 순회하며 이전 수가 현재수보다 크다면 swap 연산을 수행한다. <br />
여기서 핵심은 <strong>이중 for문은 n-i-1 만큼 반복</strong>한다는 것인데, 하나의 loop를 돈 후에는 끝자리 수들은 정렬이 완료되어 굳이 탐색할 필요가 없기 때문이다.</p>

<p>그럼 코드로 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]&gt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>  
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>i는 주어진 입력 수 배열만큼 순회하며 이중 for문을 통해 인접 수들을 비교해가며 swap 연산을 수행한다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">){</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="o">}</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]&gt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>  
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>문제에서 주어진 N의 개수의 범위가 작기 때문에 <strong>n제곱의 시간복잡도를 가진 버블정렬</strong>에 대해서 공부하고 문제를 풀어볼 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[브론즈 2 - 수 정렬하기]]></summary></entry><entry><title type="html">[Java] 백준(실버-2) 1874번 - 스택 수열</title><link href="http://localhost:4000/java/69-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-2) 1874번 - 스택 수열" /><published>2022-09-16T00:00:00+09:00</published><updated>2022-09-16T00:00:00+09:00</updated><id>http://localhost:4000/java/69-post</id><content type="html" xml:base="http://localhost:4000/java/69-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1874.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
8
4
3
6
8
7
5
2
1
</pre>
<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
+
+
+
+
-
-
+
+
-
+
+
-
-
-
-
-
</pre>
<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제 제목에도 나와있듯이, 자료구조중 하나인 스택(Stack)을 활용해야 한다. 입력값마다 스택에 push 및 pop을 하여 수열을 만들 수 있는지 검증해야 한다.</p>

<p>생각해낸 아이디어는 다음과 같다.</p>

<p><strong>아이디어 도출</strong></p>
<ol>
  <li>1부터 N까지 오름차순으로 임시스택에 저장한다. ex) N=8이면, stack=[8,7,6,5,4,3,2,1]</li>
  <li>N만큼 반복하며 입력을 받아 임시스택의 맨 위 값과 같을 때까지 꺼내서 새 스택에 집어 넣는다.(push연산)</li>
  <li>새스택의 맨 위 값과 입력값이 같다면, 새 스택에서 값을 꺼낸다.(pop연산)</li>
  <li>다만, 새스택의 맨 위값과 입력값이 같지 않다면, 수열을 이룰 수 없으므로 NO를 출력해야 한다.</li>
</ol>

<p>n이 8일 때의 예를 들어보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre>tmp = [8,7,6,5,4,3,2,1] // 임시 스택
st = [] // 새 스택

input(4) &lt;= tmp.peek()=1
    st.push(tmp.pop()) // tmp=[8,7,6,5], st=[1,2,3,4], push연산 4번 수행
    input(4)==st.peek()=4
        st.pop() // st=[1,2,3], pop연산 1번 수행

input(3) &lt;= tmp.peek()=3
    input(3)==st.peek()=3
        st.pop() // st=[1,2], pop연산 1번 수행

input(6) &lt;= tmp.peek()=2
    st.push(tmp.pop()) // tmp=[8,7], st=[1,2,5,6], push연산 2번 수행
    input(6)==st.peek()=6
        st.pop() // st=[1,2,5], pop연산 1번 수행

input(8) &lt;= tmp.peek()=5
    st.push(tmp.pop()) // tmp=[8,7], st=[1,2,5,7,8], push연산 2번 수행
    input(8)==st.peek()=8
        st.pop() // st=[1,2,5,7], pop연산 1번 수행

input(7) &lt;= tmp.peek()=7
    input(7)==st.peek()=7
        st.pop() // st=[1,2,5], pop연산 1번 수행

input(5) &lt;= tmp.peek()=5
    input(5)==st.peek()=5
        st.pop() // st=[1,2], pop연산 1번 수행

이하 생략..

</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 로직대로 진행되면 push와 pop 연산별로 <strong>”+,+,+,+,-,-,+,+,-,+,+,-,-,-,-,-“</strong> 를 구할 수 있다. <br /></p>

<p><br /></p>

<p>이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="kt">boolean</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
    <span class="n">tmp</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N을 입력받고, N을 오름차순으로 담을 임시스택 tmp와 새 스택 st를 초기화한다. 그리고 출력할 연산자 문자열을 담을 operator 리스트를 초기화한다. 마지막으로 수열을 이룰 수 있는지 여부를 확인할 status 변수를 true로 초기화한다. <br /></p>

<p><strong>왜 리스트에 담아 출력하는가?</strong> <br />
push와 pop연산이 일어날 때마다 출력을 하게 되면 status가 true임에도 “+”와 “-“ 문자열을 출력할 수 있기에, 별도의 리스트에 담아뒀다가 status의 상태에 따라 출력하기 위함이다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">input</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">while</span><span class="o">(!</span><span class="n">tmp</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">tmp</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">tmp</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
        <span class="n">operator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"+"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">==</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="n">operator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"-"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이제 위에서 도출한 아이디어대로 코드를 작성했다. 입력값 input과 tmp 맨위 값과 비교하여 push연산을 행하고, st의 맨 위값과 비교하여 pop연산을 수행한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">if</span><span class="o">(</span><span class="n">status</span><span class="o">==</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">op</span> <span class="o">:</span> <span class="n">operator</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">op</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
<span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"NO"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 N까지 입력받은 값이 수열을 이룰 수 있다면 operator 리스트의 원소를 출력하고, 수열을 이룰 수 없다면 “NO”를 출력하면 된다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">boolean</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="n">tmp</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">input</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">tmp</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">tmp</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">tmp</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
                <span class="n">operator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"+"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">==</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="n">operator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"-"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">status</span><span class="o">==</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">op</span> <span class="o">:</span> <span class="n">operator</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">op</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"NO"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>EmptyStackException을 고려하여 스택이 비어있는지를 잘 확인해야 했다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[실버 2 - 스택 수열]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 멀리 뛰기</title><link href="http://localhost:4000/java/68-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 멀리 뛰기" /><published>2022-09-16T00:00:00+09:00</published><updated>2022-09-16T00:00:00+09:00</updated><id>http://localhost:4000/java/68-post</id><content type="html" xml:base="http://localhost:4000/java/68-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220916_02.png" width="700" /></center>
<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>4</strong> <br />
Output-1 <br />
<strong>5</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>3</strong> <br />
Output-2 <br />
<strong>3</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<h4 id="나머지연산의-시점">나머지연산의 시점</h4>
<p>이 문제내용을 잘 보면 <strong>“효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수”</strong> 를 작성해야 한다고 한다. 
구한 정답에서 1234567을 MOD연산하여 반환하는것이 아니라 <strong>단계마다 MOD연산</strong>을 해야 한다고 알고 있었다. 그러니 문제를 풀어가며 MOD연산을 진행하도록 하자.</p>

<h4 id="피보나치-수열">피보나치 수열?</h4>
<p>일일이 손으로 1칸, 2칸, 3칸, 4칸 … 8칸까지 정답을 구해보니, <strong>“1,2,3,5,8,13,21,34”</strong> 의 구조를 이루었다. 어디서 많이 본 수열이다 싶었는데 바로 피보나치 수열을 띄고 있었다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>나머지연산을 단계별로 수행해야 함을 알았고, 피보나치 수열의 n번째 수가 정답이라는 것을 알았다. 정리해보자.</p>
<ul>
  <li>정답을 1234567로 나눈 나머지를 반환해야 한다.
    <ul>
      <li>단계별로 1234567을 나눈 나머지를 계산해야한다.</li>
    </ul>
  </li>
  <li>피보나치 수열과 동일한 구조를 가지고 있다.
    <ul>
      <li>0,1,2는 n 그대로 반환하자.</li>
      <li>피보나치 수열의 n자리수를 반환하면 된다.</li>
    </ul>
  </li>
</ul>

<p>아이디어를 정리했으니 코드로 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">,</span> <span class="n">fibo</span><span class="o">;</span>
<span class="n">n1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="n">n2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="n">fibo</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">n1</span> <span class="o">=</span> <span class="n">n2</span><span class="o">;</span>
    <span class="n">n2</span> <span class="o">=</span> <span class="n">fibo</span><span class="o">;</span>
    <span class="n">fibo</span> <span class="o">=</span> <span class="o">(</span><span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">)</span> <span class="o">%</span> <span class="mi">1234567</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 코드는 피보나치 수열에서 n번째 수를 구하는 과정을 작성하였다. 또한, <strong>n번째 피보나치수를 구할 때마다 1234567 나머지연산을 수행</strong>하였다.</p>

<p>작성한 코드를 제출하니, 모든 테스트케이스를 정상적으로 통과하였다.
<br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 1. 정답을 1234567로 나눈 나머지를 반환해야 한다. -&gt; 단계별로 1234567을 나눈 나머지를 계산해야한다.</span>
        <span class="c1">// 2. 피보나치 수열과 동일한 구조를 가지고 있다. -&gt; 0,1,2는 n 그대로 반환하자.</span>
        <span class="c1">// 3. 두 수의 합으로 다음 수 fibo를 만들수 있다.</span>
        <span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">,</span> <span class="n">fibo</span><span class="o">;</span>
        <span class="n">n1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">n2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">fibo</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">n1</span> <span class="o">=</span> <span class="n">n2</span><span class="o">;</span>
            <span class="n">n2</span> <span class="o">=</span> <span class="n">fibo</span><span class="o">;</span>
            <span class="n">fibo</span> <span class="o">=</span> <span class="o">(</span><span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">)</span> <span class="o">%</span> <span class="mi">1234567</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">fibo</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="다름-사람의-풀이">다름 사람의 풀이</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">solution2</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">answer</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="k">else</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">solution2</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">solution</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>나머지연산의 시점은 잘 파악하였지만, 피보나치 수열의 구조와 같음을 꺠닫기까지 시간이 조금 걸렸다..ㅠ</li>
  <li>n번째 피보나치 수를 구하는 코드를 아주 깔끔하게 작성한 다른 사람의 풀이를 보고 가독성 좋은 코드를 위해 노력해야겠다고 느꼈다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 멀리 뛰기]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 신고 결과 받기</title><link href="http://localhost:4000/java/66-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 신고 결과 받기" /><published>2022-09-15T00:00:00+09:00</published><updated>2022-09-15T00:00:00+09:00</updated><id>http://localhost:4000/java/66-post</id><content type="html" xml:base="http://localhost:4000/java/66-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220915_02.png" width="700" /></center>
<p><br /></p>

<p>상세한 문제 내용은 <a href="https://school.programmers.co.kr/learn/courses/30/lessons/92334">여기</a>에서 확인 바랍니다.
<br /></p>

<p><strong>제한사항</strong></p>
<ul>
  <li>2 ≤ id_list의 길이 ≤ 1,000
    <ul>
      <li>1 ≤ id_list의 원소 길이 ≤ 10</li>
      <li>id_list의 원소는 이용자의 id를 나타내는 문자열이며 알파벳 소문자로만 이루어져 있습니다.</li>
      <li>id_list에는 같은 아이디가 중복해서 들어있지 않습니다.</li>
    </ul>
  </li>
  <li>1 ≤ report의 길이 ≤ 200,000
    <ul>
      <li>3 ≤ report의 원소 길이 ≤ 21</li>
      <li>report의 원소는 “이용자id 신고한id”형태의 문자열입니다.</li>
      <li>예를 들어 “muzi frodo”의 경우 “muzi”가 “frodo”를 신고했다는 의미입니다.</li>
      <li>id는 알파벳 소문자로만 이루어져 있습니다.</li>
      <li>이용자id와 신고한id는 공백(스페이스)하나로 구분되어 있습니다.</li>
      <li>자기 자신을 신고하는 경우는 없습니다.</li>
    </ul>
  </li>
  <li>1 ≤ k ≤ 200, k는 자연수입니다.</li>
  <li>return 하는 배열은 id_list에 담긴 id 순서대로 각 유저가 받은 결과 메일 수를 담으면 됩니다.</li>
</ul>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>id_list = [“muzi”, “frodo”, “apeach”, “neo”]</strong> <br />
<strong>report = [“muzi frodo”,”apeach frodo”,”frodo neo”,”muzi neo”,”apeach muzi”]</strong> <br />
<strong>k = 2</strong> <br />
Output-1 <br />
<strong>[2,1,1,0]</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>id_list = [“con”, “ryan”]</strong> <br />
<strong>report = [“ryan con”, “ryan con”, “ryan con”, “ryan con”]</strong> <br />
<strong>k = 3</strong> <br />
Output-2 <br />
<strong>[0,0]</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>사용자가 들어있는 배열 id_list과, [신고자 피신고자] 배열인 report에서 k번 이상 신고되어 정지된 피신고자를 신고한 사용자를 구해야 한다. <br />
이를 위해 도출한 아이디어는 아래와 같다.</p>
<ol>
  <li>신고자 신고메일 수신횟수를 담을 LinkedHashMap인 result을 선언하고 id:0으로 초기화한다.</li>
  <li>같은 id가 같은 id를 신고하는 건 1번으로 처리한다 -&gt; report를 중복없는 HashSet으로 저장한다.</li>
  <li>reportSet을 돌며 신고당한자와 신고횟수를 HashMap에 저장한다.</li>
  <li>reportSet의 신고자:피신고자돌며 reportMap의 피신고자:신고횟수와 비교하여 k이상이면 result에서 신고자 메일 수신횟수를 증가시킨다.</li>
</ol>

<p>위 아이디어를 코드로 작성해보자.</p>

<h4 id="1번-linkedhaspmap-초기화">1번. LinkedHaspMap 초기화</h4>
<p>먼저, 신고하여 정지된 사용자마다 메일을 받기 위해 id_list의 순서대로 [id:메일횟수] 형식을 지켜 저장하기 위해 <strong>LinkedHashMap을</strong> 활용했다. <br />
id_list를 순회하며 LinkedHashMap인 result을 id:0으로 초기화했다.</p>

<blockquote>
  <p><strong>LinkedHashMap</strong>이란? <br />
HashMap을 상속받아 만들어졌으며, 순서가 유지되는 HashMap이다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nc">LinkedHashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedHashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">id_list</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">result</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="2번-hashset을-활용해-중복-신고건-제거">2번. HashSet을 활용해 중복 신고건 제거</h4>
<p>문제 요구사항에서 같은 사용자가 같은 사용자를 신고한 건은 1건으로 처리한다고 하니, <strong>report배열의 중복 원소를 제거</strong>해야 한다. <br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">reportSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">report</span><span class="o">)</span> <span class="n">reportSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>중복이 허용되지 않는 HashSet에 report배열의 원소를 저장하여 중복을 제거했다.</p>

<h4 id="3번-피신고자와-신고횟수를-담은-hashmap-생성">3번. 피신고자와 신고횟수를 담은 HashMap 생성</h4>
<p>피신고자가 몇번 신고를 당했는지, k번 이상 신고당해 정지를 할지 말지를 알기 위해 중복이 제거된 reportSet을 돌며 [피신고자:신고횟수]를 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">reportMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">reportSet</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">reported</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
    <span class="n">reportMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">reported</span><span class="o">,</span> <span class="n">reportMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">reported</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>3번 과정을 통해 reportMap에 저장되는 과정을 보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>신고자:muzi, 피신고자: frodo -&gt; reportMap=[frodo:1]
신고자:apeach, 피신고자: frodo -&gt; reportMap=[frodo:2]
신고자:frodo, 피신고자: neo -&gt; reportMap=[frodo:2, neo:1]
신고자:muzi, 피신고자: neo -&gt; reportMap=[frodo:2, neo:2]
신고자:apeach, 피신고자: muzi -&gt; reportMap=[frodo:2, neo:2, muzi:1]
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="4번-신고자가-받을-메일횟수-구하기">4번. 신고자가 받을 메일횟수 구하기</h4>
<p>마지막으로, 정지된 사용자를 신고한 신고자가 받을 메일의 횟수를 구하면 된다. <br />
reportSet의 신고자(reporter)가 신고한 피신고자(reported)와 reportMap의 key(피신고자)가 같다면, <strong>k번 이상 신고되어 정지되었는지 확인</strong>한다. <br />
그리고 정지된 사용자라면 맨 처음 작성한 result에서 해당 <strong>신고자를 찾아 메일횟수 1을 증가</strong>시킨다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">reportSet</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">reporter</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">0</span><span class="o">];</span>
    <span class="nc">String</span> <span class="n">reported</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">reportMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">reported</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()&gt;=</span><span class="n">k</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">reporter</span><span class="o">,</span> <span class="n">result</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">reporter</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>4번 과정을 통해 result에 변경점을 알아보면,</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>reportMap=[frodo:2, neo:2, muzi:1]

신고자:muzi, 피신고자: frodo -&gt; frodo는 정지된 사용자로 muzi에게 메일을 전송한다. -&gt; result=[muzi:1,frodo:0, apeach:0, neo:0]
신고자:apeach, 피신고자: frodo -&gt; frodo는 정지된 사용자로 apeach에게 메일을 전송한다. -&gt; result=[muzi:1,frodo:0, apeach:1, neo:0]
신고자:frodo, 피신고자: neo -&gt; neo는 정지된 사용자로 frodo에게 메일을 전송한다. -&gt; result=[muzi:1,frodo:1, apeach:1, neo:0]
신고자:muzi, 피신고자: neo -&gt; neo는 정지된 사용자로 muzi에게 메일을 전송한다. -&gt; result=[muzi:2,frodo:1, apeach:1, neo:0]
신고자:apeach, 피신고자: muzi -&gt; muzi는 1번 신고되어 정지되지 않았기에 apeach에게 메일을 전송하지 않는다. -&gt; result=[muzi:2,frodo:1, apeach:1, neo:0]
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<p>이렇게 작성한 코드를 제출하니 모든 테스트케이스를 정상적으로 통과하였다.</p>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">id_list</span> <span class="o">=</span> <span class="o">{</span><span class="s">"muzi"</span><span class="o">,</span> <span class="s">"frodo"</span><span class="o">,</span> <span class="s">"apeach"</span><span class="o">,</span> <span class="s">"neo"</span><span class="o">};</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">report</span> <span class="o">=</span> <span class="o">{</span><span class="s">"muzi frodo"</span><span class="o">,</span><span class="s">"apeach frodo"</span><span class="o">,</span><span class="s">"frodo neo"</span><span class="o">,</span><span class="s">"muzi neo"</span><span class="o">,</span><span class="s">"apeach muzi"</span><span class="o">};</span>
        <span class="c1">// String[] id_list = {"con", "ryan"};</span>
        <span class="c1">// String[] report = {"ryan con", "ryan con", "ryan con", "ryan con"};</span>
        <span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">id_list</span><span class="o">,</span> <span class="n">report</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">id_list</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">report</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 1. 아이디어 </span>
        <span class="c1">// 1.1 신고자 신고메일 수신횟수를 담을 LinkedHashMap인 result을 선언하고 id:0으로 초기화한다.</span>
        <span class="c1">// 1.2 같은 id가 같은 id를 신고하는 건 1번으로 처리한다 -&gt; report를 중복없는 HashSet으로 저장한다.</span>
        <span class="c1">// 1.3 reportSet을 돌며 신고당한자와 신고횟수를 HashMap에 저장한다.</span>
        <span class="c1">// 1.4 reportSet의 신고자:피신고자돌며 reportMap의 피신고자:신고횟수와 비교하여 k이상이면 result에서 신고자 메일 수신횟수를 증가시킨다.</span>
        <span class="nc">LinkedHashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedHashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">id_list</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">reportSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">report</span><span class="o">)</span> <span class="n">reportSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">reportMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">reportSet</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">reported</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">reportMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">reported</span><span class="o">,</span> <span class="n">reportMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">reported</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">reportSet</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">reporter</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">0</span><span class="o">];</span>
            <span class="nc">String</span> <span class="n">reported</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">reportMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">reported</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()&gt;=</span><span class="n">k</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">reporter</span><span class="o">,</span> <span class="n">result</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">reporter</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">id_list</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">cnt</span> <span class="o">:</span> <span class="n">result</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">cnt</span><span class="o">;</span>
            <span class="n">idx</span><span class="o">++;</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>LinkedHashMap, HashMap을 활용하여 [key,value] 대로 접근하는 방법을 제대로 복습하고 익힐 수 있었다.</li>
  <li>드디어 프로그래머스 레벨 1 문제들을 모두 풀었다. 레벨 2 문제들도 같이 병행하여 풀고있었는데, 코딩테스트까지 남은 이틀 레벨 2 문제 열심히 풀어야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 신고 결과 받기]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 카펫</title><link href="http://localhost:4000/java/65-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 카펫" /><published>2022-09-15T00:00:00+09:00</published><updated>2022-09-15T00:00:00+09:00</updated><id>http://localhost:4000/java/65-post</id><content type="html" xml:base="http://localhost:4000/java/65-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220915_01.png" width="700" /></center>
<p><br /></p>

<p><strong>제한사항</strong></p>
<ul>
  <li>갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.</li>
  <li>노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.</li>
  <li>카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.</li>
</ul>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>brown=10</strong> <br />
<strong>yellow=2</strong> <br />
Output-1 <br />
<strong>[4,3]</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>brown=8</strong> <br />
<strong>yellow=1</strong> <br />
Output-2 <br />
<strong>[3,3]</strong></p>
</blockquote>

<blockquote>
  <p>Input-3 <br />
<strong>brown=24</strong> <br />
<strong>yellow=24</strong> <br />
Output-3 <br />
<strong>[8,6]</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>brown과 yellow의 약수를 활용해 접근하였다. <br /></p>

<p><strong>왜 약수를 통해 접근하였을까?</strong> <br />
brown을 b, yellow를 y라 하고 가로크기를 w, 세로크기를 h라 하자.<br />
b+y 값은 w와 h의 곱과 같음을 알 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>b b b b 
b y y b
b b b b
- b=10, y=2, b+y=12
- w=4, h=3, w*h=12

b b b
b y b
b b b
- b=8, y=1, b+y=9
- w=3, h=3, w*h=9

b b b b b b b b
b y y y y y y b
b y y y y y y b
b y y y y y y b
b y y y y y y b
b b b b b b b b
- b=24, y=24, b+y=48
- w=8, h=6, w*h=48
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 b와 y는 b+y의 약수중 하나의 수로 구성되어 있다. b+y의 약수들 중에 w와 h를 찾으면 된다.</p>

<h4 id="w와-h-구하기">w와 h 구하기</h4>
<p>b+y를 sum이라 하면, sum의 약수들을 구하고 sum만큼 반복하며 <strong>sum과 두 약수의 곱이 같을 때</strong> 두 약수가 w와 h가 된다. <br /></p>

<p>그런데, 아래 예를 보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>b=10, y=2, sum=12, divisor=[1,2,3,4,6,12] 일 떄
i=1이면, 1*12 = 12
i=2이면, 2*6 = 12
i=3이면, 3*4 = 12
...
</pre></td></tr></tbody></table></code></pre></div></div>

<p>각 i별로 매칭되는 i를 곱하면 모든 수가 sum의 약수이기에 모두 sum을 구할 수 있다. <br />
그렇기에 가로와 세로크기를 구할 때 아래 식을 검증해야 한다.</p>
<ul>
  <li><strong>(w-2)(h-2) = yellow</strong></li>
</ul>

<p><strong>w와 h에 각각 2를 빼고 곱한값</strong>이 세로크기 즉, yellow 값이 되어야 한다. <br />
이 식을 대입해서 생각해보면 (w-2)(h-2) == 6을 만족해야 한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>i=1이면, (1-2)*(12-2) = -10
i=2이면, (2-2)*(6-2) = 0
i=3이면, (3-2)*(4-2) = 2 (=yellow)
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 i가 3일 때 조건을 만족하는 것을 알 수 있다.</p>

<p>이제 카펫의 가로와 세로크기를 구하는 방법을 알았으니, 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">div</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 약수를 담을 리스트</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">brown</span><span class="o">+</span><span class="n">yellow</span><span class="o">;</span> <span class="c1">// brown+yellow</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span> <span class="c1">// return 배열</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">sum</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">sum</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">div</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// 약수만 div에 저장</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>약수들을 담을 ArrayList div 리스트, brown과 yellow의 합을 담을 sum 변수, 가로크기와 세로크기를 담아 반환할 answer 배열을 초기화하였다. <br />
그리고 sum만큼 반복하며 약수들을 div에 담았다. <strong>이때, 약수를 담을 div를 int배열로 만들지않고 ArrayList로 선언한 이유는, 약수의 개수를 미리 알 수 없기 때문이다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">div</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// div의 반만큼만 반복</span>
    <span class="k">if</span><span class="o">((</span><span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="mi">2</span><span class="o">)*(</span><span class="n">sum</span><span class="o">/</span><span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="n">yellow</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">/</span><span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>약수리스트인 <strong>div의 반만큼만 반복해도 [sum/현재약수] 하여 모든 약수를 알 수 있다</strong> <br />
반복문 내에서 각 약수마다 (w-2)(h-2)==yellow 식을 검증하여 가로크기와 세로크기를 구했다.</p>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">b</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">brown</span><span class="o">,</span> <span class="kt">int</span> <span class="n">yellow</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">div</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">brown</span><span class="o">+</span><span class="n">yellow</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">sum</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">sum</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">div</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">div</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">((</span><span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="mi">2</span><span class="o">)*(</span><span class="n">sum</span><span class="o">/</span><span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="n">yellow</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">/</span><span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">div</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>약수를 활용해 접근하는 것까지는 하였지만, (w-2)(h-2)==yellow 식을 떠올리기가 힘들었다. 특정 수를 구할 수 있는 식을 많이 세워봐야한다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 카펫]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 영어 끝말잇기</title><link href="http://localhost:4000/java/64-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 영어 끝말잇기" /><published>2022-09-14T00:00:00+09:00</published><updated>2022-09-14T00:00:00+09:00</updated><id>http://localhost:4000/java/64-post</id><content type="html" xml:base="http://localhost:4000/java/64-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220914_01.png" width="700" /></center>
<p><br /></p>

<p><strong>제한사항</strong></p>
<ul>
  <li>끝말잇기에 참여하는 사람의 수 n은 2 이상 10 이하의 자연수입니다.</li>
  <li>words는 끝말잇기에 사용한 단어들이 순서대로 들어있는 배열이며, 길이는 n 이상 100 이하입니다.</li>
  <li>단어의 길이는 2 이상 50 이하입니다.</li>
  <li>모든 단어는 알파벳 소문자로만 이루어져 있습니다.</li>
  <li>끝말잇기에 사용되는 단어의 뜻(의미)은 신경 쓰지 않으셔도 됩니다.</li>
  <li>정답은 [ 번호, 차례 ] 형태로 return 해주세요.</li>
  <li>만약 주어진 단어들로 탈락자가 생기지 않는다면, [0, 0]을 return 해주세요.</li>
</ul>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>78</strong> <br />
Output-1 <br />
<strong>83</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>15</strong> <br />
Output-2 <br />
<strong>23</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>끝말잇기 배열에서 n번째마다 돌아가며 n번째 사람의 끝말잇기가 틀렸을 때를 알아야 한다. <br />
그리고 이전 끝말잇기 단어의 마지막 글자와 현재 끝말잇기 단어의 첫글자가 같은지도 검증해야 한다.</p>

<h4 id="n번째-순서-구하기">n번째 순서 구하기</h4>
<p>먼저, 끝말잇기 단어 배열을 순회하며 n명이 돌아가며 단어를 주고받도록 해야한다. <br />
예시의 words배열의 경우 9번의 단어를 주고받는데 3명이서 돌아가며 주고받는다. <br />
n이 3이고, 9번 끝말잇기 단어를 주고받는다고 하면 <strong>i를 n으로 즉, 3으로 나눈 나머지</strong>를 통해 알 수 있다.</p>
<ul>
  <li><strong>n번째 사람 : i % n</strong></li>
</ul>

<h4 id="실패한-사람-및-차례-구하기">실패한 사람 및 차례 구하기</h4>
<p>n명이 돌아가며 단어를 주고받는 것을 구했으니, 몇번째 차례에서 끝말잇기를 누가 실패했는지 알아야 한다. <br />
만약 n이 3이고, 끝말잇기 단어를 9번 주고받았다면, 총 3명이 3번씩 주고받는다. 즉, <strong>i를 n으로 나눈 나머지가 0일 때 차례가 뒤바뀐다.</strong></p>
<ul>
  <li><strong>n번째 차례 : i%n == 0</strong></li>
</ul>

<p>그리고 이전 단어의 마지막 글자와 현재 단어의 첫글자를 비교하여 다르다면 실패한 것으로 간주하자. <br />
또한, HashSet에 끝말잇기 단어를 담으며, 중복으로 끝말잇기 단어가 나올 경우 실패한 것으로 간주하자.</p>

<p>위에서 정한 내용을 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">fail</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 사용할 변수와 자료구조를 초기화하였다. <br />
num의 경우는 n번째 사람을 저장하고, cnt는 몇번째 차례인지, fail은 실패한 사람을 담는다. <br />
HashSet은 끝말잇기 단어를 담을 자료구조이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">i</span><span class="o">%</span><span class="n">n</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
        <span class="n">fail</span> <span class="o">=</span> <span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">beforelastLetter</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">,</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">length</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">nowFirstLetter</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">beforelastLetter</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nowFirstLetter</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">fail</span> <span class="o">=</span> <span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>끝말잇기 배열을 순회하며 num에 몇번째 사람인지를 담아두고, num이 0이라면 한바퀴 차례를 돌았기에 cnt 횟수를 증가시킨다. <br />
그리고 끝말잇기 단어를 Hashset에 저장하며, 중복 단어가 나왔다면 fail에 실패한 사람을 담고 반복문을 탈출한다. <br />
마지막으로 이전단어의 마지막글자와 현재단어의 첫글자를 비교하고 다르다면 fail에 실패한 사람을 담고 반복문을 탈출한다.</p>

<p>작성한 코드를 제출하니 모든 테스트케이스를 정상적으로 통과하였다.</p>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words</span> <span class="o">=</span> <span class="o">{</span><span class="s">"tank"</span><span class="o">,</span> <span class="s">"kick"</span><span class="o">,</span> <span class="s">"know"</span><span class="o">,</span> <span class="s">"wheel"</span><span class="o">,</span> <span class="s">"land"</span><span class="o">,</span> <span class="s">"dream"</span><span class="o">,</span> <span class="s">"mother"</span><span class="o">,</span> <span class="s">"robot"</span><span class="o">,</span> <span class="s">"tank"</span><span class="o">};</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">n</span><span class="o">,</span><span class="n">words</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">fail</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">num</span> <span class="o">=</span> <span class="n">i</span><span class="o">%</span><span class="n">n</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="n">fail</span> <span class="o">=</span> <span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">beforelastLetter</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">,</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">length</span><span class="o">());</span>
                <span class="nc">String</span> <span class="n">nowFirstLetter</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">beforelastLetter</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nowFirstLetter</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">fail</span> <span class="o">=</span> <span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">fail</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{</span><span class="n">fail</span><span class="o">,</span> <span class="n">cnt</span><span class="o">};</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>i%n 연산을 통해 n번째 사람마다 돌아가며 끝말잇기 배열에 접근할 수 있었고, HashSet을 활용해 중복단어를 적절히 거를 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 영어 끝말잇기]]></summary></entry><entry><title type="html">[Java] 백준 11659번 - 구간 합 구하기 4</title><link href="http://localhost:4000/java/62-post/" rel="alternate" type="text/html" title="[Java] 백준 11659번 - 구간 합 구하기 4" /><published>2022-09-14T00:00:00+09:00</published><updated>2022-09-14T00:00:00+09:00</updated><id>http://localhost:4000/java/62-post</id><content type="html" xml:base="http://localhost:4000/java/62-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11659.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br />
<strong>5 3</strong> <br />
<strong>5 4 3 2 1</strong> <br />
<strong>1 3</strong> <br />
<strong>2 4</strong> <br />
<strong>5 5</strong> <br />
Output <br />
<strong>12</strong> <br />
<strong>9</strong> <br />
<strong>1</strong> <br /></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 <strong>구간 합 알고리즘을 활용해 합배열</strong>을 만들어서 풀어야 한다. <br /></p>

<p>먼저 n개의 수들의 합배열을 만들어보자.</p>

<h4 id="합배열-만들기">합배열 만들기</h4>
<p>n개의 수를 5,4,3,2,1 라고 한다면, 합배열은 각 수의 합을 더해 나가면 5,9,12,14,15 이다. <br />
그렇다면 합배열을 만드는 과정을 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>문제 요구사항대로 n과 m을 입력받고 n개의 수를 입력받아 sum 배열에 담을 것이다. <br />
이때, <strong>sum 배열의 경우 n+1의 크기</strong>를 가지고 있다. <br /></p>

<p><strong>합배열의 크기는 왜 n+1인가?</strong> <br />
문제에서 i와 j를 보면 [1,3], [2,4], [5,5] 등 <strong>배열에서의 인덱스+1</strong> 로써 표현되고 있다. <br />
합배열에 0,1,2,3,4 인덱스가 아닌 1,2,3,4,5라는 인덱스로 접근하기위해 sum[0]은 0인채로 두고, 1,2,3,4,5 인덱스 자리를 초기화해야 한다.</p>

<p>이제 sum배열의 1,2,3,4,5 인덱스에 주어진 수들을 더한 누적값으로 채워나가야한다. <br />
합배열을 sum, 주어진 수배열을 N이라고 했을 때, 합배열을 만드는 공식은 아래와 같다.</p>
<ul>
  <li><strong>sum[i] = sum[i-1] + N[i]</strong></li>
</ul>

<p>예를 들어 N=[5,4,3,2,1]이라고 한다면,</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>sum[1] = sum[0]+N[1] = 0+5 = 5
sum[2] = sum[1]+N[2] = 5+4 = 9
sum[3] = sum[2]+N[3] = 9+3 = 12
sum[4] = sum[3]+N[4] = 12+2 = 14
sum[5] = sum[4]+N[5] = 14+1 = 15
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같은 과정으로 합배열이 이루어짐을 알 수 있다. <br />
그러면 합배열을 만드는 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위의 합배열 공식을 그대로 적용하여 합배열인 sum = [5,9,12,14,15]를 만들 수 있다.</p>

<h4 id="i부터-j까지의-구간-합-구하기">i부터 j까지의 구간 합 구하기</h4>
<p>합배열을 만들었으니 i와 j를 입력받고 i번째 수부터 j번째 수까지의 합을 구해야 한다. <br />
i번째 수부터 j번째 수까지의 구간 합을 구하는 공식은 아래과 같다.</p>
<ul>
  <li>구간 합 : <strong>sum[j] - sum[i-1]</strong></li>
</ul>

<p>예를 들어 N=[5,4,3,2,1]이고, i가 1, j가 3이라면 5+4+3인 12를 구해야한다. 공식을 적용해보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>sum = [0,5,9,12,14,15]
sum[3]-sum[0] = 12-0 = 12
</pre></td></tr></tbody></table></code></pre></div></div>
<p>또 i가 2, j가 4일 때라면 4+3+2인 9를 구해야 한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sum[4]-sum[1] = 14-5= 9
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 합배열과 구간합이 연관되어 있음을 알 수 있다. <br />
구간 합을 구하는 공식을 코드로 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span> <span class="n">idx</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="n">j</span><span class="o">]-</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>i와 j의 입력횟수 m만큼 순회하며 i와 j를 입력받고 합배열에서 구간 합 공식을 이용해 구간 합을 구하였다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        
        <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span> <span class="n">idx</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="n">j</span><span class="o">]-</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>구간 합과 합배열의 활용법을 제대로 공부할 수 있었고, 구간 합을 빠르게 구해야 할때 쉽게 사용할 수 있다고 느꼈다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[구간 합 구하기 4]]></summary></entry></feed>