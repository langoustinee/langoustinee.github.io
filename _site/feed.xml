<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-01T23:55:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 프로그래머스(level-1) - 명예의 전당 (1)</title><link href="http://localhost:4000/java/147-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 명예의 전당 (1)" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-01T00:00:00+09:00</updated><id>http://localhost:4000/java/147-post</id><content type="html" xml:base="http://localhost:4000/java/147-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20230301_01.png" width="100%" /></center>
<left><img src="/assets/images/programmers/20230301_02.png" width="100%" /></left>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 명예의 전당(1) 문제의 경우 많은 분들이 <strong>우선순위 큐</strong>를 많이들 사용하는 것 같았는데, 필자는 우선순위 큐에 대한 공부가 부족하여 <strong>ArrayList</strong>를 활용하여 풀었다. <br />
일단은 ArrayList를 활용한 풀이 위주로 해설을 진행하고 추후 우선순위 큐를 학습한 후 다시 한번 풀어볼 예정이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>주어진 score의 길이가 일차가 되고, score의 원소, 즉 점수를 <strong>높은 점수순으로 k 만큼 누적해가며 최하위 점수</strong>를 구해내야 한다. <br />
여기서 ArrayList를 활용하는 원리는 간단하다.</p>

<ul>
  <li>k만큼의 일차까지는 명예의 전당에 순서대로 그대로 등록한다.</li>
  <li>명예의 전당 자리가 꽉 찬 이후의 점수의 경우, <strong>명예의 전당의 최하위 점수와 비교</strong>하여 명예의 전당에 등록한다.
    <ul>
      <li>이 때, 명예의 전당 점수는 <strong>오름차순으로 정렬</strong>을 하여 매일 발표되는 점수와 비교하여 명예의 전당에 등록한다.</li>
    </ul>
  </li>
  <li>일차(score.length) 별로 명예의 전당의 최하위 점수를 찾으면 된다.</li>
</ul>

<p><br /></p>

<p>말로 설명하면 좀 이해하기 어려울 수 있으니 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">glory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>매일 발표되는 명예의 전당의 최하위 점수를 담을 answer 배열과 매일 k만큼의 점수를 가지고 있을 ArrayList를 하나 선언하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">glory</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">glory</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">glory</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">glory</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">glory</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">glory</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">glory</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이제 매일 발표되는 점수들을 가지고 명예의 전당에 등록 여부를 가리면 된다. 그 과정은 다음과 같다.</p>

<ol>
  <li>명예의 전당 자리가 <strong>꽉 찰 때까지</strong>는 매일 발표되는 점수를 <strong>그대로 등록시키고 정렬</strong>한다.</li>
  <li>명예의 전당 자리가 <strong>꽉 찬 이후부터는</strong> 매일 발표되는 점수와 명예의 전당 최하위 점수와 비교하여 <strong>발표되는 점수가 더 클 경우 명예의 전당에 등록</strong>한 후 정렬한다.</li>
  <li>매일 명예의 전당의 최하위 점수를 answer 배열에 담는다.</li>
</ol>

<blockquote>
  <p><em>모든 경우마다 glory ArrayList를 정렬하는 이유는 최하위 점수를 알고 있어야 하기 때문이다.</em></p>
</blockquote>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">glory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">glory</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">glory</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">glory</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">glory</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">glory</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                    <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">glory</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">glory</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">score</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">300</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">300</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">70</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">500</span><span class="o">,</span> <span class="mi">1000</span><span class="o">};</span>
        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">k</span><span class="o">,</span><span class="n">score</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>우선순위 큐를 알고 있었다면 더 쉽게 풀 수 있었지만 ArrayList만으로도 쉽게 풀 수 있었던 문제였다. 추후 꼭 우선순위 큐를 활용하여 다시 풀어봐야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 명예의 전당 (1)]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 과일 장수</title><link href="http://localhost:4000/java/146-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 과일 장수" /><published>2023-02-28T00:00:00+09:00</published><updated>2023-02-28T00:00:00+09:00</updated><id>http://localhost:4000/java/146-post</id><content type="html" xml:base="http://localhost:4000/java/146-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20230228_01.png" width="100%" /></center>
<left><img src="/assets/images/programmers/20230228_02.png" width="35%" /></left>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 <code class="language-plaintext highlighter-rouge">과일 장수</code> 문제는 주어진 <strong>배열을 역순으로 그룹지어 접근</strong>하는 것이 핵심이다. <br />
한 마디로 배열을 잘 다룰 줄 알아야 한다는 것이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>처음엔 ArrayList를 활용하여 주어진 score 배열만큼 담은 다음 별도의 ArrayList에 add하고 remove하는 방식으로 접근하려 했으나 성능 이슈가 발생할 것 같아 그만두고 배열 자체를 잘 활용해보기로 하였다.</p>

<ul>
  <li>주어진 score 배열을 오름차순으로 정렬한다.
    <ul>
      <li>최대한 많은 이익을 내야 하기 때문에 <strong>오름차순으로 정렬하여 역순으로 큰 점수부터 접근</strong>하기 위함이다.</li>
    </ul>
  </li>
  <li>몇 박스나 담을 수 있는지를 구한다.
    <ul>
      <li>score 배열의 길이에서 m을 나눈 값이 된다.</li>
    </ul>
  </li>
  <li>박스 별로 <strong>[최소점수의 사과 * m]으로 최대 이익을 계산</strong>한다.
    <ul>
      <li>배열을 역순으로 접근하는데, m만큼 박스로 구분지어 최소점수를 구하고 [최소점수 * m] 연산을 통해 박스 당 최대이익을 구할 수 있다.</li>
    </ul>
  </li>
  <li>박스별로 구했던 최대이익을 모두 합한 값을 리턴한다.</li>
</ul>

<blockquote>
  <p><em>이 때, 내가 푼 풀이과정에서는 k를 굳이 고려하지 않아도 정답을 내는데 상관이 없어 보인다.</em></p>
</blockquote>

<p><br /></p>

<p>이제 아이디어대로 코드를 구현해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">score</span><span class="o">);</span>    
<span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">bucketLength</span> <span class="o">=</span> <span class="n">score</span><span class="o">.</span><span class="na">length</span> <span class="o">/</span> <span class="n">m</span><span class="o">;</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">buckets</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">bucketLength</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>먼저 입력으로 주어지는 score 배열을 오름차순으로 정렬한다. <br />
모든 박스의 최대이익을 담을 answer 변수를 선언한다. <br />
그리고 몇 박스나 담을 수 있는지를 구하여 박스당 이익을 담아둘 buckets 배열을 선언하고 초기화하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">-=</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="o">-</span><span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
        <span class="n">min</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">score</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
    <span class="o">}</span>
    <span class="n">buckets</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">*</span> <span class="n">m</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">bucket</span>  <span class="o">:</span> <span class="n">buckets</span><span class="o">)</span> <span class="n">answer</span> <span class="o">+=</span> <span class="n">bucket</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다음으로 score 배열을 거꾸로 역순으로 접근하는데 <strong>박스의 크기인 m만큼 나누어서</strong> 박스에 담아야 한다.</p>

<p>여기서 바깥쪽 for문에서는 <strong>i가 <code class="language-plaintext highlighter-rouge">score.length-1</code>부터 m-1이 될 때까지 m만큼 줄어들면서 반복</strong>하게 된다. <br />
그리고 안쪽 for문에서는 j가 i부터 시작해서 i-m만큼, 즉 <strong>역순으로 m개 만큼 추가로 반복</strong>한다.</p>

<p>이 때, 박스에 담긴 사과의 점수들 중 최소점수를 구해야 하기 때문에 Math 클래스의 min 메소드를 활용해서 박스 별 최소점수를 구한다.
안쪽 for문이 종료되는 순간 <strong>하나의 박스에 대한 연산이 끝나고 최소점수가 min에 담겨</strong>지게 된다.</p>

<p>그리고 안쪽 for문이 종료되면 앞서 선언해둔 <strong>bucket 배열에 <code class="language-plaintext highlighter-rouge">[최소점수 * m]</code> 을 통해 박스별 최대이익 값을 담으면 된다.</strong></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Math.min(10, score[j])</code>에서 10과 사과점수를 비교해 최소점수를 구하는 이유는 문제의 제한사항을 보면 사과의 점수 범위가 <code class="language-plaintext highlighter-rouge">3 ≤ k ≤ 9</code> 이기 때문이다.</p>
</blockquote>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">score</span><span class="o">);</span>    
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">bucketLength</span> <span class="o">=</span> <span class="n">score</span><span class="o">.</span><span class="na">length</span> <span class="o">/</span> <span class="n">m</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">buckets</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">bucketLength</span><span class="o">];</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">-=</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="o">-</span><span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
                <span class="n">min</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">score</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
            <span class="o">}</span>
            <span class="n">buckets</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">*</span> <span class="n">m</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">bucket</span>  <span class="o">:</span> <span class="n">buckets</span><span class="o">)</span> <span class="n">answer</span> <span class="o">+=</span> <span class="n">bucket</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>배열을 역순으로 접근한다는 생각은 쉽게 할 수 있었지만, m을 활용하여 큰 점수부터 작은 점수까지 박스별로 묶어서 접근하는 방식을 생각해내기가 어려웠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 과일 장수]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 가장 가까운 같은 글자</title><link href="http://localhost:4000/java/145-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 가장 가까운 같은 글자" /><published>2023-02-27T00:00:00+09:00</published><updated>2023-02-27T00:00:00+09:00</updated><id>http://localhost:4000/java/145-post</id><content type="html" xml:base="http://localhost:4000/java/145-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20230227_02.png" width="100%" /></center>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 <strong>HashMap을 활용</strong>한다면 간단하게 풀 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>주어진 s의 각 문자별로 HashMap에 존재여부를 검증하도록 구현하면 된다.</p>

<ul>
  <li>HashMap에 존재하지 않는 문자라면, HashMap에 현재 문자와 인덱스 값을 집어넣고 answer 배열에 -1을 삽입한다.</li>
  <li>HashMap에 존재하는 문자라면, <strong>가장 가까운 글자의 인덱스가 HashMap에 삽입</strong>되어 있을 테니 <code class="language-plaintext highlighter-rouge">[현재 문자의 인덱스 - 가장 가까운 문자의 인덱스]</code>의 결과를 answer 배열에 삽입한 후, HashMap의 현재 문자와 인덱스 값을 집어넣는다.</li>
</ul>

<p><br /></p>

<p>아이디어를 토대로 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
<span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>가장 가까운 글자의 위치를 담을 answer 배열을 만들고 s의 길이를 가지도록 초기화한다. <br />
그리고 s의 문자와 인덱스 값을 담을 HashMap을 생성하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="nc">Character</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
    <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
        <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
        <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">answer</span><span class="o">));</span>
<span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다음으로 s의 각 문자들을 순회하면서 HashMap을 활용하여 검증하고 삽입하면 된다.</p>

<ol>
  <li>먼저 s의 문자가 HashMap에 존재하지 않는다면, HashMap에 s의 문자와 인덱스 값을 삽입한 후 answer 배열에 -1을 삽입한다.</li>
  <li>만약 s의 문자가 HashMap에 존재하는 값이라면, answer 배열에 <code class="language-plaintext highlighter-rouge">[s의 인덱스 - 먼저 삽입된 s 문자의 인덱스(값)]</code> 을 통해 <strong>가장 가까운 글자와의 인덱스의 차</strong>를 구한다.</li>
  <li>이 후 HashMap에 현재 인덱스 위치를 삽입하여 최신화한다.</li>
</ol>

<blockquote>
  <p><em>여기서는 s의 각 문자를 <code class="language-plaintext highlighter-rouge">Character.toString(s.charAt(i));</code> 구문과 같이 String 타입으로 활용했지만 Character 타입을 바로 사용해도 무방하다.</em></p>
</blockquote>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="nc">Character</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">str</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
                <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">answer</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"banana"</span><span class="o">;</span>
        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>문자열의 인덱스 값이 고정되는 것이 아니라 중복 문자가 발생할 경우 최신화 해야 하기 때문에 HashMap을 활용하여 삽입된 키에 따른 값을 변경하는 메커니즘을 도입할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 가장 가까운 같은 글자]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 10813번 - 공 바꾸기</title><link href="http://localhost:4000/java/144-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 10813번 - 공 바꾸기" /><published>2023-02-27T00:00:00+09:00</published><updated>2023-02-27T00:00:00+09:00</updated><id>http://localhost:4000/java/144-post</id><content type="html" xml:base="http://localhost:4000/java/144-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10813.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>공 바꾸기 문제는 <strong>배열의 원소를 교체</strong>하는 메커니즘을 이용하면 쉽게 풀 수 있다. <br />
이번 문제는 배열 내에서 2개의 원소를 교체하는 방식을 구현하면 된다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>N개의 바구니에 M번만큼 공을 바꾸게 되는데, 바구니에는 이미 바구니와 같은 번호의 공이 들어가 있음을 윺의해야 한다.<br />
즉, 배열의 초기값을 [인덱스+1] 값으로 고정시켜놓아야 한다는 것이다. <br />
그리고 배열의 원소를 교체하면 되는데 i-1번째 값과 j-1번째 값을 변경하면 된다.</p>

<ul>
  <li>N개의 길이를 가지는 배열을 만들고 인덱스+1 값으로 초기화한다.
    <ul>
      <li><em>예를 들어 N이 5라고 하면 배열은 [1,2,3,4,5] 로 초기화되어야 한다.</em></li>
    </ul>
  </li>
  <li>M번 횟수만큼 배열의 원소를 교체(swap)한다.
    <ul>
      <li>배열의 (i-1)번째 값과 (j-1)번째 값을 변경한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>생각해낸 아이디어는 간단하다. 이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N과 M을 공백 기준으로 입력받게되니 StringTokenizer를 이용해 N과 M을 저장한다. <br />
그리고 N개의 크기를 가지는 int 배열을 만들고 [인덱스+1] 값을 설정하여 해당 배열을 초기화한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">idx</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">())</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">())</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">ball</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">ball</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다음으로 배열의 원소를 교체하기 위한 임시변수 temp를 하나 생성해두고 i와 j를 공백 기준으로 입력받아 저장한 뒤 <br />
배열의 <strong>(i-1)번째 값과 (j-1)번째 값에 대한 교체(swap) 작업</strong>을 진행하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">idx</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">())</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">())</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">ball</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">ball</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>배열의 값에 대해 Swap(교체) 작업을 하기 위한 임시변수를 만들어 활용할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/10813">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10813번 - 공 바꾸기]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-1) - 크기가 작은 부분 문자열</title><link href="http://localhost:4000/java/143-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-1) - 크기가 작은 부분 문자열" /><published>2023-02-27T00:00:00+09:00</published><updated>2023-02-27T00:00:00+09:00</updated><id>http://localhost:4000/java/143-post</id><content type="html" xml:base="http://localhost:4000/java/143-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20230227_01.png" width="100%" /></center>
<p><br /></p>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 <strong>부분 문자열</strong>을 잘 활용하는 것이 핵심이다. <br /></p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>t에서 p의 길이만큼 잘라가며 부분 문자열(result)을 만든다.</li>
  <li>위에서 만든 부분 문자열(result)가 p를 정수로 변환한 값보다 작거나 같은지를 확인하여 카운트를 세면 된다.</li>
</ul>

<p>바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>먼저 t에서 만든 부분문자열이 p보다 작거나 같은지를 검증하여 카운트를 증가시킬 변수 answer를 초기화한다. <br />
또한, p의 길이를 len이라는 변수에 저장하여 사용한다.<br />
t에서 len만큼 잘라 만들 부분 문자열을 담을 result 변수를 만든다. <br />
마지막으로 p를 정수로 담아 result와 비교하기 위한 target 변수를 만들면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="n">len</span><span class="o">));</span>
        <span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이제 t를 순회하면서 <strong>p의 길이만큼 부분 문자열로 잘라서 정수로 변환한 값인 result과 p를 정수로 변환한 값인 target을 비교</strong>해가며 카운트를 세면 된다.</p>

<blockquote>
  <p>여기서 t를 가지고 부분문자열을 만들 때, <strong>i+len번째 문자열까지만 부분 문자열을 만들 수 있고 i+len+1번째 문자부터는 부분 문자열을 만들 수 없다는 점을 고려</strong>하여 t를 순회하면서 부분문자열을 만들도록 해야 한다.</p>
</blockquote>

<p>위와 같은 코드를 테스트케이스로 돌려보니 정상적으로 원하는 리턴값을 출력할 수 있었다. <br />
그래서 바로 코드 제출을 했는데 일부 테스트케이스에서 런타임 에러가 발생하게 되었다.</p>

<p><br /></p>

<h4 id="런타임-에러-해결">런타임 에러 해결</h4>
<p>런타임 에러를 해결하기 위해 문제의 제한사항을 제대로 살피지 않은 것 같아 제한사항을 살펴보기로 하였다. 문제의 제한사항을 보면 아래와 같다.</p>

<ul>
  <li>1 ≤ p의 길이 ≤ 18</li>
  <li>p의 길이 ≤ t의 길이 ≤ 10,000</li>
  <li>t와 p는 숫자로만 이루어진 문자열이며, 0으로 시작하지 않습니다.</li>
</ul>

<p>여기서 p의 길이와 t의 길이는 10000자 이하로 이루어지기 때문에 <strong>int 값의 범위를 잘 고려했는지 확인</strong>해야 한다.</p>

<p>int는 최대 10자리 수까지 밖에 표현할 수 없다. 반면에 <strong>Long은 19자리까지 가능하기 때문에 <code class="language-plaintext highlighter-rouge">Integer.parseInt()</code>를 하는 과정에서 10자리 수를 넘어가는 경우에는 위처럼 런타임 에러가 발생</strong>하게 되었던 것이다. 그래서 <code class="language-plaintext highlighter-rouge">Integer.parseInt()</code> 구문을 <code class="language-plaintext highlighter-rouge">Long.parseLong()</code>메서드로 변환해주도록 수정하여 제출하니 정상적으로 모든 테스트케이스를 통과할 수 있었다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">,</span> <span class="nc">String</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">target</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="n">len</span><span class="o">));</span>
                <span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">t</span> <span class="o">=</span> <span class="s">"500220839878"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">p</span> <span class="o">=</span> <span class="s">"7"</span><span class="o">;</span>
        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>부분 문자열을 만드는 과정에서 <code class="language-plaintext highlighter-rouge">java.lang.StringIndexOutOfBoundsException</code> 예외가 발생할 수 있는 경우를 고려해야 했기에 i+len 번째의 인덱스까지만 부분문자열을 만들 수 있었다.</li>
  <li>int와 Long 타입의 제공되는 범위를 어느정도 인지하고 있어야 문제를 푸는 시간을 단축할 수 있음을 다시 한번 느꼈다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 크기가 작은 부분 문자열]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-3) 10810번 - 공 넣기</title><link href="http://localhost:4000/java/142-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-3) 10810번 - 공 넣기" /><published>2023-02-24T00:00:00+09:00</published><updated>2023-02-24T00:00:00+09:00</updated><id>http://localhost:4000/java/142-post</id><content type="html" xml:base="http://localhost:4000/java/142-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10810.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>공 넣기문제는 정해진 배열에 값을 넣기만 하면 되는 간단한 문제이다. <br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>N개의 바구니에 M번만큼 공을 집어 넣을 수 있고, 연속된 바구니에 같은 번호가 적힌 공을 집어넣어야 한다. <br />
예제 테스트케이스처럼 N개의 바구니가 준비되어 있고, i부터 j번째 바구니까지 k번호가 적힌 공을 M번만큼 집어넣으면 된다. <br />
이 솔루션을 <strong>1차원 배열</strong>로 풀어내면 된다.</p>

<ul>
  <li>N개의 길이를 가지는 배열을 준비한다.</li>
  <li>M번 횟수만큼 배열에 값을 설정한다.
    <ul>
      <li>배열의 (i-1)번째부터 (j-1)번째 인덱스까지 순회하면서 k 값을 삽입하면 된다.</li>
      <li><strong>바구니는 1번째 부터 시작하지만 배열의 인덱스는 0부터 시작</strong>하기 때문이다.</li>
    </ul>
  </li>
</ul>

<p>이제 코드를 작성해보자.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>먼저 StringTokenizer를 통해 공백 기준으로 N과 M을 입력받고 N개의 크기를 가지는 정수 배열을 초기화하자.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">idx</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">r</span><span class="o">&lt;</span><span class="n">j</span><span class="o">;</span> <span class="n">r</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">ball</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">ball</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다음으로는 실제로 M번 횟수만큼 공을 집어넣는 로직을 구현한 내용은 다음과 같다. <br /></p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">i j k</code> 형식으로 입력이 들어오기 때문에 StringTokenizer로 공백 기준으로 i와 j, k라는 값을 변수에 저장한다.</li>
  <li>중첩 for문을 통해 arr 배열에 <strong>(i-1)번째 인덱스부터 (j-1)번째 인덱스까지 k 값을 삽입</strong>한다.</li>
  <li>arr 배열에 담긴 원소들을 공백으로 구분하여 한줄로 출력하면 된다.</li>
</ol>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">idx</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">r</span><span class="o">&lt;</span><span class="n">j</span><span class="o">;</span> <span class="n">r</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">ball</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">ball</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
               
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>1차원 배열에 값이 삽입될 때 기존의 값을 덮어쓰기 때문에 기존에 공이 들어간 경우 새로운 공은 넣을 수 있었다.</li>
  <li>최근 카카오 클라우드 스쿨 교육으로 인해 코딩테스트 공부를 근 2달간 이런저런 핑계로 못하고 있었는데 다시 다잡고 풀어나가려 한다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/10810">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10810번 - 공 넣기]]></summary></entry><entry><title type="html">[Java] 백준(실버-2) 1654번 - 랜선 자르기</title><link href="http://localhost:4000/java/141-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-2) 1654번 - 랜선 자르기" /><published>2022-12-11T00:00:00+09:00</published><updated>2022-12-11T00:00:00+09:00</updated><id>http://localhost:4000/java/141-post</id><content type="html" xml:base="http://localhost:4000/java/141-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1654.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 이분 탐색을 적절히 응용할 줄 알아야 한다.<br />
먼저 문제의 패턴부터 살펴보자. 먼저 K개의 랜선을 동일한 길이의 N개의 랜선으로 잘라 만들어야 하는데, 이 때 최대로 가질 수 있는 길이를 구해야 한다. <br /></p>

<p>예제와 같이 K=4, N=11이라고 한다면 4개의 랜선을 11개로 만들 수 있을 때 최대로 가질 수 있는 길이를 찾아보자.<br /></p>

<ol>
  <li>
    <p>만약 198의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 198씩 4개, <br />
743 길이를 가진 랜선은 198씩 3개, <br />
457 길이를 가진 랜선은 198씩 2개, <br />
539 길이를 가진 랜선은 198씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 198</strong>이다.</p>
  </li>
  <li>
    <p>만약 199의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 199씩 4개, <br />
743 길이를 가진 랜선은 199씩 3개, <br />
457 길이를 가진 랜선은 199씩 2개, <br />
539 길이를 가진 랜선은 199씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 199</strong>이다.</p>
  </li>
  <li>
    <p>만약 201의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 201씩 3개, <br />
743 길이를 가진 랜선은 201씩 3개, <br />
457 길이를 가진 랜선은 201씩 2개, <br />
539 길이를 가진 랜선은 201씩 2개로 총 <strong>10개의 랜선을 가지게되어 11개를 만들 수가 없다.</strong></p>
  </li>
  <li>
    <p>만약 200의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 200씩 4개, <br />
743 길이를 가진 랜선은 200씩 3개, <br />
457 길이를 가진 랜선은 200씩 2개, <br />
539 길이를 가진 랜선은 200씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 200</strong>이다..</p>
  </li>
</ol>

<p>결국 <strong>11개의 랜선을 가질 때 200의 길이를 가져야 최대 길이가 됨</strong>을 알 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>이제 문재는 이분 탐색을 이용하여 최대로 가질 수 있는 길이를 어떻게 구할 수 있을까? <br />
일반적으로 이분 탐색은 <strong>배열에서 원하는 인덱스를 찾기 위해서 사용</strong>하였다. 그런데 이 문제에서는 특정 인덱스가 아니라 문제 그대로 <strong>길이</strong>를 구해야 한다는 것이다.</p>

<ul>
  <li>테스트케이스의 입력 범위는 int형의 상한 범위까지 주어질 수 있기 때문에 이분 탐색에 필요한 데이터들은 모두 <strong>long형으로 선언</strong>해야 한다.</li>
  <li>배열의 인덱스를 찾는 것이 아니기에 별도로 배열을 정렬할 필요는 없다.</li>
  <li>0부터 입력받은 랜선 중 가장 긴 길이를 가진 수만큼 이분 탐색을 진행한다.
    <ul>
      <li>mid(중간 길이) 값을 구한다.
        <ul>
          <li>현재 탐색 범위에서 최소길이(min)와 최대길이(max)의 합을 2로 나누어 구한다. <code class="language-plaintext highlighter-rouge">mid = (min + max) / 2</code></li>
          <li>mid(중간 길이) 값이 0이 될 경우를 고려하여 <strong>min 값을 0이 아닌 1로 선언</strong>한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>이분 탐색을 통해 얻어낸 값에 -1은 최대길이가 된다.</li>
</ul>

<p><br /></p>

<p>아이디어는 좀 복잡해 보이는데 작성한 코드를 보며 하나씩 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

<span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">K</span><span class="o">];</span>
<span class="kt">long</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>

<span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>K와 N을 입력받고 K개의 랜선 길이를 담을 배열을 선언한다. <br />
그리고 K개의 랜선중 가장 긴 길이를 저장하기 위한 long형 max 변수를 선언하자. <br />
다음으로 주어진 랜선의 길이들을 배열에 저장해가며, 가장 긴 랜선의 길이를 max에 저장한다. <br />
마지막으로 이분 탐색에서 이용할 최소 길이를 가지는 min 변수와 중간 길이를 가지게 될 mid 변수를 long형으로 선언하고 각각 1, 0으로 초기화한다.</p>

<blockquote>
  <p>max, min, mid를 long형으로 초기화한 이유는? <br />
문제의 요구사항을 보면 <strong>랜선의 길이는 2^31-1보다 작거나 같은 자연수</strong>라고 알려주고 있다. int형으로는 범위 초과가 발생할 수 있기 때문에 안전하게 long형으로 선언하여 사용하기 위함이다.</p>
</blockquote>

<blockquote>
  <p>min의 초기값을 1로 설정한 이유는? <br />
<strong>by zero 에러를 방지하기 위해 min을 1로 설정</strong>하였다. 예를 들어 K가 1이고, N이 1이며 입력받은 랜선의 길이 1이라고 한다면 min이 0이되고 max가 1이 되면서 중간 길이 값이 되는 mid가 0이 나오기에 연산을 수행할 때 0으로 나눗셈 연산이 되버리는 문제가 발생할 수 있다. (java.lang.ArithmeticException:/by zero 예외 발생)</p>
</blockquote>

<p>마지막으로 이분 탐색 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="n">min</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">max</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 1</span>
    <span class="kt">int</span> <span class="n">lengthCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 2</span>

    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">lengthCnt</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">lengthCnt</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">/</span> <span class="n">mid</span><span class="o">;</span> <span class="c1">// 3</span>
    <span class="o">}</span>

    <span class="k">if</span><span class="o">(</span><span class="n">lengthCnt</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 4</span>
    <span class="k">else</span> <span class="n">min</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 5 </span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">min</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>최소 길이부터 최대 길이까지 while문을 통해 반복하는데 안에서 수행할 내용은 다음과 같다. <br /></p>
<ol>
  <li>먼저 중간 값을 구한다.</li>
  <li>랜선을 잘라서 개수를 비교할 lengthCnt 변수를 선언한다.</li>
  <li>중간 길이인 mid로 비교해야 하기 때문에 각 반복마다 for문을 통해 랜선마다 중간 길이로 잘라서 개수를 구한다.</li>
  <li>upper bound 형식을 적용한다. <br />
 4.1. 중간 길이(mid)로 잘랐을 때 개수가 만들고자 하는 랜선의 개수보다 작다면(lengthCnt &lt; N) 원하는 개수보다 잘라진 랜선들이 적다는 것이다. 즉, <strong>하나의 잘라진 랜선이 너무 길기 때문에 더 짧게 잘라야 한다는 것을 의미한다. 그래서 자르고자 하는 길이를 줄이기 위해 최대 길이를 줄인다.</strong> <br />
 4.2. 또한 중간길이(mid)로 잘랐을 때 개수가 만들고자 하는 랜선의 개수보다 크거나 같다면(lengthCnt &gt; N) 원하는 개수보다 잘라진 랜선들이 많다는 것이다. 결국 <strong>잘라진 랜선이 너무 짧기에 더 길게 만들 수 있다는 것을 의미한다. 그래서 자르고자 하는 길이를 늘려야 하므로 최소 길이를 늘린다.</strong></li>
</ol>

<blockquote>
  <p>Upper Bound란? <br />
Upper Bound는 찾고자 하는 값보다 큰 값이 처음으로 나타나는 위치이다. 결국 상한값을 찾는 것인데, 찾고자 하는 특정 값을 초과하는 ‘첫 위치’를 반환한다.</p>
</blockquote>

<p>위 과정을 통해서 랜선의 개수가 중복될 때 최대 길이를 찾아야 하므로 <strong>Upper Bound를 통해 얻어진 값에서 -1을 해주면 최대 길이</strong>가 된다.</p>

<blockquote>
  <p>upper bound를 통해 얻어진 값에서 -1을 하는 이유? <br />
예를 들어 arr=[1,2,2,2,3] 배열에서 찾을 key가 2라면 2를 초과하는 처음 위치는 3인데 이는 arr[4], 즉 index로는 4이다. 문제에서는 <strong>중복되는 랜선 개수들 중 최대길이를 찾아야 했으므로 중복되는 랜선 개수들 중 가장 끝값(Upper Bound-1)이 최대길이가 되기 때문</strong>이다.</p>
</blockquote>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">K</span><span class="o">];</span>
        <span class="kt">long</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(</span><span class="n">min</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">max</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">length</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">/</span> <span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">if</span><span class="o">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">else</span> <span class="n">min</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">min</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>이분 탐색을 이용해 찾고자 하는 값의 인덱스를 구하는 방식이 아닌, 랜선의 길이 자체를 구해야 했기에 아이디어를 생각하는데 어려움이 있었다.</li>
  <li>무턱대고 int형으로 문제를 풀었다가 틀리고, 연산 과정에서 중간값이 0이 되면서 틀리는 등 문제 풀이를 위한 알고리즘 구현도 중요하지만 알고리즘에 활용할 자료형의 범위도 충분히 고려하고 구현해야 한다고 느꼈다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1654">문제 링크</a>에서 참조바랍니다.</li>
</ul>

<h3 id="참고">참고</h3>
<ul>
  <li><a href="https://st-lab.tistory.com/269">ST_님의 백준 1654번 문제 풀이 포스팅</a></li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1654번 - 랜선 자르기]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-3) 1085번 - 직사각형에서 탈출</title><link href="http://localhost:4000/java/140-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-3) 1085번 - 직사각형에서 탈출" /><published>2022-12-10T00:00:00+09:00</published><updated>2022-12-10T00:00:00+09:00</updated><id>http://localhost:4000/java/140-post</id><content type="html" xml:base="http://localhost:4000/java/140-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1085-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/1085-attach02.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 따로 특정한 알고리즘을 활용할 필요가 없을 정도로 쉽다. <br /></p>

<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcQ81rt%2FbtqDKoXSzVB%2FcPaewKxgCKrMnSsSY7FbK1%2Fimg.png" width="50%" /></p>

<p>위 이미지와 같이 현재 한수의 위치 (X,Y)에서 직사각형을 벗어나기 위한 최소거리를 구하면 된다. <br />
상, 하, 좌, 우로 움직여 직사각형을 벗어날 수 있는데, 결국 <strong>X, W-X, Y, H-Y 중에서 가장 작은 수가 최소거리가 된다.</strong></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>X, Y, W, H 를 입력받는다.</li>
  <li>직사각형에서 벗어날 수 있는 상(H-Y), 하(Y), 좌(X), 우(W-X) 중에서 가장 최소값을 구한다.</li>
</ul>

<p>아이디어를 이해하기는 쉬우니 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">X</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">Y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">W</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">H</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>공백을 기준으로 X, Y, W, H를 입력아 변수에 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">min_X</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">X</span><span class="o">,</span> <span class="no">W</span><span class="o">-</span><span class="no">X</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">min_Y</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">Y</span><span class="o">,</span> <span class="no">H</span><span class="o">-</span><span class="no">Y</span><span class="o">);</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min_X</span><span class="o">,</span> <span class="n">min_Y</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위에서 언급한 상(<strong>H-Y</strong>), 하(<strong>Y</strong>), 좌(<strong>X</strong>), 우(<strong>W-X</strong>) 값들을 비교하여 가장 최소가 되는 수가 최소거리가 되기에 최소거리를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">X</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">Y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">W</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">H</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">min_X</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">X</span><span class="o">,</span> <span class="no">W</span><span class="o">-</span><span class="no">X</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">min_Y</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">Y</span><span class="o">,</span> <span class="no">H</span><span class="o">-</span><span class="no">Y</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min_X</span><span class="o">,</span> <span class="n">min_Y</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>


        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>특별한 알고리즘 없이 단순 구현만으로 해결할 수 있는 문제였다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1085">문제 링크</a>에서 참조바랍니다.</li>
  <li>좌표 <a href="https://st-lab.tistory.com/86">이미지 출처</a></li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1085번 - 직사각형에서 탈출]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 11050번 - 이항 계수 1</title><link href="http://localhost:4000/java/139-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 11050번 - 이항 계수 1" /><published>2022-12-07T00:00:00+09:00</published><updated>2022-12-07T00:00:00+09:00</updated><id>http://localhost:4000/java/139-post</id><content type="html" xml:base="http://localhost:4000/java/139-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11050.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제 풀이에 앞서 이항 계수가 무엇인지 알아보자. <br /></p>

<blockquote>
  <p><strong>이항계수</strong>란? <br />
위키백과를 보면 조합론에서 이항 계수(inomial coefficient)는 이항식을 이항 정리로 전개했을 때 각 항의 계수이며, 주어진 크기의 (순서 없는) 조합의 가짓수라고 한다.</p>
</blockquote>

<p>전체 집합에서 원소개의 개수 n에 대해 k개의 아이템을 뽑는 이항계수(조합의 수)는 다음과 같다.
<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/af575850eec19a2efa2ac71d38c3a4c7af88bf5d" width="300px" /></p>

<p>이항식 <code class="language-plaintext highlighter-rouge">(x+y)^2</code> 을 이항정리로 전개한다면 <code class="language-plaintext highlighter-rouge">(x+y)^2 = x^2 + 2xy + y^2</code> 인데, 이 때의 각 항의 계수인 <strong>[1,2,1]</strong>이 이항계수이다.</p>

<p>그리고 이항계수는 조합을 통해 구할 수 있는데, 단순하게 위 공식을 이용하면 5개의 집합 중에서 2개를 순서없이 고르는 이항계수는 <code class="language-plaintext highlighter-rouge">5! / (2! * 3!)</code>이며 5!는 120이고, 2!는 2, 3!는 6이다. 120/12가 되어 답은 10이된다.</p>

<p><br /></p>

<p><strong>파스칼의 삼각형</strong> <br />
이항계수를 구하는 방법 중에 <strong>파스칼의 삼각형</strong>이 있다. 파스칼의 삼각형은 아래의 그림과 같은 관계가 성립한다.</p>

<p><br /></p>
<center><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbtKRHE%2FbtqDEG4glgs%2FvVU4LKVx4pY5KurS70E3Dk%2Fimg.png" width="80%" /></center>
<center><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbsc0El%2FbtqDEY4Gn0z%2FVym2MLS3hKxplUV9vMWj81%2Fimg.png" width="30%" /></center>
<p><br /></p>

<p><br /></p>

<h4 id="아이디어-도출---팩토리얼">아이디어 도출 - 팩토리얼</h4>
<ul>
  <li>특별한 아이디어 없이 위에서 본 점화식을 그대로 팩토리얼로 구현하면 된다.</li>
</ul>

<p>바로 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">K</span><span class="o">)</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="no">K</span><span class="o">))</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>N과 K를 입력받고 이항계수 공식대로 <code class="language-plaintext highlighter-rouge">N! / K! * (N-K)!</code> 를 factorial 함수로 표현한다. <br />
factorial 함수 코드의 내용은 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">factorial</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">return</span> <span class="no">N</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>팩토리얼을 사용한 무난한 이항계수 알고리즘이다. <br />
팩토리얼을 통해 구현할 떄 주의할 점은 factorial 함수가 <strong>‘0!’ 일 경우 1을 반환</strong>하도록 해야한다.</p>

<p>팩토리얼을 구현하여 제출하면 정답을 낼 수는 있지만 문제에서 요구하는 N과 K의 범위가 작기 때문이라고 생각이 들었다. <br />
팩토리얼을 통한 풀이는 기본적으로 시간복잡도가 크기에 수의 범위가 작은 이번 문제에서나 가능한 접근방식인 것 같다.</p>

<h4 id="아이디어-도출---재귀">아이디어 도출 - 재귀</h4>
<ul>
  <li>이항계수 알고리즘을 점화식 그대로 재귀로 구현한다.</li>
</ul>

<p>바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>binomial 함수에 N과 K를 주어 호출한다. <br />
binomial 함수의 내용은 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">K</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="no">N</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
	    <span class="k">return</span> <span class="nf">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>재귀로 구현한 방식인데 이 방식의 경우 N의 범위가 커질수록 <strong>O(n!)의 시간복잡도를 가지기에 제한시간이 빠듯하다면 시간초과가 발생할 가능성이 매우 높다.</strong> <br />
그래서 재귀를 사용하여 <strong>부분 문제</strong>를 풀 경우 중복되는 부분 문제가 나오더라도 다시 풀게 되기에 효율적이지 않다.</p>

<blockquote>
  <p><strong>메모이제이션(memoization)</strong>이란? <br />
메모이제이션은 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이라고 한다. - 위키백과</p>
</blockquote>

<h4 id="아아디어-도출----동적계획법-풀이dp">아아디어 도출 -  동적계획법 풀이(DP)</h4>
<p>파스칼의 삼각형을 통해, 이항계수를 구하는 알고리즘은 <strong>중복 부분문제와 최적 부분구조를 만족하므로 동적계획법으로 이항계수를 구할 수 있다.</strong> <br />
그렇게 재귀로 풀었던 알고리즘에 동적계획법을 이용한다.</p>
<ul>
  <li>메모이제이셔을 할 배열을 초기에 선언한다.</li>
  <li>재귀로 각 부분 문제들에 접근하여 문제가 풀리면 메모이제이션을 할 배열에 저장해 나가도록 구현한다.</li>
</ul>

<p><br /></p>

<p>재귀 풀이 방식에 동적계획법을 코드로 적용해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="no">DP</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>main 메서드 바깥에, 즉 전역으로 2차원 배열 DP를 선언하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">// main 메서드</span>
<span class="no">DP</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">K</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 main 메서드 안에서 DP 배열을 초기화한후 binomial_coefficient 함수에 N과 K를 주어 호출한다. <br />
binomial_coefficient 함수의 내용은 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial_coefficient</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">];</span> <span class="c1">// recycle</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">K</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="no">N</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> 
    <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>첫번째 if문이 중요한데, 이미 풀었던 부분 문제일 경우 값을 재활용하기 위해 해당 배열의 값을 return해야 한다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<h4 id="작성코드---팩토리얼">작성코드 - 팩토리얼</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">K</span><span class="o">)</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="no">K</span><span class="o">))</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">factorial</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="no">N</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="작성코드---재귀">작성코드 - 재귀</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
	    <span class="k">return</span> <span class="nf">binomial</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="작성코드---동적계획법dp">작성코드 - 동적계획법(DP)</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="no">DP</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="no">DP</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">K</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial_coefficient</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">];</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">K</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="no">N</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		<span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="no">K</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>이항계수에 대해서 알아보고 공부할 수 있었으며, nCr 공식을 통해 쉽게 문제를 풀 수 있었다.</li>
  <li>이항계수를 구하는 점화식을 통해 팩토리얼로 푸는 방식, 재귀로 푸는 방식을 생각해낼 수 있었지만 이는 주어진 N,K의 범위가 매우 작기에 가능한 방법이었고, 성능을 향상시키기 위해선 동적계획법(DP)를 통해 중복되는 부분 문제들을 넘기고 풀도록 구현할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/11050">문제 링크</a>에서 참조바랍니다.</li>
  <li>파스칼의 삼각형 첨부 <a href="https://rh-tn.tistory.com/32">이미지 출처</a></li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[11050번 - 이항 계수 1]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 11866번 - 요세푸스 문제 0</title><link href="http://localhost:4000/java/138-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 11866번 - 요세푸스 문제 0" /><published>2022-12-06T00:00:00+09:00</published><updated>2022-12-06T00:00:00+09:00</updated><id>http://localhost:4000/java/138-post</id><content type="html" xml:base="http://localhost:4000/java/138-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11866.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>1부터 N까지 나열된 수에서 K번째 수마다 차례대로 뽑아낸 수열을 출력하면 되는데, <strong>큐</strong>를 이용하면 쉽게 풀 수 있다. <br />
예제를 살펴보면 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>N=7, K=3
[1,2,[3],4,5,6,7] -&gt; [3]
[1,2,4,5,[6],7] -&gt; [3,6]
[1,[2],4,5,7] -&gt; [3,6,2]
[1,4,5,[7]] -&gt; [3,6,2,7]
[1,4,[5]] -&gt; [3,6,2,7,5]
[[1],4] -&gt; [3,6,2,7,5,1]
[[4]] -&gt; [3,6,2,7,5,1,4]
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 삭제된 현재 위치에서 K번째 수를 찾아가고, 그 수를 삭제하면서 큐의 원소가 남지 않을 때까지 무한 반복을 하면 된다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>1부터 N까지의 수가 저장된 큐를 순회하며 K번째 수가 되기 전(K-1번 만큼)까지 큐에서 <strong>꺼내서(poll)</strong> 맨 뒤로 <strong>넣는다.(offer)</strong></li>
  <li>K번째 수를 꺼내서 출력한다.</li>
</ul>

<p><br /></p>

<p>간단하게 정리하면 K-1번 만큼 큐에서 꺼내고 넣다가, K번째에는 꺼내서 출력만 하면 된다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N과 K를 입력받고 하나의 큐를 선언하고 1부터 N까지의 수를 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;"</span><span class="o">);</span>

<span class="k">while</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
<span class="o">}</span>

<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">"&gt;"</span><span class="o">);</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>문제 출력 요구사항을 보면 수열 혈태인 <code class="language-plaintext highlighter-rouge">&lt;1,2,3&gt;</code> 형태로 출력해야 하기에 StringBuilder를 이용한다. <br />
큐의 <strong>원소가 1개 남을 때까지</strong> K-1번 만큼 큐에서 추출하고(poll) 맨 뒤에 삽입(offer)하다가 K번째 수가 되면 추출(poll)하여 StringBuilder에 넣는다. <br />
그렇게 while문 종료후 마지막 남은 1개의 원소를 추출(poll)하고 <code class="language-plaintext highlighter-rouge">&gt;</code>를 넣어 요구 출력사항을 만족시키면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;"</span><span class="o">);</span>

        <span class="k">while</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">"&gt;"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>단순히 큐의 선입선출(FIFO) 성질을 이용만 하는 것이 아니라 추출하고 삽입하는 과정에서 문제의 요구사항을 어떻게 충족시킬 수 있을지 고민하여 알고리즘 아이디어를 도출할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/11866">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[11866번 - 요세푸스 문제 0]]></summary></entry></feed>