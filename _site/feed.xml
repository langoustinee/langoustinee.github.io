<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-17T11:14:31+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 백준(실버-5) 11726번 - 2×n 타일링</title><link href="http://localhost:4000/java/226-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 11726번 - 2×n 타일링" /><published>2023-07-17T00:00:00+09:00</published><updated>2023-07-17T00:00:00+09:00</updated><id>http://localhost:4000/java/226-post</id><content type="html" xml:base="http://localhost:4000/java/226-post/"><![CDATA[<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이 문제는 <strong>동적 계획법(DP)</strong>를 이용해 푼다면 쉽게 풀 수 있는 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>주어지는 N을 통해 순서대로 패턴을 그려보면 어떤 유형으로 1X2, 2X1의 직사각형을 채울 수 있는지 알 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="no">N</span> <span class="o">=</span> <span class="mi">1</span>
<span class="mi">2</span><span class="no">X1</span> <span class="n">직사각형</span> <span class="mi">1</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">가지</span>
<span class="n">총</span> <span class="mi">1</span><span class="n">가지의</span> <span class="n">방법</span>

<span class="no">N</span> <span class="o">=</span> <span class="mi">2</span>
<span class="mi">1</span><span class="no">X2</span> <span class="n">직시각형</span> <span class="mi">2</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">가지</span>
<span class="mi">2</span><span class="no">X1</span> <span class="n">직사각형</span> <span class="mi">2</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">가지</span>
<span class="n">총</span> <span class="mi">2</span><span class="n">가지의</span> <span class="n">방법</span>

<span class="no">N</span> <span class="o">=</span> <span class="mi">3</span>
<span class="mi">1</span><span class="no">X2</span> <span class="n">직사각형</span> <span class="mi">3</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">가지</span>
<span class="mi">1</span><span class="no">X2</span> <span class="n">직사각형</span> <span class="mi">1</span><span class="n">개</span><span class="o">,</span> <span class="mi">2</span><span class="no">X1</span> <span class="n">직사각형</span> <span class="mi">1</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="n">가지</span>
<span class="n">총</span> <span class="mi">3</span><span class="n">가지의</span> <span class="n">방법</span>

<span class="no">N</span> <span class="o">=</span> <span class="mi">4</span>
<span class="mi">1</span><span class="no">X2</span> <span class="n">직사각형</span> <span class="mi">4</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">가지</span>
<span class="mi">2</span><span class="no">X1</span> <span class="n">직사각형</span> <span class="mi">4</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">가지</span>
<span class="mi">1</span><span class="no">X2</span> <span class="n">직사각형</span> <span class="mi">2</span><span class="n">개</span><span class="o">,</span> <span class="mi">2</span><span class="no">X1</span> <span class="n">직사각형</span> <span class="mi">2</span><span class="n">개</span> <span class="n">필요</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="n">가지</span>
<span class="n">총</span> <span class="mi">5</span><span class="n">가지의</span> <span class="n">방법</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>자 N을 4까지만 대입해보면 두가지의 직사각형으로 만들어낼 수 있는 가짓수의 패턴이 <strong>피보나치 수열과 동일</strong>함을 알 수 있다. <code class="language-plaintext highlighter-rouge">N=5</code>일 때는 당연하게도 8가지의 방법이 필요할 것이다.</p>

<p>그렇다면 피보나치 수열에서 N번째 수를 구하는 것과 동일한 로직으로 문제를 풀면 간단하다. 이를 위한 아이디어는 다음과 같다.</p>

<ul>
  <li>DP를 이용해 피보나치 수열의 N번째 수를 피보나치 함수로 구현한다.</li>
  <li>DP 테이블을 별도로 두고 이미 구한 가짓수라면 바로 반환(메모이제이션)할 수 있도록 구성한다.</li>
</ul>

<blockquote>
  <p>이때, 유의해야 할 점은 문제의 요구사항대로 <code class="language-plaintext highlighter-rouge">방법의 수를 10,007로 나눈 나머지</code>를 출력해야 하므로 <strong>DP 테이블에 가짓수를 갱신할 때 10,007을 나눈 나머지를 저장</strong>해야 한다.</p>
</blockquote>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="no">D</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="no">D</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="no">D</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 2*1 일때는 1가지의 방법이 있으며, 2*2일 때는 2가지의 방법이 있다.</span>
        <span class="no">D</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="no">D</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fibo</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">2</span><span class="o">))</span> <span class="o">%</span> <span class="mi">10007</span> <span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/11726">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[11726번 - 2×n 타일링]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 11723번 - 집합</title><link href="http://localhost:4000/java/225-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 11723번 - 집합" /><published>2023-07-15T00:00:00+09:00</published><updated>2023-07-15T00:00:00+09:00</updated><id>http://localhost:4000/java/225-post</id><content type="html" xml:base="http://localhost:4000/java/225-post/"><![CDATA[<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이번 문제는 문제의 요구사항대로 <strong>구현</strong>만 잘 하면 풀 수 있는 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>연산마다 문자열이 주어지는데, 공백을 기준으로 첫번째 문자열은 명령, 두번째 문자열은 명령을 수행할 수가 된다.
명령이 add, remove, check, toggle, all, empty 일 때마다 다른 연산을 수행해야 하는데, 그 중 check 명령일 때만 출력을 수행한다.</p>

<p>명령마다 수행해야 할 내용은 다음과 같다. 참고로 필자는 문제에서 말하는 <strong>공집합 S를 ArrayList로 정의</strong>하고 풀었다.</p>

<blockquote>
  <ol>
    <li>add: 리스트 S에 x가 존재하지 않는다면, x를 삽입한다.</li>
    <li>remove: 리스트 S에 x가 존재한다면, x를 제거한다.</li>
    <li>check: 리스트 S에 x가 존재한다면 “1”을, 아니라면 “0”을 출력한다.</li>
    <li>toggle: 리스트 S에 x가 존재한다면, x를 제거하고, 아니라면 x를 삽입한다.</li>
    <li>all: 리스트 S를 비운 뒤, S의 원소를 1~20까지의 수로 다시 채운다.</li>
    <li>empty: 리스트 S를 비운다.</li>
  </ol>
</blockquote>

<p>ArrayList를 공집합으로 두고 연산을 수행하면 되니 간단하다.</p>

<blockquote>
  <p>다만, 유의할 점은 모든 명령이 “명령 x”로 들어오는게 아니다. <code class="language-plaintext highlighter-rouge">all</code>이나 <code class="language-plaintext highlighter-rouge">empty</code>의 경우 x가 없는 공백없는 문자열로 들어오게 되니 x가 항상 입력으로 주어지는 것으로 판단하면 안된다.</p>
</blockquote>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    



    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="no">S</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            
            <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>

            <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            
            <span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
            <span class="o">}</span>
            
            <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>

                <span class="k">case</span> <span class="s">"add"</span><span class="o">:</span>
                    <span class="k">if</span><span class="o">(!</span><span class="no">S</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="no">S</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>

                <span class="k">case</span> <span class="s">"remove"</span><span class="o">:</span>
                    <span class="k">if</span><span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="no">S</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
                    <span class="k">break</span><span class="o">;</span>

                <span class="k">case</span> <span class="s">"check"</span><span class="o">:</span>
                    <span class="k">if</span><span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(!</span><span class="no">S</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>

                <span class="k">case</span> <span class="s">"toggle"</span><span class="o">:</span>
                    <span class="k">if</span><span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="no">S</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(!</span><span class="no">S</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="no">S</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>

                <span class="k">case</span> <span class="s">"all"</span><span class="o">:</span>
                    <span class="no">S</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="mi">20</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="no">S</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="k">break</span><span class="o">;</span>

                <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span>
                    <span class="no">S</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
                    <span class="k">break</span><span class="o">;</span>

                <span class="k">default</span><span class="o">:</span>
                    <span class="k">break</span><span class="o">;</span>

            <span class="o">}</span>

        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/11723">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[11723번 - 집합]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 스킬트리</title><link href="http://localhost:4000/java/222-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 스킬트리" /><published>2023-07-14T00:00:00+09:00</published><updated>2023-07-14T00:00:00+09:00</updated><id>http://localhost:4000/java/222-post</id><content type="html" xml:base="http://localhost:4000/java/222-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/" width="100%" /></center>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />

<p>이번 문제는 문제의 요구사항대로 <strong>구현</strong>하면 풀 수 있는 간단한 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>사용자들이 만든 스킬트리들이 정해진 스킬트리를 잘 따랐는지를 확인하기 위한 방법은 많으나 필자가 떠올린 방법은 간단하다.</p>

<ol>
  <li>만든 스킬트리들을 순회하며 선행스킬에 포함된 스킬인지를 확인한다.</li>
  <li>선행스킬에 포함된 스킬이라면 1번째 스킬인지, 2번째 ~ N번째 스킬인지 확인한다.</li>
  <li>현재 스킬이 1번째 스킬이라면 바로 습득한다.</li>
  <li>현재 스킬이 2번째 ~ N번째 스킬이라면 이전 스킬 습득여부를 확인한다. <br />
 4.1. 이전 스킬을 습득하지 않았다면 선행스킬순서를 지키지 않았기에 순회를 종료하고 가능여부를 불가능으로 갱신한다. <br />
 4.2. 이전 스킬을 습득했다면 현재 스킬을 습득한다.</li>
</ol>

<blockquote>
  <p>위 아이디어를 구현하기 위해 <strong>HashMap</strong>과 <strong>Array</strong>를 적절하게 사용했다.</p>
</blockquote>

<p><br /></p>

<p>다음으로 문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
</pre></td><td class="rouge-code"><pre>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">skill</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">skill_trees</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">// 가능한 스킬트리의 개수를 담을 변수</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// 만든 스킬트리들 중에서 정해진 스킬트리를 잘 따랐는지 확인하기 위해 Map에 담는다.</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">skill</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">skill</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)),</span> <span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">skill_trees</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            
            <span class="c1">// 스킬트리 가능 여부</span>
            <span class="kt">boolean</span> <span class="n">possiable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            
            <span class="c1">// 선행 스킬 습득 여부를 담을 배열</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">check</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">skill</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>

            <span class="cm">/**
             * 만든 스킬트리를 순회하며 가능한 스킬트리인지를 검증한다.
             * 정해진 스킬트리의 스킬이 아니라면 검사하기 않는다.
             * 스킬트리의 포함된 스킬이라면 첫번째 스킬인지, 두번째~N번째 스킬인지 확인한 후,
             * 선행 스킬 습득 여부를 판단하여 스킬 가능 여부를 갱신한다.
             */</span> 
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">skill_trees</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                
                <span class="nc">String</span> <span class="n">now</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">skill_trees</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
                
                <span class="c1">// 스킬트리에 존재하지 않는 스킬이라면 스킵.</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">hm</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">now</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// 스킬트리의 첫번째 스킬일 경우</span>
                <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">check</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span> 
                <span class="c1">// 스킬트리의 두번째부터 N번째 스킬일 경우</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// 이전 스킬을 습득하지 않은 경우 불가능한 스킬트리이다.</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">check</span><span class="o">[</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">)-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">possiable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="c1">// 이전 스킬을 습득했을 경우 현재 스킬도 습득 가능하다.</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="n">check</span><span class="o">[</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
            <span class="c1">// 만든 스킬트리는 가능한 스킬트리이다.</span>
            <span class="k">if</span><span class="o">(</span><span class="n">possiable</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>

        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        
        <span class="nc">String</span> <span class="n">skill</span> <span class="o">=</span> <span class="s">"CBD"</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">skill_trees</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"BACDE"</span><span class="o">,</span> <span class="s">"CBADF"</span><span class="o">,</span> <span class="s">"AECB"</span><span class="o">,</span> <span class="s">"BDA"</span><span class="o">};</span>

        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">skill</span><span class="o">,</span> <span class="n">skill_trees</span><span class="o">);</span>

    <span class="o">}</span>

<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>

<ul>
  <li>다른 분들의 풀이를 보니 스트림 공부의 필요성을 절실히 느낀다.</li>
</ul>

<hr />

<p><br /></p>

<h3 id="출처">출처</h3>
<p>-
—</p>

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://school.programmers.co.kr/learn/courses/30/lessons/49993">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 스킬트리]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 게임 맵 최단거리</title><link href="http://localhost:4000/java/221-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 게임 맵 최단거리" /><published>2023-07-14T00:00:00+09:00</published><updated>2023-07-14T00:00:00+09:00</updated><id>http://localhost:4000/java/221-post</id><content type="html" xml:base="http://localhost:4000/java/221-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/" width="100%" /></center>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />

<p>이 문제는 <strong>그래프 탐색 알고리즘</strong> 를 이용해 풀 수 있는 문제이다. DFS나 BFS 모두를 이용할 수 있지만 필자는 <strong>너비우선탐색인 BFS를 이용</strong>했다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>이 문제는 BFS를 이용해 캐릭터의 위치인 <code class="language-plaintext highlighter-rouge">(0,0)</code> 부터 게임 맵을 탐색해가며 상대방 진영의 위치인 `(N,M) 위치까지의 최단 이동거리를 구하면 된다.</p>

<p>상대방 진영까지의 최단거리를 구하기 위해 생각한 아이디어는 다음과 같다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">(0,0)</code> 위치부터 벽이 아닌 이동할 수 있는 칸을 탐색해가며 이동한다.</li>
  <li>캐릭터를 이동해가며 <strong>위치마다 이동한 거리를 기록</strong>한다.</li>
  <li>상대방 진영에 도착했다면, 상대방 진영의 위치인 <code class="language-plaintext highlighter-rouge">(N,M)</code> 에 기록된 이동거리를 반환한다.
    <blockquote>
      <p>이때, 만약 <code class="language-plaintext highlighter-rouge">(N,M)</code> 위치에 이동거리가 1이라면 주변이 벽(0)으로 막혀 상대방 진영에 도착할 수 없는 것이기에 -1을 반환한다.</p>
    </blockquote>
  </li>
</ol>

<p>위와 같이 BFS의 원리만 잘 이해하고 있다면 쉽게 풀 수 있다.</p>

<p><br /></p>

<p>다음으로 문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
</pre></td><td class="rouge-code"><pre>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>

    <span class="c1">// 상,하,좌,우로 탐색할 dx, dy 배열</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dx</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>

    <span class="c1">// 방문 여부를 체크할 배열</span>
    <span class="kd">static</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visited</span><span class="o">;</span>
    
    <span class="c1">// 전역으로 사용할 게임 맵 2차원 배열</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
    
    <span class="c1">// 게임 맵의 크기 NXM</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">maps</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 게임 맵의 크기 N과 M 초기화</span>
        <span class="no">N</span> <span class="o">=</span> <span class="n">maps</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="no">M</span> <span class="o">=</span> <span class="n">maps</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// 게임 맵 배열 초기화</span>
        <span class="n">map</span> <span class="o">=</span> <span class="n">maps</span><span class="o">;</span>
        
        <span class="c1">// 방문 배열 초기화</span>
        <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>

        <span class="c1">// 캐릭터의 위치인 0,0 위치에서 BFS 함수 호출</span>
        <span class="no">BFS</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

        <span class="cm">/**
         * BFS 탐색이 종료되면, map 배열의 N,M 위치에 기록된 이동거리 반환
         * 만약, 벽에 가로막혀 상대방 진영에 도착하지 못한다면, -1 반환
         */</span>
        <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="no">M</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">map</span><span class="o">[</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="no">M</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">BFS</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">});</span>
        
        <span class="n">visited</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            
            <span class="kt">int</span><span class="o">[]</span> <span class="n">now</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">dir</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">dir</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span> <span class="n">dir</span><span class="o">++)</span> <span class="o">{</span>
                
                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">now</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">dir</span><span class="o">];</span>
                <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">now</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">dir</span><span class="o">];</span>
                
                <span class="cm">/**
                 * 게임 맵 배열의 범위를 벗어나지 않고 이동할 수 있는 칸인지를 확인해간다.
                 * 이동할 수 있는 칸으로 이동할 경우, map 배열 각 위치에 이동거리를 갱신한다.
                 */</span> 
                <span class="k">if</span><span class="o">(</span><span class="n">isRange</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">))</span> <span class="o">{</span>
                    
                    <span class="k">if</span><span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                        <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">now</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">now</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                        <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">});</span>
                    <span class="o">}</span>

                <span class="o">}</span>

            <span class="o">}</span>

        <span class="o">}</span>
        
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isRange</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">&lt;</span><span class="no">N</span> <span class="o">&amp;&amp;</span> <span class="n">y</span><span class="o">&lt;</span><span class="no">M</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">maps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[][]{{</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span>
                                   <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span>
                                   <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span>
                                   <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span>
                                   <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">}};</span>
        <span class="c1">// int[][] maps = new int[][]{{1,0,1,1,1},</span>
        <span class="c1">//                             {1,0,1,0,1},</span>
        <span class="c1">//                             {1,0,1,1,1},</span>
        <span class="c1">//                             {1,1,1,0,0},</span>
        <span class="c1">//                             {0,0,0,0,1}};</span>

        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">maps</span><span class="o">);</span>

    <span class="o">}</span>

<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>
    <hr />
  </li>
</ul>

<p><br /></p>

<h3 id="출처">출처</h3>
<p>-
—</p>

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://school.programmers.co.kr/learn/courses/30/lessons/1844">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 게임 맵 최단거리]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 모음 사전</title><link href="http://localhost:4000/java/223-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 모음 사전" /><published>2023-07-14T00:00:00+09:00</published><updated>2023-07-14T00:00:00+09:00</updated><id>http://localhost:4000/java/223-post</id><content type="html" xml:base="http://localhost:4000/java/223-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/" width="100%" /></center>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />

<p>이번 문제는 <strong>재귀(DFS)</strong>를 이용해 풀 수 있다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>문자가 정해진 단어 안에서 어떤 규칙이 있는지 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="mi">1</span>   <span class="no">A</span>
<span class="mi">2</span>   <span class="no">AA</span>
<span class="mi">3</span>   <span class="no">AAA</span>
<span class="mi">4</span>   <span class="no">AAAA</span>
<span class="mi">5</span>   <span class="no">AAAAA</span>
<span class="mi">6</span>   <span class="no">AAAAE</span>
<span class="mi">7</span>   <span class="no">AAAAI</span>
<span class="mi">8</span>   <span class="no">AAAAO</span>
<span class="mi">9</span>   <span class="no">AAAAU</span>
<span class="mi">10</span>  <span class="no">AAAE</span> 
<span class="mi">11</span>  <span class="no">AAAEA</span>
<span class="mi">12</span>  <span class="no">AAAEE</span>
<span class="mi">13</span>  <span class="no">AAAEI</span>
<span class="mi">14</span>  <span class="no">AAAEO</span>
<span class="mi">15</span>  <span class="no">AAAEU</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>재귀를 통해 깊이우선탐색하는 것과 유사하지 않은가? 그래서 생각해낸 아이디어는 다음과 같다.</p>

<ul>
  <li>모음인 <code class="language-plaintext highlighter-rouge">A, E, I, O, U</code>를 모두 탐색하면서 <strong>재귀</strong>를 통해 문자열을 <strong>5의 길이만큼 만들어가는 조합</strong>을 적용한다.</li>
</ul>

<blockquote>
  <p>모든 경우의 수를 구해야 주어진 word의 순서를 구할 수 있으니 재귀함수를 통해 5의 길이까지의 모음의 모든 경우를 리스트에 담아둔 후, 리스트에서 선형 탐색으로 word의 순서를 찾으면 된다.</p>
</blockquote>

<p><br /></p>

<p>다음으로 문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="rouge-code"><pre>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>

    <span class="c1">// A,E,I,O,U 모음 배열과 최대길이가 될 상수 선언</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">words</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"E"</span><span class="o">,</span> <span class="s">"I"</span><span class="o">,</span> <span class="s">"O"</span><span class="o">,</span> <span class="s">"U"</span><span class="o">};</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX_LENGTH</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>

    <span class="c1">// 모든 모음을 경우의 수를 담을 List</span>
    <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">// 주어진 word가 몇번째 순서인지를 담을 변수</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 재귀 함수 호출</span>
        <span class="n">recursion</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

        <span class="c1">// 재귀함수 종료 후, 선형탐색으로 word의 순서를 찾는다.</span>
        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">word</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>

        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>

    <span class="o">}</span>

    <span class="cm">/**
     * 모음 문자열 배열을 완전탐색하며 모든 모음을 깊이 우선으로 탐색할 재귀함수
     * 모음의 모든 조합을 만들어야 word의 순서를 찾을 수 있다.
     */</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">recursion</span><span class="o">(</span><span class="nc">String</span> <span class="n">word</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 길이가 5가 되면 탐색을 종료한다.</span>
        <span class="k">if</span><span class="o">(</span><span class="n">depth</span> <span class="o">==</span> <span class="no">MAX_LENGTH</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 모든 조합의 수를 List에 담는다.</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
        
        <span class="c1">// A,E,I,O,U를 탐색하며 재귀호출</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">recursion</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">str</span><span class="o">+</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        
        <span class="c1">// String word = "AAAAE";</span>
        <span class="c1">// String word = "AAAE";</span>
        <span class="nc">String</span> <span class="n">word</span> <span class="o">=</span> <span class="s">"EIO"</span><span class="o">;</span>

        <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>

    <span class="o">}</span>

<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<p>-
—</p>

<p><br /></p>

<h3 id="출처">출처</h3>
<p>-
—</p>

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://school.programmers.co.kr/learn/courses/30/lessons/84512">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 모음 사전]]></summary></entry><entry><title type="html">[Java] 백준(실버-3) 1003번 - 피보나치 함수</title><link href="http://localhost:4000/java/220-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-3) 1003번 - 피보나치 함수" /><published>2023-07-13T00:00:00+09:00</published><updated>2023-07-13T00:00:00+09:00</updated><id>http://localhost:4000/java/220-post</id><content type="html" xml:base="http://localhost:4000/java/220-post/"><![CDATA[<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이번 문제는 <strong>동적계획법 DP</strong>의 대표적인 예시인 피보나치 수열을 응응하여 풀 수 있는 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>이번 문제에서는 DP를 통해 피보나치 수열을 도출해내는 동시에 <strong>fibo(0)과 fibo(1)의 호출횟수</strong>를 각각 구해야 한다. 어떻게 0과 1의 호출횟수를 구할 수 있을까?</p>

<p><br /></p>

<p>간단한 에시를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="no">N</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">fibo</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">=</span> <span class="n">fibo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>

<span class="no">N</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">fibo</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">=</span> <span class="o">(</span><span class="n">fibo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 예시처럼 N이 2일 때 0과 1은 각각 1번씩 호출되며, N이 3일 때는 0은 1번, 1은 2번 호출된다. 그렇다면, <strong>N에 대하여 0과 1이 호출된 횟수를 함께 저장</strong>하면 간단하다.</p>

<p>즉, 한 번 탐색할 때마다 N의 0과 1의 호출횟수를 DP 테이블에 저장한 후, 메모이제이션을 통해 이미 저장해둔 N의 호출횟수를 그대로 반환해주면 된다는 것이다.</p>

<p><br /></p>

<p>이를 통해 생각해낸 아이디어는 다음과 같다.</p>

<ol>
  <li>0과 1의 호출횟수를 함께 담아야 하기 때문에 <strong>DP 테이블을 2차원 배열로 선언</strong>한다.</li>
  <li>피보나치 함수(fibo)는 <strong>N에 대한 0과 1의 호출회수를 DP 테이블에 저장</strong>해가며 재귀함수를 호출한다.</li>
</ol>

<blockquote>
  <p>메모이제이션을 통해 이미 N에 대해 0과 1의 호출횟수를 구해두었다면 바로 반환한다.</p>
</blockquote>

<ol>
  <li>재귀함수 호출이 종료되면 해당 N의 대한 0과 1의 호출횟수를 1차원배열의 형태로 반환한다.</li>
</ol>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="c1">// 피보나치 수와 N이 0과 1일 때의 호출횟수도 담아야 하기에 2차원 DP 배열 선언</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="no">D</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="c1">// N의 범위는 최대 40이며, 0 과 1의 호출횟수를 함께 초기화</span>
        <span class="no">D</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">41</span><span class="o">][</span><span class="mi">2</span><span class="o">];</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">40</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="no">D</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="no">D</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// N이 0일 때는 0의 호출횟수가 1, 1의 호출횟수는 0</span>
        <span class="no">D</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="no">D</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// N이 1일 때, 0의 호출횟수 0, 1의 호출횟수 1</span>
        <span class="no">D</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="no">D</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            
            <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>   
            
            <span class="c1">// 테스트케이스별로 N에 대한 피보나치 재귀함수를 실행한다.</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">count</span> <span class="o">=</span> <span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">);</span>

            <span class="c1">// 재귀 호출 이후 N에 대한 0과 1의 호출횟수를 출력한다.</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">count</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">count</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
            
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">fibo</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>

        <span class="cm">/**
         * N에 대해 0과 1의 호출횟수를 구하지 않았을 경우 
         * 재귀를 통해 0과 1의 호춣횟수를 저장한다.
         */</span>
        <span class="k">if</span><span class="o">(</span><span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">)[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">2</span><span class="o">)[</span><span class="mi">0</span><span class="o">];</span>
            <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">)[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">2</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>
        
        <span class="c1">// [메모이제이션] N에 대해 이미 0과 1의 호출횟수를 구해뒀을 경우 바로 반환한다.</span>
        <span class="k">return</span> <span class="no">D</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1003">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1003번 - 피보나치 함수]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 18110번 - solved.ac</title><link href="http://localhost:4000/java/218-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 18110번 - solved.ac" /><published>2023-07-13T00:00:00+09:00</published><updated>2023-07-13T00:00:00+09:00</updated><id>http://localhost:4000/java/218-post</id><content type="html" xml:base="http://localhost:4000/java/218-post/"><![CDATA[<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이번 문제는 단순한 <strong>구현</strong> 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>문제에서 요구한 절사평균 30%을 적용하여 높은 값에서부터 15%, 낮은 값에서부터 15%를 제외한 후의 평균을 구하면 된다.</p>

<blockquote>
  <p>또한, 절사평균을 통해 높은 값과 낮은 값에서부터 데이터를 제외해야 한다는 것을 통해 <strong>데이터를 정렬해두고 제외해야 한다는 것</strong>을 꼭 고려해야 한다.</p>
</blockquote>

<p>위 사항만 잘 고려하고, 반올림만 잘 해주면 쉽게 풀 수 있다.</p>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="c1">// 절사평균을 구한다.</span>
        <span class="kt">int</span> <span class="n">except</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span> <span class="no">N</span> <span class="o">*</span> <span class="mi">15</span> <span class="o">/</span> <span class="mi">100</span><span class="o">);</span>

        <span class="c1">// 입력 배열을 만든다.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="c1">// 테스트케이스 예제 1을 보면 알겠지만 데이터가 오름차순 정렬되어 있어야 한다.</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

        <span class="c1">// 총 난이도의 평균을 구할 변수 초기화</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// 절사평균을 통해 제외할 구간만을 순회하여 합을 담는다.</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">except</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">-</span><span class="n">except</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        
        <span class="c1">// 절사평균을 제외한 나머지의 평균을 구해 반올림한다.</span>
        <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span><span class="n">result</span> <span class="o">/</span> <span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="o">(</span><span class="n">except</span><span class="o">*</span><span class="mi">2</span><span class="o">)));</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/18110">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[18110번 - solved.ac]]></summary></entry><entry><title type="html">[Java] 백준(실버-2) 18111번 - 마인크래프트</title><link href="http://localhost:4000/java/219-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-2) 18111번 - 마인크래프트" /><published>2023-07-13T00:00:00+09:00</published><updated>2023-07-13T00:00:00+09:00</updated><id>http://localhost:4000/java/219-post</id><content type="html" xml:base="http://localhost:4000/java/219-post/"><![CDATA[<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이번 문제는 <strong>완전 탐색</strong>을 이용해 풀 수 있는 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>이 문제는 완전탐색을 통해 주어진 2차원 배열을 순회하면서 조건에 부합하는지를 확인하면 된다.</p>

<p>문제 풀이를 위한 아이디어를 살펴보자.</p>

<ol>
  <li>땅을 평탄화하기 위해 쌓을 수 있는 <strong>최소 층과 최대 층 수</strong>를 구한다.</li>
  <li>층별로 블록을 채우거나 제거한 후의 <strong>블록의 개수가 0개 이상(양수)</strong>이어야 한다.</li>
  <li>층별로 평탄화 작업에 걸리는 시간을 통해 가장 적게 걸리는 <strong>최소시간</strong>과 그때의 <strong>층수</strong>를 구하면 된다.</li>
</ol>

<p><br /></p>

<p>말로만 들으면 잘 모를 수 있으니 예시를 들어보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span>
<span class="mi">5</span> <span class="mi">1</span>
<span class="mi">2</span> <span class="mi">5</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 입력예제를 들어보았을 때, 가장 낮은 블록의 높이는 1층부터 가장 높은 블록의 높이는 5층까지 존재한다. 이를 통해 우리가 평탄화를 통해 만들 수 있는 땅의 높이는 1층부터 5층까지 만들 수 있다는 것이다. 그러면 단순하게 1~5까지 순회하며 평탄화 작업을 실시하여 걸리는 시간을 계산하면 된다.</p>

<blockquote>
  <p>1층으로 만들 경우 <br /></p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">4</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">8</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">1</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="n">층이</span> <span class="n">같기에</span> <span class="n">작업</span> <span class="n">필요</span> <span class="no">X</span>
<span class="mi">2</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">1</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">2</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">4</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">8</span><span class="n">초이다</span><span class="o">.</span>

<span class="n">총</span> <span class="n">평탄화</span> <span class="n">작업</span> <span class="nl">시간:</span> <span class="mi">18</span><span class="n">초</span>
<span class="n">인벤토리</span> <span class="n">블록의</span> <span class="nl">개수:</span> <span class="mi">11</span><span class="n">개</span><span class="o">(</span><span class="n">기존2개</span><span class="o">+</span><span class="mi">8</span><span class="n">개</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>2층으로 만들 경우 <br /></p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">3</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">6</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">1</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">채운다</span><span class="o">.</span> <span class="n">차감되는</span> <span class="n">블록</span> <span class="n">수는</span> <span class="o">-</span><span class="mi">1</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">1</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">2</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="n">층이</span> <span class="n">같기에</span> <span class="n">작업</span> <span class="n">필요</span> <span class="no">X</span>
<span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">3</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">6</span><span class="n">초이다</span><span class="o">.</span>

<span class="n">총</span> <span class="n">평탄화</span> <span class="n">작업</span> <span class="nl">시간:</span> <span class="mi">13</span><span class="n">초</span>
<span class="n">인벤토리</span> <span class="n">블록의</span> <span class="nl">개수:</span> <span class="mi">7</span><span class="n">개</span><span class="o">(</span><span class="n">기존2개</span><span class="o">+</span><span class="mi">5</span><span class="n">개</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>3층으로 만들 경우 <br /></p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">2</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">4</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">1</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">채운다</span><span class="o">.</span> <span class="n">차감되는</span> <span class="n">블록</span> <span class="n">수는</span> <span class="o">-</span><span class="mi">2</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">2</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">2</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">채운다</span><span class="o">.</span> <span class="n">차감되는</span> <span class="n">블록</span> <span class="n">수는</span> <span class="o">-</span><span class="mi">1</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">1</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">2</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">4</span><span class="n">초이다</span><span class="o">.</span>

<span class="n">총</span> <span class="n">평탄화</span> <span class="n">작업</span> <span class="nl">시간:</span> <span class="mi">11</span><span class="n">초</span>
<span class="n">인벤토리</span> <span class="n">블록의</span> <span class="nl">개수:</span> <span class="mi">3</span><span class="n">개</span><span class="o">(</span><span class="n">기존2개</span><span class="o">+</span><span class="mi">1</span><span class="n">개</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>4층으로 만들 경우 <br /></p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">1</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">2</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">1</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">채운다</span><span class="o">.</span> <span class="n">차감되는</span> <span class="n">블록</span> <span class="n">수는</span> <span class="o">-</span><span class="mi">3</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">3</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">2</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">채운다</span><span class="o">.</span> <span class="n">차감되는</span> <span class="n">블록</span> <span class="n">수는</span> <span class="o">-</span><span class="mi">2</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">2</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">제거한다</span><span class="o">.</span> <span class="n">얻는</span> <span class="n">블록의</span> <span class="n">수는</span> <span class="mi">1</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">2</span><span class="n">초이다</span><span class="o">.</span>

<span class="n">총</span> <span class="n">평탄화</span> <span class="n">작업</span> <span class="nl">시간:</span> <span class="mi">9</span><span class="n">초</span>
<span class="n">인벤토리</span> <span class="n">블록의</span> <span class="nl">개수:</span> <span class="o">-</span><span class="mi">1</span><span class="n">개</span><span class="o">(</span><span class="n">기존2개</span><span class="o">+(-</span><span class="mi">3</span><span class="n">개</span><span class="o">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>5층으로 만들 경우 <br /></p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="n">층이</span> <span class="n">같기에</span> <span class="n">작업</span> <span class="n">필요</span> <span class="no">X</span>
<span class="mi">1</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">5</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">채운다</span><span class="o">.</span> <span class="n">차감되는</span> <span class="n">블록</span> <span class="n">수는</span> <span class="o">-</span><span class="mi">4</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">4</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">2</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="mi">5</span><span class="n">층으로</span> <span class="n">만들기</span> <span class="n">위해</span> <span class="n">블록을</span> <span class="n">채운다</span><span class="o">.</span> <span class="n">차감되는</span> <span class="n">블록</span> <span class="n">수는</span> <span class="o">-</span><span class="mi">3</span><span class="n">개이며</span><span class="o">,</span> <span class="n">평탄화</span> <span class="n">작업에</span> <span class="n">걸리는</span> <span class="n">시간은</span> <span class="mi">3</span><span class="n">초이다</span><span class="o">.</span>
<span class="mi">5</span><span class="n">층</span> <span class="o">-&gt;</span> <span class="n">층이</span> <span class="n">같기에</span> <span class="n">작업</span> <span class="n">필요</span> <span class="no">X</span>

<span class="n">총</span> <span class="n">평탄화</span> <span class="n">작업</span> <span class="nl">시간:</span> <span class="mi">7</span><span class="n">초</span>
<span class="n">인벤토리</span> <span class="n">블록의</span> <span class="nl">개수:</span> <span class="o">-</span><span class="mi">5</span><span class="n">개</span><span class="o">(</span><span class="n">기존2개</span><span class="o">+(-</span><span class="mi">7</span><span class="n">개</span><span class="o">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 1층부터 5층까지 평탄화 작업을 실시해가면서 구해낸 <strong>최소시간은 11초</strong>이며, <strong>11초가 걸리는 층수는 3층</strong>이 된다는 것을 볼 수 있다.</p>

<blockquote>
  <p>4층과 5층은 블록의 개수가 음수가 되어 블록을 채울 수 없기 때문에 조건에 부합하지 않는다.</p>
</blockquote>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">java_study</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">B</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">M</span><span class="o">];</span>

        <span class="c1">// 만들 수 있는 가장 낮은 층과 가장 높은 층</span>
        <span class="kt">int</span> <span class="n">min_height</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">max_height</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
                <span class="n">min_height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min_height</span><span class="o">,</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
                <span class="n">max_height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max_height</span><span class="o">,</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 가장 낮은 층부터 가장 높은 층까지 작업에 걸리는 시간 중 최소시간을 담을 time 변수</span>
        <span class="kt">int</span> <span class="n">time</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
        
        <span class="c1">// 최소시간일 경우 땅의 높이를 담을 floor 변수</span>
        <span class="kt">int</span> <span class="n">floor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="cm">/**
         * 가장 낮은 층부터 높은 층까지 평탄화를 해가면서 층별로 걸리는 시간을 구한다.
         * 이때, 가장 최소시간이 걸리는 시간과 층수를 구하면 된다.
         */</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="n">min_height</span><span class="o">;</span> <span class="n">idx</span><span class="o">&lt;=</span><span class="n">max_height</span><span class="o">;</span> <span class="n">idx</span><span class="o">++)</span> <span class="o">{</span>
            
            <span class="c1">// 층별로 작업에 걸리는 시간을 담을 sec 변수</span>
            <span class="kt">int</span> <span class="n">sec</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>            
            
            <span class="c1">// 층별로 작업 이후 인벤토리에 남은 블록의 개수</span>
            <span class="kt">int</span> <span class="n">block</span> <span class="o">=</span> <span class="no">B</span><span class="o">;</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    
                    <span class="cm">/*
                     * 현재 블록의 높이가 만들어야 할 층보다 높다면 블록을 깎아 인벤토리에 넣는다.
                     * 블록을 깎을 때는 2배만큼 시간이 걸린다.
                     */</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">sec</span> <span class="o">+=</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="n">idx</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
                        <span class="n">block</span> <span class="o">+=</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="n">idx</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="cm">/**
                     * 현재 블록의 높이가 만드렁야 할 층보다 낮다면 인벤토리에 있는 블록으로 채운다.
                     * 블록을 채울 때는 1배만큼 시간이 걸린다.
                     */</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">sec</span> <span class="o">+=</span> <span class="o">(</span><span class="n">idx</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
                        <span class="n">block</span> <span class="o">-=</span> <span class="o">(</span><span class="n">idx</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
                    <span class="o">}</span>
                    
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// 블록의 개수가 음수라면 블록을 채울 수가 없기 때문에 조건에 맞지 않는다.</span>
            <span class="k">if</span><span class="o">(</span><span class="n">block</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// 층별로 작업에 걸린 시간이 이전 층의 작업 시간보다 적다면, 현재 층의 작업시간과 층수를 저장한다.            </span>
            <span class="k">if</span><span class="o">(</span><span class="n">time</span> <span class="o">&gt;=</span> <span class="n">sec</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">time</span> <span class="o">=</span> <span class="n">sec</span><span class="o">;</span>      
                <span class="n">floor</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
            <span class="o">}</span>
            
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">time</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">floor</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/18111">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[18111번 - 마인크래프트]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 15829번 - Hashing</title><link href="http://localhost:4000/java/217-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 15829번 - Hashing" /><published>2023-07-12T00:00:00+09:00</published><updated>2023-07-12T00:00:00+09:00</updated><id>http://localhost:4000/java/217-post</id><content type="html" xml:base="http://localhost:4000/java/217-post/"><![CDATA[<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이번 문제는 단순한 <strong>구현</strong> 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>이번 문제는 서브테스크 유형의 문제라 Small Case를 충족하면 50점, Large Case까지 충족하면 100점을 받을 수 있다.</p>

<p>처음엔 단순하게 생각하여 풀었더니 문자열 길이 50까지의 범위를 고려하지 못해 Small Case만 충족되어 50점을 달성하였다. 어떻게 Large Case까지 충족하여 100점을 받을 수 있을까 고민하고 개선하여 100점을 받았는데 그 아이디어를 살펴보자.</p>

<p>문제풀이를 위한 핵심 아이디어 2가지는 다음과 같다.</p>

<ol>
  <li>모듈러 연산</li>
  <li>수의 범위</li>
</ol>

<p><br /></p>

<h4 id="모듈러-연산">모듈러 연산</h4>

<p>이번 문제에서 100점을 받기 위해서는 <strong>모듈러 연산</strong>의 성질을 잘 이해해야 한다.</p>

<blockquote>
  <ol>
    <li>(A + B) mod C = (A mod C + B mod C) mod C</li>
    <li>(A - B) mod C = (A mod C - B mod C) mod C</li>
    <li>(A * B) mod C = (A mod C * B mod C) mod C</li>
  </ol>
</blockquote>

<p>위 성질을 통해 아래 연산식이 가능하다는 것을 알 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">a2r2</span> <span class="n">mod</span> <span class="no">M</span> <span class="o">=</span> <span class="o">(</span><span class="n">a2</span> <span class="n">mod</span> <span class="no">M</span> <span class="o">*</span> <span class="n">r2</span> <span class="n">mod</span> <span class="no">M</span><span class="o">)</span> <span class="n">mod</span> <span class="no">M</span>
<span class="n">r2</span> <span class="n">mod</span> <span class="no">M</span> <span class="o">=</span> <span class="o">(</span><span class="n">r</span> <span class="n">mod</span> <span class="no">M</span> <span class="o">*</span> <span class="n">r</span> <span class="n">mod</span> <span class="no">M</span><span class="o">)</span> <span class="n">mod</span> <span class="no">M</span>
<span class="n">r3</span> <span class="n">mod</span> <span class="no">M</span> <span class="o">=</span> <span class="o">(</span><span class="n">r2</span> <span class="n">mod</span> <span class="o">*</span> <span class="n">r</span> <span class="n">mod</span> <span class="no">M</span><span class="o">)</span> <span class="n">mod</span> <span class="no">M</span>
<span class="n">r4</span> <span class="n">mod</span> <span class="no">M</span> <span class="o">=</span> <span class="o">(</span><span class="n">r3</span> <span class="n">mod</span> <span class="no">M</span> <span class="o">*</span> <span class="n">r</span> <span class="n">mod</span> <span class="no">M</span><span class="o">)</span> <span class="n">mod</span> <span class="no">M</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="수의-범위">수의 범위</h4>
<p>또한, Math.pow() 메서드를 사용하여 31의 제곱수를 곱해주는 방식으로 구현했지만 Math.pow(31, 49)까지 간다면 long형의 범위도 벗어나기 때문에 해당 메소드를 사용하지 않고 <strong>pow를 일일이 곱</strong>해주면서 <strong>모듈러 연산을 통해 문제에서 제시한 M(=1234567891)보다 크기를 줄여</strong>가야 한다.</p>

<blockquote>
  <p>그래서 pow로 사용하는 변수와 해시 함수의 결과값을 더해줄 결과값 변수는 long 형으로 선언해서 사용해야 한다.</p>
</blockquote>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">97</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">123</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">96</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="mi">1234567891</span><span class="o">;</span>

        <span class="kt">int</span> <span class="no">L</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>

        <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">pow</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Math.pow() 메서드를 사용하면 long형의 범위를 벗어나기 때문에 Large 케이스를 통과할 수 없다.</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">L</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">alph</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">alph</span><span class="o">)</span> <span class="o">*</span> <span class="n">pow</span><span class="o">)</span> <span class="o">%</span> <span class="no">M</span><span class="o">;</span>
            <span class="n">pow</span> <span class="o">=</span> <span class="o">(</span><span class="n">pow</span> <span class="o">*</span> <span class="mi">31</span><span class="o">)</span> <span class="o">%</span> <span class="no">M</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">((</span><span class="n">result</span><span class="o">%</span><span class="no">M</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/15829">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[15829번 - Hashing]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 1676번 - 팩토리얼 0의 개수</title><link href="http://localhost:4000/java/216-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 1676번 - 팩토리얼 0의 개수" /><published>2023-07-12T00:00:00+09:00</published><updated>2023-07-12T00:00:00+09:00</updated><id>http://localhost:4000/java/216-post</id><content type="html" xml:base="http://localhost:4000/java/216-post/"><![CDATA[<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>

<hr />

<p>이번 문제는 단순한 <strong>구현</strong> 문제이다.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>

<p>이 문제는 단순히 N!의 값을 팩토리얼 연산을 통해 구해서 0을 구할 수 있지만, 입력값의 범위를 생각하면 출제자의 의도는 다른 것이라는 것을 알 수 있다.</p>

<blockquote>
  <p>최대 500! 까지의 값을 구해야 하는데 BigInteger 클래스를 사용해야만 500! 까지의 값을 구할 수 있다.</p>
</blockquote>

<p>물론, BigInteger 클래스를 사용하여 팩토리얼 연산 후 0의 개수를 셀 수도 있겠지만, 여기서는 출제자가 의도한 0의 개수를 세는 것은 다른 방법을 이용하려고 한다.</p>

<p>N!의 값에서 뒷자리가 0이 나오는 경우를 잘 생각해보면 10으로 나누어 떨어질 때를 생각해볼 수 있다. 이 말은, <strong>소인수분해를 해서 2와 5가 존재할 경우 뒷자리는 0으로 끝난다</strong>고 볼 수 있다.</p>

<p>예시를 한번 들어보자.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">30 = 2*3*5</code> <br />
<code class="language-plaintext highlighter-rouge">231400 = 23*52*13*89</code></p>
</blockquote>

<p>30과 231400 모두 2와 5가 포함된다. 즉, 소인수분해의 성질을 이용해야 한다는 것이다.</p>

<p>소인수분해의 성질을 통해 살펴보면, 뒷자리가 0이 N개 있다는 것은 2와 5개 N개씩 쌍으로 존재한다는 것을 알 수 있다.</p>

<p>30과 231400이라는 수도 소인수분해값을 보면 30은 2와 5가 1개씩 쌍으로 1개가 있으며, 231400은 2는 3개, 5는 2개가 있어 쌍으로 2ㅐ가 있다. 30의 0의 개수는 1개, 231400의 0의 개수는 2개라고 보면 된다.</p>

<p>그런데, N!의 값을 보면 2는 5보다 작기 때문에 소인수분해시, 2의 개수는 5의 개수보다 많게 된다. 그래서 <strong>5의 개수에 초점</strong>을 두어야 한다.</p>

<p><br /></p>

<p>문제 풀이를 위한 생각한 아이디어는 다음과 같다.</p>

<ul>
  <li>N을 5로 나눠가면서 5로 나눌때마다 카운트를 세면 된다.
    <blockquote>
      <p>N을 5를 나눠가며 갱신할 때마다 카운트를 하는 것이 0의 개수를 세는 것과 같다.</p>
    </blockquote>
  </li>
</ul>

<p><br /></p>

<p>문제 풀이를 위해 작성한 코드는 아래와 같다.</p>

<h3 id="작성코드">작성코드</h3>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>    

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span><span class="no">N</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
            <span class="no">N</span> <span class="o">/=</span> <span class="mi">5</span><span class="o">;</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="no">N</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>    

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="출처">출처</h3>

<hr />

<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1676">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1676번 - 팩토리얼 0의 개수]]></summary></entry></feed>