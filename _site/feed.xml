<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-30T17:32:03+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 백준(실버-3) 2108번 - 통계학</title><link href="http://localhost:4000/java/90-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-3) 2108번 - 통계학" /><published>2022-09-30T00:00:00+09:00</published><updated>2022-09-30T00:00:00+09:00</updated><id>http://localhost:4000/java/90-post</id><content type="html" xml:base="http://localhost:4000/java/90-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2108.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br /></p>
</blockquote>
<pre>
5
1
3
8
-2
2
</pre>
<blockquote>
  <p>Output-1 <br /></p>
</blockquote>
<pre>
2
2
1
10
</pre>

<p><br /></p>

<blockquote>
  <p>Input-2 <br /></p>
</blockquote>
<pre>
5
-1
-2
-3
-1
-2
</pre>
<blockquote>
  <p>Output-2 <br /></p>
</blockquote>
<pre>
-2
-2
-1
2
</pre>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>N개의 수들을 입력받아 산술평균, 중앙값, 최빈값, 범위 총 4가지를 구해야한다. <br />
위 4가지 연산결과를 구하기 위해 N개의 수를 배열에 저장해두자. <br />
유의할 점은 N개의 수 중 최빈값이 동일한 수가 있다면 <strong>두번째로 작은 수를 출력</strong>해야 한다는 것이다.</p>

<p>4가지 연산을 위해 생각한 아이디어는 다음과 같다.</p>
<ul>
  <li>산술평균: 배열 원소의 누적 합을 구한다.</li>
  <li>중앙값: N은 무조건 홀수이기 때문에 배열[배열의 길이/2]로 접근하면 중앙값을 구할 수 있다.</li>
  <li>최빈값: N개의 수들의 각 빈도를 체크해두고, 가장 많이 나온 수가 하나일 경우 하나만 출력하고, 빈도수가 동일한 수가 있다면 빈도순으로 나열하여 두번째로 작은 값을 출력한다.</li>
  <li>범위: 배열을 오름차순으로 정렬한 후, 첫번째 원소는 최솟값, 마지막 원소는 최대값일테니, 마지막원소-첫번째원소 연산을 통해 범위를 구한다.</li>
</ul>

<p><br /></p>

<p>그럼 도출한 아이디어를 가지고 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="o">}</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N을 입력받고 N개의 수들을 담을 arr 배열을 선언한다. 그리고 N개만큼 입력을 받아 arr 배열에 저장한다. <br />
다음으로 arr 배열을 오름차순으로 정렬한다.</p>

<p><br /></p>

<h4 id="산술평균-구하기">산술평균 구하기</h4>
<p>산술평균의 경우는 먼저 배열 원소를 순회하며 누적합을 구한 뒤 누적합에서 N을 나누면 되는데, <br />
그냥 나누면 소수점이 버려지기 때문에 반올림을 위해 Math.round를 이용해야 한다. <br />
하지만, Math.round가 동작하기 전 누적합/N 연산에서 오차가 발생할 수 있기 때문에 <strong>누적합/N 연산 부분을 double형으로 형변환</strong>하자. 그렇다면 소수점이 버려지는 것을 방지할 수 있다. <br />
마지막으로 반올림된 연산에 int형으로 형변환하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span> 
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span><span class="n">sum</span><span class="o">/</span><span class="no">N</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="중앙갑-구하기">중앙갑 구하기</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="mi">2</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N이 홀수이기에 중앙값은 항상 존재하고, 중앙값은 단순하게 배열의 길이를 반으로 나눈 인덱스 값이 된다.</p>

<p><br /></p>

<h4 id="최빈값-구하기">최빈값 구하기</h4>
<p>최빈값은 배열의 원소중 가장 많이 나온 수이다. 또한 최빈값을 가진 수가 여러개 존재할 경우는 두번 째로 작은 수를 출력해야 하기 때문에 <strong>TreeMap</strong>을 활용하였다. <br /></p>

<blockquote>
  <p><strong>TreeMap</strong> 이란? <br />
이진트리를 기반으로 한 Map 컬렉션이다. TreeMap은 기본적으로 값들을 key 값 기준으로 <strong>오름차순으로 정렬</strong>하여 가지고 있다.</p>
</blockquote>

<p>TreeMap은 값을 저장하면 자동으로 오름차순 정렬되기에 동일한 최빈값을 가진 수가 있을 때 두번째로 작은 수를 찾기가 쉽기에 이용하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">hm</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>        

<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">mode_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">hm</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">max</span> <span class="o">==</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">())</span> <span class="n">mode_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">if</span><span class="o">(</span><span class="n">mode_list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">mode_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="k">else</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">mode_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>N개의 수가 담긴 arr 배열에서 원소를 key값으로, 원소의 빈도수를 value 값으로 하여 TreeMap에 저장한다. 이 때 TreeMap에는 key 값 기준으로 오름차순 정렬이 된다. <br />
그리고 가장 많은 빈도횟수 max 변수를 가지고 TreeMap을 순회하며 가장 많은 빈도수를 가지는 수를 mode_list 배열에 담는다. <br />
최빈값이 하나라면 mode_list의 원소는 하나이며, 최빈값이 X개라면 mode_list의 원소는 X개 일 것이다. <br />
최빈값이 몇개가 담기든 TreeMap이기에 오름차순으로 mode_list에 담길 테니 두번째로 작은 수를 출력하면 된다.</p>

<p><br /></p>

<h4 id="범위-구하기">범위 구하기</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">((</span><span class="n">arr</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">])+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>범위를 구하는 것은 단순하다. arr 배열을 앞에서 sort() 함수를 통해 오름차순 정렬했으니 최대값(마지막원소)-최솟값(첫번째원소) 연산을 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

        <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">hm</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>        

        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">mode_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">hm</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">max</span> <span class="o">==</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">())</span> <span class="n">mode_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">mode_list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">mode_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">mode_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span><span class="n">sum</span><span class="o">/</span><span class="no">N</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="mi">2</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">mode</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">((</span><span class="n">arr</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">])+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>TreeMap에 저장하면 자동으로 오름차순으로 정렬되는 성질을 이용해 최빈값과 두번째 최빈값를 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2108번 - 통계학]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-2) 25305번 - 커트라인</title><link href="http://localhost:4000/java/89-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-2) 25305번 - 커트라인" /><published>2022-09-30T00:00:00+09:00</published><updated>2022-09-30T00:00:00+09:00</updated><id>http://localhost:4000/java/89-post</id><content type="html" xml:base="http://localhost:4000/java/89-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/25305.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
5 2
100 76 85 93 98
</pre>

<p><br /></p>

<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
98
</pre>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제의 요구사항을 잘 보면 주어진 점수들을 내림차순으로 정렬한 후 k번째 점수를 구해야 한다. <br />
여기서 주어진 점수들을 <strong>내림차순으로 정렬</strong>하는 것이 핵심이다. <br />
내림차순으로 정렬하는 다양한 방식 중에서 int 배열을 이용한 방식과 Integer 배열을 이용한 방식 두가지로 풀어보았다.</p>

<p><br /></p>

<h4 id="int-배열-활용---오름차순-정렬-후-역순으로-접근하기">int 배열 활용 - 오름차순 정렬 후 역순으로 접근하기</h4>
<p>기본 타입 배열인 int 배열을 가지고 역순으로 정렬할 수는 없기 때문에, 역순으로 접근하거나, -1을 곱해서 재 정렬하는 등으로 진행해야 한다. <br />
이 문제에서는 <strong>오름차순 정렬된 배열을 가지고 역순으로 다시 저장하는 방식</strong>으로 진행해보려 한다.</p>

<p>코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[]</span> <span class="n">score</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">desc_score</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 주어진 점수를 입력받아 오름차순으로 정렬할 score 배열과 역순으로 새로 저장할 desc_score 배열을 생성하자. <br />
그리고 입력 점수를 score 배열에 공백기준으로 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">score</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">desc_score</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">desc_score</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">score</span><span class="o">[</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
<span class="o">}</span>   
</pre></td></tr></tbody></table></code></pre></div></div>
<p>입력점수를 그대로 저장한 score 배열을 오름차순으루 정렬한 뒤, 순회하면서 마지막 원소부터 역순으로 desc_score에 저장하면 내림차순으로 졍렬된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">desc_score</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>오름차순 정렬된 배열에서 k번째 수를 출력하면 커트라인이 몇 점인지 구할 수 있다.</p>

<p><br /><br /></p>

<h4 id="integer-배열-활용---collectionsreverseorder">Integer 배열 활용 - Collections.reverseOrder()</h4>
<p>배열을 내림차순으로 정렬할 때는 Collections 클래스의 reverseOrder() 함수를 사용하면 된다. <br />
사실 Collections.reverseOrder()는 Comparator 객체이기 때문에 직접 구현해야하지만 기본 타입의 int 배열을 <strong>래퍼 클래스인 Integer 배열</strong>로 만들어 Comparator를 두번째 인자에 넣어주면 역순으로 정렬된다.</p>

<p>Integer 배열을 이용해 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">Integer</span><span class="o">[]</span> <span class="n">desc_score</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">score</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span> 
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">desc_arr</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>내림차순으로 저장할 desc_score 객체 배열은 기본 타입의 배열을 객체 스트림형태로 변환한 후 배열의 형태로 변환한다. <br />
그러면 sort() 함수의 두번째 인자로 Collections.reverseOrder()를 전달할 수 있다.</p>

<p>위 내림차순 정렬 방식에 대한 자세한 내용은 이전에 풀었던 <a href="https://jooney-95.github.io/java/57-post/">최솟값 만들기</a> 게시글에서 참고할 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">score</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">desc_score</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
        <span class="c1">// Integer[] desc_score = new Integer[N];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="n">desc_score</span> <span class="o">=</span> <span class="n">descending1</span><span class="o">(</span><span class="n">score</span><span class="o">);</span>
        <span class="c1">// desc_score = descending2(score);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">desc_score</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">descending1</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">desc_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">desc_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">desc_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>   
        <span class="k">return</span> <span class="n">desc_arr</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Integer</span><span class="o">[]</span> <span class="nf">descending2</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">desc_arr</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">arr</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span> 
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">desc_arr</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">desc_arr</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>아직까지는 Integer 등 래퍼클래스를 이용한 정렬방식보다는 int 등의 기본배열을 활용하는 것이 더 익숙하지만, 상황에 따라 다양한 내림차순 방법을 잘 활용해야겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[25305번 - 커트라인]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 2751번 - 수 정렬하기 2</title><link href="http://localhost:4000/java/87-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 2751번 - 수 정렬하기 2" /><published>2022-09-29T00:00:00+09:00</published><updated>2022-09-29T00:00:00+09:00</updated><id>http://localhost:4000/java/87-post</id><content type="html" xml:base="http://localhost:4000/java/87-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2751.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
5
5
4
3
2
1
</pre>

<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
1
2
3
4
5
</pre>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 sort() 메소드를 이용해 오름차순 정렬을 해야 한다. <br />
먼저 단순하게 Arrays.sort() 메소드를 이용해 문제를 풀어보니, 정답 처리가 되었다.</p>

<p><br /></p>

<h4 id="arrayssort의-정답처리">Arrays.sort()의 정답처리?</h4>
<p>이전의 백준에서는 Java, Java(Open JDK), Java11로 언어 분류가 나뉘어 있었는데, 최근에 Java가 Java8로 명칭이 변경되었다. <br />
찾아보니 당시 Java8에서 Arrays.sort()를 이용했을 때 시간초과가 나도록 유도된 것 같다고 한다. <br />
그런데 Java11에서는 Java8과 다르게 다른 위치부터 피벗이 잡히기에 정렬방식이 정답처리될 수 있다고 한다. <br />
그래서 동일한 코드로 문제 제출 언어를 Java8로 바꾸어 제출하니 <strong>시간초과가 발생</strong>하였다.</p>

<p><br /></p>

<h4 id="collectionssort를-활용한-정렬-활용">Collections.sort()를 활용한 정렬 활용</h4>
<p>그렇다면 Arrays.sort() 말고 다른 정렬방식으로 시간초과를 해결해야 한다. <br />
배열을 정렬하는 <strong>Arrays.sort()</strong>와 컬렉션을 정렬하는 <strong>Collections.sort()</strong>를 사용하는데, 무엇을 사용해야 할까? <br />
Arrays.sort()와 Collections.sort()는 무슨 차이가 있는지 궁금해서 찾아보았다.</p>

<h5 id="arrayssort와-collectionssort의-차이점">Arrays.sort()와 Collections.sort()의 차이점</h5>

<table>
  <thead>
    <tr>
      <th style="text-align: center">-</th>
      <th style="text-align: center">정렬방식</th>
      <th style="text-align: center">시간복잡도</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Array.sort()</td>
      <td style="text-align: center">Dual-Pivot-Quick-sort</td>
      <td style="text-align: center">평균일 경우 O(nlog(n)),  최악일 경우 O(n^2)</td>
    </tr>
    <tr>
      <td style="text-align: center">Collections.sort()</td>
      <td style="text-align: center">Tim-Sort</td>
      <td style="text-align: center">평균 및 최악일 경우 O(nlog(n))</td>
    </tr>
  </tbody>
</table>

<p>Dual-Pivot-Quick-sort은 2개의 피벗을 사용하여 정렬을 수행하며, 퀵정렬은 평균적으로 O(NlogN), 최악일 경우 O(n^2)의 시간복잡도를 가진다. 그리고 Tim-Sort는 합병정렬을 기반으fh 일정 크기 이하의 부분 리스트에 대해서는 이진 삽입 정렬을 수행한다. 평균, 최악 모두 O(nlog(n))의 시간복잡도를 가진다.</p>

<p>상황에 따라 적절히 사용하는 것이 좋겠지만, 최악일 경우에는 <strong>O(nlog(n))의 시간복잡도</strong>를 가지는 Collections.sort()가 더 빠르다. <br />
Collections.sort() 메소드를 이용해 문제를 풀어보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">asc_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">asc_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">()));</span>
<span class="o">}</span>

<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">asc_list</span><span class="o">);</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">asc_list</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 N을 입력받고 Arraylist에 N개의 입력받은 수를 저장하고, Collections 패키지의 sort() 메소드를 이용해 오름차순으로 정렬한다. <br />
Arrays.sort() 작성코드와 동일하게 언어를 Java8로 제출하니 시간초과 발생없이 정답처리가 되었다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">asc_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">asc_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">()));</span>
        <span class="o">}</span>

        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">asc_list</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">asc_list</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>Arrays 및 Collections 패키지의 sort() 메소드의 차이점에 대해서 공부할 수 있었다.</li>
  <li>Arrays.sort()는 Java8에서 정답처리가 되지 못했으나, Collections.sort()는 Java8에서 정답이 되었다.</li>
  <li>Java8과 Java11에서의 sort() 메소드 정렬방식에 차이가 있음을 알게되었다.</li>
  <li>Arrays.sort() 정렬방식인 Dual-Pivot-Quick-sort과 Collections.sort() 정렬방식인 Tim-sort에 대해서 더 알아보고 공부해야겠다.</li>
</ul>

<h3 id="참고">참고</h3>
<ul>
  <li><a href="https://st-lab.tistory.com/106">Java8과 Java11 비교 출처</a></li>
  <li><a href="https://yuja-kong.tistory.com/183">sort() 비교 출처</a></li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2751번 - 수 정렬하기 2]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 10989번 - 수 정렬하기 3</title><link href="http://localhost:4000/java/88-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 10989번 - 수 정렬하기 3" /><published>2022-09-29T00:00:00+09:00</published><updated>2022-09-29T00:00:00+09:00</updated><id>http://localhost:4000/java/88-post</id><content type="html" xml:base="http://localhost:4000/java/88-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10989.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
10
5
2
3
1
4
2
3
5
1
7
</pre>

<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
1
1
2
2
3
3
4
5
5
7
</pre>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제에서 요구하는 시간제한은 3초이다. <br /> 
Arrays.sort() 메소드를 이용해도 풀 수 있지만, 시간 제한은 마지노선으로 보인다. <br /></p>

<p>그래서 정렬 알고리즘 중에서 O(n)으로 가장 빠른 시간복잡도를 가지는 카운팅 정렬(계수 정렬)로 풀어야 한다. <br />
<del>사실 문제 설명란에서 카운팅 정렬로 풀어야 한다고 친절히 설명해주었다.</del></p>

<p>먼저 카운팅 정렬이 무엇인지 알아보자.</p>
<blockquote>
  <p><strong>카운팅 정렬(계수 정렬)</strong> 이란? <br />
데이터의 값을 비교하여 데이터가 몇 번 나왔는지 세어 정렬하는 알고리즘이다. <br />
정렬할 배열 최대값보다 1 큰 크기의 카운팅 배열을 생성해야 하는데 <strong>수의 범위가 클 수록, 메모리 낭비가 크기에</strong> 자주 사용하지 않는다.</p>
</blockquote>

<p>본래 카운팅 정렬을 이용할 때, 아래 3가지 과정을 진행해야 하나, 본 문제에서는 정렬된 수를 출력만 하므로 간소화된 방식으로 풀어볼 예정이다.</p>
<ol>
  <li>별도의 카운팅 배열에 주어진 수가 몇번 나왔는지 세어 저장한다.</li>
  <li>카운팅 배열의 값을 합배열(누적합) 형식으로 변환한다.</li>
  <li>주어진 수 중 마지막 수부터 순회하며 카운팅 배열의 각 값에서 -1한 인덱스 값이 정렬된 배열에 새 위치가 된다.</li>
</ol>

<p>카운팅 정렬의 구체적인 메커니즘에 대해서는 <a href="https://st-lab.tistory.com/104">여기</a>를 참고하면 자세히 나와있다.</p>

<p><br /><br /></p>

<p>카운팅 정렬을 활용해 도출한 아이디어는 다음과 같다.</p>
<ul>
  <li>정렬된 수를 출력하면 되기 때문에 별도의 카운팅 배열을 생성하지 않는다.</li>
  <li>주어진 수의 범위는 10,000보다 작거나 같은 자연수이기에 10,001 만큼의 크기를 가진 배열을 생성한다.</li>
  <li>주어진 수들이 몇 번 나왔는지 카운팅 배열 인덱스에 세어 저장한다.</li>
  <li>주어진 수의 범위만큼 반복하며 인덱스 값이 0이 될 때까지 인덱스 값을 출력한다.</li>
</ul>

<p><br />
이제 코드를 작성해보자. <br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10001</span><span class="o">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N을 입력받고, 문제에서 요구한 수의 범위 +1 만큼의 arr 배열을 생성한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span> 
    <span class="n">arr</span><span class="o">[</span><span class="n">n</span><span class="o">]++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 입력받는 수마다 arr 배열의 인덱스에 카운팅하여 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]--;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마지막으로 현재 arr 배열의 값을 1씩 감소시키면서 해당 인덱스의 값이 0이 될 때까지 i값, 즉 인덱스를 출력해주면 된다.</p>

<p><br /><br /></p>

<h3 id="실행결과">실행결과</h3>
<p><img src="/assets/images/baekjoon/10989-attach.png" />
<br /></p>

<p>위 제출란이 Arrays.sort()를 이용한 풀이이고, 아래 제출란이 카운팅 정렬 풀이이다. <br />
카운팅 정렬을 이용해서 푸는 것이 훨씬 빠르다는 것을 알 수 있었다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10001</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span> 
            <span class="n">arr</span><span class="o">[</span><span class="n">n</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]--;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>정렬의 꽃인 카운팅 정렬에 대해서 공부할 수 있었고, 수의 범위가 작고 빠른 시간을 요할 땐 카운팅 정렬을 잘 활용해야 겠다고 느꼈다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10989번 - 수 정렬하기 3]]></summary></entry><entry><title type="html">[Java] 백준(실버-2) 9020번 - 골드바흐의 추측</title><link href="http://localhost:4000/java/86-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-2) 9020번 - 골드바흐의 추측" /><published>2022-09-28T00:00:00+09:00</published><updated>2022-09-28T00:00:00+09:00</updated><id>http://localhost:4000/java/86-post</id><content type="html" xml:base="http://localhost:4000/java/86-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/9020.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
3
8
10
16
</pre>

<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
3 5
5 5
5 11
</pre>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>골드바흐의 추측이 뭔지 위키를 찾아보았다. <br /></p>

<blockquote>
  <p><strong>골드바흐의 추측</strong>이란? <br />
이전부터 알려진 정수론의 미해결 문제로, <strong>2보다 큰 모든 짝수는 두 개의 소수의 합</strong>으로 표시할 수 있다는 것이다.<br />
이때 하나의 소수를 두 번 사용하는 것을 허용한다.</p>
  <ul>
    <li>골드바흐의 강한 추측: 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다.</li>
    <li>골드바흐의 약한 추측: 5보다 큰 모든 홀수는 세 소수의 합으로 나타낼 수 있다.</li>
  </ul>
</blockquote>

<p>이 문제에서는 골드바흐 파티션, 즉 2보다 큰 모든 짝수를 두 소수의 합으로 나타내는 골드바흐의 강한 추측을 이용하여 두 소수를 구해야 한다.</p>

<p>두 소수를 구하기 위한 아이디어를 생각해보았다.</p>
<ul>
  <li>n을 2로 나눈 수가 소수라면 n/2+n/2는 n이다.</li>
  <li>n을 2로 나눈 수가 소수가 아니라면 소수가 될 때까지 -1을 하거나 +1을 한다.</li>
</ul>

<p><br /><br /></p>

<p>2보다 큰 짝수들의 예를 들어보면 금방 이해할 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>n=16 -&gt; n/2=8(not prime number), 7(8-1)+9(8+1)=16
n=18 -&gt; n/2=9(not prime number), 7(9-2)+11(9+2)=18
n=20 -&gt; n/2=10(not prime number), 9(10-1)+11(10+1)=20
n=22 -&gt; n/2=11(prime number), 11+11=22
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p>그렇다면 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    
    <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">small</span><span class="o">)==</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">isPrime</span><span class="o">(</span><span class="n">big</span><span class="o">)==</span><span class="mi">2</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">small</span><span class="o">-=</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">big</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">small</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">big</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>테스트케이스 개수인 T를 입력받고, T만큼 n을 입력받는다. <br />
두 소수를 가지고 n을 구해야 하니 먼저 n/2를 두 수(small, big)에 저장해두자. <br />
그리고 <strong>small에는 -1을 big에는 +1을 하며 두 수가 소수가 될 때까지 반복</strong>하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            
            <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
            
            <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">small</span><span class="o">)==</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">isPrime</span><span class="o">(</span><span class="n">big</span><span class="o">)==</span><span class="mi">2</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="n">small</span><span class="o">-=</span><span class="mi">1</span><span class="o">;</span>
                    <span class="n">big</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">small</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">big</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">isPrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
        <span class="o">}</span>   
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>두 소수의 합으로 2보다 큰 짝수를 구할 수 있는 골드바흐의 추측에 대해 공부할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[9020번 - 골드바흐의 추측]]></summary></entry><entry><title type="html">[Java] 백준(실버-3) 4948번 - 베르트랑 공준</title><link href="http://localhost:4000/java/85-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-3) 4948번 - 베르트랑 공준" /><published>2022-09-28T00:00:00+09:00</published><updated>2022-09-28T00:00:00+09:00</updated><id>http://localhost:4000/java/85-post</id><content type="html" xml:base="http://localhost:4000/java/85-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/4948.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
1
10
13
100
1000
10000
100000
0
</pre>

<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
1
4
3
21
135
1033
8392
</pre>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>먼저 베르트랑 공준이 무엇인지 궁금하여 찾아보았다. <br /></p>

<blockquote>
  <p><strong>베르트랑 공준</strong>이란? <br />
2 이상의 임의의 정수 n에 대해서 아래 식을 만족하는 소수 p는 항상 존재한다. <br /></p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>n &lt; p &lt; 2n
</pre></td></tr></tbody></table></code></pre></div>  </div>
</blockquote>

<p>문제에서는 베르트랑 공준 내용과 같이 n보다 크고 2n보다 작은 소수의 개수를 요구하고 있다. <br /></p>

<p>이전에 풀었던 소수나 소수의 개수를 구하는 문제와 같이 에라토스테네스의 체를 이용하여 소수의 개수를 구하려고 한다. <br /></p>

<p>생각해낸 아이디어는 다음과 같다.</p>
<ul>
  <li>n이 0으로 입력될 때까지 n을 입력받는다.</li>
  <li>boolean 배열에 2부터 n*2 까지 순회하면서 소수인 경우는 false, 소수가 아닐 때는 true로 마킹한다.</li>
  <li>n부터 n*2까지 반복하며 false의 개수 즉, 소수의 개수를 찾는다.</li>
</ul>

<p><br /></p>

<p>아이디어를 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>            
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 while문을 돌면서 n이 0으로 입력될 때까지 n을 입력받는다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>n<em>2+1 만큼 boolean 배열을 초기화하고, 소수가 아닌 0과 1 자리를 true로 마킹한다. <br />
그리고 2부터 n</em>2의 제곱근까지 순회하며 소수가 아닌 수들을 true로 마킹한다.</p>

<p>마킹된 boolean 배열에서 n보다 크고 2n보다 작은 소수를 구해야 하니 <strong>n이 소수일 때 n을 소수의 개수로 포함시키면 안된다.</strong> <br />
boolean 배열에서 n+1 위치부터 n*2 위치까지 돌며 false의 개수(소수의 개수)를 세면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>            

            <span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>에라토스테네스의 체를 이용해 소수나 소수의 개수를 구하는 문제를 풀어보며, 소수를 구할 때 가장 효율적인 알고리즘임을 매번 느끼고 있다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[4948번 - 베르트랑 공준]]></summary></entry><entry><title type="html">[Java] 백준(실버-3) 1929번 - 소수 구하기</title><link href="http://localhost:4000/java/84-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-3) 1929번 - 소수 구하기" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/java/84-post</id><content type="html" xml:base="http://localhost:4000/java/84-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1929.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br />
<strong>3 16</strong></p>
</blockquote>

<blockquote>
  <p>Output <br />
<strong>3</strong> <br />
<strong>5</strong> <br />
<strong>7</strong> <br />
<strong>11</strong> <br />
<strong>13</strong> <br /></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제에서는 M과 N의 범위(최대 1,000,000) 및 제한 시간(2초)을 생각했을 때 <strong>완전탐색을 활용해 2부터 하나하나 나눠보는 것은 O(N^2)의 시간복잡도를 기지므로 시간초과가 발생</strong>하게 된다. 완전탐색 보다는 소수를 구할 때 효울적인 <strong>‘에라토스테네스의 체’</strong> 알고리즘을 활용해야 한다.</p>

<p>에라토스테네스의 체를 활용해 도출한 아이디어는 다음과 같다.</p>
<ul>
  <li>실행 시간을 줄이기 위해 불필요한 반복을 줄여야한다.</li>
  <li>M부터 N까지 모든 수를 반복하며 마킹할 필요없이 마킹할 수의 제곱근 만큼만 반복한다.</li>
  <li>마킹된 수의 배수는 소수가 아니기에 검증하지 않는다.</li>
  <li>마킹이 안된 수(소수)만 출력한다.</li>
</ul>

<p><br /></p>

<p>아이디어를 통해 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 2부터 N까지 반복하며 마킹을 기록할 배열을 선언하고, 0과 1은 소수가 아니기에 true로 마킹한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="no">N</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 2부터 N의 제곰근까지 반복하면서 소수가 아닌 수의 위치에 true로 마킹한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그렇게 2부터 N까지 마킹된 배열에서 M번째 인덱스부터 마킹이 안된 수인 소수를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="no">N</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>O(NloglogN)의 시간복잡도를 가진 에라토스테네스의 체를 활용해 제한시간 2초에 맞춰 문제를 풀 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[실버3 - 1929번 - 소수 구하기]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 2581번 - 소수</title><link href="http://localhost:4000/java/82-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 2581번 - 소수" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/java/82-post</id><content type="html" xml:base="http://localhost:4000/java/82-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2581.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>60</strong> <br />
<strong>100</strong> <br />
Output-1 <br />
<strong>620</strong> <br />
<strong>61</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>64</strong> <br />
<strong>65</strong> <br />
Output-2 <br />
<strong>-1</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 간단하게 M부터 N까지의 수중에서 소수를 찾아, 소수 중 최소값과 소수들의 합을 구하면 된다. <br />
ArrayList를 활용하여 소수들을 찾아 담아 최소값과 소수의 합을 구할 수 있다.</p>

<p>코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prime_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저, M과 N을 입력받고, 소수들을 저장할 ArrayList와 소수들의 합을 저장할 sum 변수를 초기화한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">prime_list</span><span class="o">)</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span><span class="o">;</span>

<span class="k">if</span><span class="o">(</span><span class="n">prime_list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>M부터 N까지 반복하면서 소수들을 찾아 ArrayList에 저장한다. <br />
primeList를 전부 탐색하여 sum에 더하면 소수들의 합을 구할 수 있다.
M은 N보다 작거나 같기에 prime_list는 오름차순으로 저장되어 있다. 그러므로 첫번째 원소가 최소값임을 알 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prime_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">prime_list</span><span class="o">)</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="n">prime_list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">isPrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
        <span class="o">}</span>   
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>M부터 N까지 소수가 얼마나 존재하는지 모르기에 ArrayList를 활용하여 소수들을 담아서 최솟값과 소수들의 합을 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[기본수학2 - 실버5 - 소수]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 11653번 - 소인수분해</title><link href="http://localhost:4000/java/83-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 11653번 - 소인수분해" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/java/83-post</id><content type="html" xml:base="http://localhost:4000/java/83-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11653.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>72</strong> <br />
Output-1 <br />
<strong>2</strong> <br />
<strong>2</strong> <br />
<strong>2</strong> <br />
<strong>3</strong> <br />
<strong>3</strong> <br /></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>9991</strong> <br />
Output-2 <br />
<strong>97</strong> <br />
<strong>103</strong> <br /></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제를 풀기 앞서 소인수분해가 뭔지 알아보자. <br /></p>

<blockquote>
  <p><strong>소인수분해</strong>란? <br />
1보다 큰 자연수를 소인수(소수인 인수)들만의 곱으로 나타내는 것 또는 합성수를 <strong>소수의 곱</strong>으로 나타내는 방법을 말한다. <br />
쉽게 말하자면 소수들의 곱으로 어떠한 수를 표현하는 것이다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>4 = 2*2(2의2승)
48 = 2*2*2*2*3(2의4승 * 3)
72 = 2*2*2*3*3(2의3승 * 3의2승)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그렇다면 N을 가지고 어떻게 소인수분해를 할 수 있을까? <br /></p>
<ul>
  <li>2부터 N까지 반복하며 N이 나눠지는 지를 확인한다.</li>
  <li>N이 소수로 나눠진다면 N을 소수로 나눈다.</li>
</ul>

<p>위 과정을 반복하여 N이 1이 된다면 소인수분해가 끝난 것으로 생각하면 된다. 문제 요구사항대로 소수들의 곱을 출력해야 하기에 N이 소수로 나눠질때 소수를 출력하자. <br /></p>

<p><br /></p>

<p>그렇다면 소인수분해 과정을 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="no">N</span> <span class="o">/=</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N을 입력받고, 2부터 N까지 반복하는 반복문 안에서 N이 i로 나눠진다면 i를 출력하고, N을 i로 나누고 i보다 작은 1이 될때까지 반복하게 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
                <span class="no">N</span> <span class="o">/=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>소인수 분해를 코드로 표현하며, 특정 수를 소수들의 곱으로 나타낼 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[기본수학2 - 브론즈1 - 소인수분해(11653번)]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 캐시</title><link href="http://localhost:4000/java/81-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 캐시" /><published>2022-09-23T00:00:00+09:00</published><updated>2022-09-23T00:00:00+09:00</updated><id>http://localhost:4000/java/81-post</id><content type="html" xml:base="http://localhost:4000/java/81-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220923_01.png" width="700" /></center>
<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>cacheSize=3, cities=[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”, “Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”]</strong> <br />
Output-1 <br />
<strong>50</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>cacheSize=3, cities=[“Jeju”, “Pangyo”, “Seoul”, “Jeju”, “Pangyo”, “Seoul”, “Jeju”, “Pangyo”, “Seoul”]</strong> <br />
Output-2 <br />
<strong>21</strong></p>
</blockquote>

<blockquote>
  <p>Input-3 <br />
<strong>cacheSize=0, cities=[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”]</strong> <br />
Output-3 <br />
<strong>25</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제를 풀기에 앞서 캐시와 캐시 교체 정책에 대해서 알아보자. <br /></p>

<blockquote>
  <p><strong>캐시</strong>란? <br />
캐시는 데이터나 값을 <strong>미리 복사해 놓는 임시 장소</strong>이다. 캐시에 데이터를 미리 복사해 놓으면, 계산이나 접근 시간 없이 더 빠른 속도로 데이터에 접근할 수 있다.</p>
</blockquote>

<blockquote>
  <p><strong>캐시 교체 정책</strong> <br />
캐시에 모든 데이터를 다 담아둘 수 없기에, 캐시크기는 제한되고 새로운 캐시로 변경되어야 하는데, <br />
캐시 교체 정책을 통해 어떤 데이터를 삭제하고, 새로운 데이터를 캐시로 저장할지를 캐시 교체 정책 알고리즘을 통해 결정할 수 있다. <br /></p>
</blockquote>

<p><strong>캐시 교체 정책 알고리즘의 종류</strong></p>
<ol>
  <li>FIFO(First in First Out)
    <ul>
      <li>가장 먼저 들어간 캐시를 교체한다.</li>
    </ul>
  </li>
  <li>LFU(Least Frequently Used)
    <ul>
      <li>사용 횟수가 가장 적은 캐시를 교체한다.</li>
    </ul>
  </li>
  <li><strong>LRU(Least Recently Used)</strong>
    <ul>
      <li>가장 오랫동안 사용되지 않은 것 교체한다.</li>
    </ul>
  </li>
</ol>

<p>이 문제에서는 캐시 교체 정책중 <strong>LRU 알고리즘</strong>을 활용하여 문제를 풀어야 한다.</p>

<h4 id="lruleast-recently-used">LRU(Least Recently Used)</h4>
<p>캐시 공간이 부족할 때, <strong>가장 오랫동안 사용하지 않은 데이터를 제거하고, 새로운 캐시를 부여</strong>하는 형식으로 동작한다.</p>

<p>예를 들어 캐시 공간이 3이라고 할 때, 1,2,3,2 순으로 데이터가 들어온다고 하자. <br />
1,2,3 까지는 캐시가 등록이 되는데, 마지막 2가 들어올 때, 2를 사용한 기록이 있기에 2를 최근 캐시로 등록하면 된다. (cache=[1,3,2])</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>1. cache size=3, 1 -&gt; 2 -&gt; 3 순차 호출
    [tail] 1-2-3 [head]
2. 2 캐시 등록: 2를 head로 이동.
    [tail] 1-3-2 [head]
3. 4 캐시 등록: LRU는 1이므로 1 제거.
    [tail] 3-2-4 [head]
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>캐시와 캐시 교체 정책중 하나인 LRU에 대해서 알았으니, 문제를 풀어보자. <br />
문제 요구사을 살펴보고 생각해낸 아이디어는 다음과 같다.</p>
<ul>
  <li>cache <strong>hit일 경우는 최근 캐시에 요청한 데이터가 존재할 경우</strong>이고 <strong>cache miss는 최근 캐시에 요청한 데이터가 존재하지 않을 경우</strong>이다. <br />
    <ul>
      <li>cache hit일 때는 1, cache miss일 때는 5씩을 증가시키면 된다.</li>
    </ul>
  </li>
  <li>cache size가 0일 때는 어떤 데이터가 들어와도 5의 실행시간이 걸린다.</li>
  <li>cache의 공간이 차면 LRU 대로 가장 오래된 tail 요소부터 제거하고 새로운 데이터를 저장한다.</li>
</ul>

<p><br /></p>

<p>이제 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 캐시로 사용할 Queue를 LinkedList로 초기화한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cities</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">city</span> <span class="o">=</span> <span class="n">cities</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">toLowerCase</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">city</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">qu</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
            <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>캐시 사이즈가 0이라면, cities에 어떤 데이터가 있더라도 데이터마다 5의 실행시간이 걸리기 때문에 가장 바깥 조건문으로 작성하였다. <br />
그리고 최근 캐시에 존재하는 데이터가 들어오면 해당 데이터를 head로 옮기고, 처음 들어오는 데이터라면 head에 바로 등록한다. <br />
이 때, 캐시의 공간이 부족하다면 tail을 제거하고 새로운 데이터를 head에 추가한다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">cities</span> <span class="o">=</span> <span class="o">{</span><span class="s">"Jeju"</span><span class="o">,</span> <span class="s">"Pangyo"</span><span class="o">,</span> <span class="s">"Seoul"</span><span class="o">,</span> <span class="s">"NewYork"</span><span class="o">,</span> <span class="s">"LA"</span><span class="o">,</span> <span class="s">"Jeju"</span><span class="o">,</span> <span class="s">"Pangyo"</span><span class="o">,</span> <span class="s">"Seoul"</span><span class="o">,</span> <span class="s">"NewYork"</span><span class="o">,</span> <span class="s">"LA"</span><span class="o">};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "NewYork", "newyork"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "NewYork", "LA"};</span>
        <span class="c1">// String[] cities = {"1","2","3","2"};</span>
        <span class="c1">// String[] cities = {"1","1"};</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">cities</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">cities</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cities</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">city</span> <span class="o">=</span> <span class="n">cities</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">toLowerCase</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">city</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
                    <span class="n">qu</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                    <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                        <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>캐시에 대해서 공부하며, 캐시 동작 원리, 캐시 교체 정책에 대해서 알 수 있었다.</li>
  <li>Queue(큐)를 통해 LinkedList를 활용하여 캐시를 구현할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 캐시]]></summary></entry></feed>