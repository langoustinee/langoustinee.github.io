<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-24T17:49:59+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 문자열 내 마음대로 정렬하기</title><link href="http://localhost:4000/java/32-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 문자열 내 마음대로 정렬하기" /><published>2022-08-24T00:00:00+09:00</published><updated>2022-08-24T00:00:00+09:00</updated><id>http://localhost:4000/java/32-post</id><content type="html" xml:base="http://localhost:4000/java/32-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220824_01.png" /></center>

<blockquote>
  <p>Input-1 <br />
strings = [sun, bed, car] <br />
n = 1 <br />
Output-1 <br />
[car, bed, sun]</p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
strings = [abce, abcd, cdx] <br />
n = 2 <br />
Output-2 <br />
[abcd, abce, cdx]</p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<p>기준 문자열의 인덱스를 순서대로 본 문자열을 정렬해야 한다. <br />
나는 소문자 전체를 돌며 검증하는 방식으로 풀었는데 다른 분의 풀이를 보고 부족함을 많이 느꼈다..</p>

<h4 id="a부터-z까지-확인하여-검증하는-방식">a부터 z까지 확인하여 검증하는 방식</h4>

<p>소문자 a부터 z까지 순회(i)하며 문자열의 n번째 인덱스를 찾아 answer 배열에 넣는다. <br />
a부터 z까지 정렬된 순서로 반복하기에 사전순으로 검증할 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">97</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">123</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span><span class="n">i</span> <span class="o">==</span> <span class="n">strings</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="n">answer</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">strings</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그런데 내가 푼 방식보다 더 좋은 풀이를 보았다.. <br />
한번 알아보자.</p>

<h4 id="기준-문자열을-붙이는-방식">기준 문자열을 붙이는 방식</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 1</span>
    <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">strings</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">+</span> <span class="n">strings</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span> <span class="c1">// 2</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 3</span>
    <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br />
코드를 분석하기 위해 예시를 들어 생각해보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>strings = [abce, abcd, cdx], n = 2
1. answer = [cabce, cabcd, xcdx]
2. answer = [cabcd, cabce, xcdx]
3. answer = [abcd, abce, cdx]
</pre></td></tr></tbody></table></code></pre></div></div>
<p>abce와 abcd의 기준 문자열이 c로 같을 때 c를 앞에 붙이고 정렬하면 사전순으로 정렬이 가능하다. <br />
그렇게 깔끔하게 기준되는 문자열의 인덱스 순서로 정렬할 수 있다.</p>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution1</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="c1">// a부터 z까지 확인하여 검증하는 방식</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">solution1</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">strings</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">97</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">123</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span><span class="n">i</span> <span class="o">==</span> <span class="n">strings</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="n">answer</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">strings</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 기준 문자열을 붙이는 방식</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">solution2</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">strings</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">strings</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">+</span> <span class="n">strings</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>char형의 알파벳으로만 접근하려고 하니 다른 관점에서 전혀 생각해 볼 수 없었다. 다른 분들의 풀이를 보며 여러 관점에서 문제에 접근할 수 있음을 깨달았고 많이 배웠다.</li>
  <li>기준 문자열을 본 문자열에 붙여 정렬하면 사전순으로 정렬된다는 사실에 감탄을 금치 못했다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 문자열 내 마음대로 정렬하기]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 가운데 글자 가져오기</title><link href="http://localhost:4000/java/33-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 가운데 글자 가져오기" /><published>2022-08-24T00:00:00+09:00</published><updated>2022-08-24T00:00:00+09:00</updated><id>http://localhost:4000/java/33-post</id><content type="html" xml:base="http://localhost:4000/java/33-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220824_02.png" width="600" /></center>

<blockquote>
  <p>Input-1 <br />
abced <br />
Output-1 <br />
c</p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
abcd <br />
Output-2 <br />
bc</p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<p>주어진 문자열의 길이가 홀수냐 짝수냐에 따라 검증방식을 다르게 접근해야 한다. <br /></p>

<p><strong>홀수일 경우</strong></p>
<ul>
  <li>가운데 문자를 반환한다.</li>
  <li>문자열을 순회하며 주어진 문자열의 길이를 반으로 나눈 수와 같은 수를 찾으면 된다.</li>
</ul>

<p><strong>짝수일 경우</strong></p>
<ul>
  <li>가운데 2개의 문자를 반환한다.</li>
  <li>문자열을 반으로 나눈 수의 인덱스와 인덱스+1의 수를 찾으면 된다.</li>
</ul>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()/</span><span class="mi">2</span><span class="o">)-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()/</span><span class="mi">2</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">answer</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()/</span><span class="mi">2</span><span class="o">))</span> <span class="n">answer</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>무작정 풀이를 위한 코드보다 간결하게 작성할 수 있는지도 함께 고려할 수 있는 능력을 길러야 함을 느꼈다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 가운데 글자 가져오기]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 소수 찾기</title><link href="http://localhost:4000/java/31-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 소수 찾기" /><published>2022-08-18T00:00:00+09:00</published><updated>2022-08-18T00:00:00+09:00</updated><id>http://localhost:4000/java/31-post</id><content type="html" xml:base="http://localhost:4000/java/31-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220818_01.png" /></center>

<blockquote>
  <p>Input-1 <br />
10 <br />
Output-1 <br />
4</p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
5 <br />
Output-2 <br />
3</p>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>먼저 n까지의 수 중 소수를 찾아야 한다. <br /></p>

<blockquote>
  <p>소수란?
2, 3, 5, 7, 11, 13, 17 … <br />
약수가 1과 자신 뿐인 수이다.</p>
</blockquote>

<h4 id="어떻게-소수를-구할-수-있을까">어떻게 소수를 구할 수 있을까?</h4>
<p>n까지의 수중에서 n보다 작은 수를 나눠지는 수가 있다면 소수가 아니다. <br />
즉, 어떤 수의 배수이면 소수가 아니라는 것이다. <br /></p>

<p>여기까지 이해하였으면 무작정 코딩을 시작해보자. <br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="c1">// 소수가 아닌 0과 1을 제외한 n까지의 수</span>
<span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">isPrime</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 소수 X</span>
            <span class="n">isPrime</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">continue</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
    <span class="n">i</span><span class="o">++;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>바깥의 while문을 통해 2부터 n까지 순회하는데 <br />
안쪽의 for문을 통해 i별로 x를 i로 나눠지는 수가 있다면 소수가 아니다. <br />
또한 소수가 아니라면 반복문의 끝까지 순회할 필요가 없고 수행시간이 오래 걸리기에 break문을 추가하였다.</p>

<p>이때 n값을 50000으로 부여하여 코드를 실행해보니 수행시간은 약 <strong>150 밀리초</strong>가 소요되었다. <br />
그리고 테스트케이스 11, 12에서 시간초과 문제가 발생하였다.</p>

<h4 id="수행시간을-줄이는-방법은">수행시간을 줄이는 방법은?</h4>
<p>이제 어떠한 로직으로 접근하여 수행시간을 최소화할 수 있는지 생각해 보아야 한다. <br /></p>

<p>먼저 <strong>n보다 작은 수의 소수들로만 나누어보면</strong> 어떨까? <br />
prime(리스트)에 소수를 넣어두고 2부터 n까지 순회하며 i별로 prime의 원소와 나누어지는 지를 검증해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prime</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 소수를 관리할 리스트</span>
<span class="n">prime</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">prime</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="n">prime</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="n">prime</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 안쪽 반복문을 통해 n까지의 수중에서 소수들로만 나누어 떨어지면 break하여 불필요한 반복을 줄일 수 있다. <br /></p>

<p>이때도 동일하게 n을 50000으로 실행해보았고 수행시간은 첫번째 풀이의 절반정도인 <strong>70 밀리초</strong> 정도 소요되었다. <br />
하지만 이번 풀이도 테스트케이스 11에서 시간초과가 발생하였다.</p>

<h4 id="에라토스테네스의-체를-활용한-풀이">에라토스테네스의 체를 활용한 풀이</h4>
<p>소수를 찾는 방법중 잘 알려져 있는 에라토스테네스의 체 방식을 활용해 풀어보자.</p>

<blockquote>
  <p>에라토스테네스의 체 알고리즘
n이 100이라고 하면 2부터 100까지를 배열에 담은 후 소수가 아닌 것들을 마킹하여 마킹이 안된 수들인 소수를 판별하는 알고리즘이다.</p>
</blockquote>

<p>이 알고리즘을 구현하며 중요하게 생각해야 할 것은 앞에서도 언급했지만 바로 <strong>불필요한 반복을 줄이는 것</strong>이다! <br />
배열에 담아두고 소수가 아닌 수를 마킹할 때 모든 수를 다 순회하며 마킹할 필요없이 마킹할 수의 <strong>제곱근 만큼만 반복</strong>하는 것이다. <br />
또한 <strong>마킹된 수의 배수는 이미 마킹한 것으로 판단하고 검증하지 않도록</strong> 구현하면 된다.</p>

<p>에라토스테네스의 체 알고리즘을 활용한 코드는 아래와 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">// 소수가 아니면 true, 소수일 경우 false</span>
<span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// 0, 1은 소수가 아니기에 true</span>

<span class="c1">// 제곱근까지만 반복하며 중첩반목문을 통해 n의 배수에서 소수가 아닌 수를 검증</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> 
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">res</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">res</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span> <span class="c1">// 소수의 개수</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>2부터 n의 제곱근까지만 순회(i)하며 i마다 j는 i+i부터 시작해서 i만큼 더하며 n+1만큼 담은 배열의 길이만큼 돌며 소수가 아닌 수를 마킹한다. <br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>// n = 10
// arr: 0,1,2,3,4,5,6,7,8,9,10
i가 2일 때 j는 i+i인 4부터 시작하여 4, 6, 8, 10 수를 돌며 마킹한다.
i가 3일 때 j는 i+i인 6부터 시작하여 6, 9 수를 돌며 마킹한다.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>에라토스테네스의 체를 통해 작성한 코드를 실행하니 <strong>7 밀리초</strong> 정도로 대폭 줄어든 것을 확인할 수 있었고 문제 채점도 통과할 수 있었다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution3</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>        
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">res</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">res</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>단순히 소수를 찾는 로직은 어렵지 않았으나 소수를 찾는 시간을 줄이는 것을 핵심으로 고민하는 과정에서 에라토스테네스의 체 알고리즘을 공부할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 소수 찾기]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 시저 암호</title><link href="http://localhost:4000/java/30-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 시저 암호" /><published>2022-08-17T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><id>http://localhost:4000/java/30-post</id><content type="html" xml:base="http://localhost:4000/java/30-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220817_01.png" /></center>

<blockquote>
  <p>Input-1 <br />
“AB” <br />
Output-1 <br />
“BC”</p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
“a B z” <br />
Output-2 <br />
“b C a”</p>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>주어진 문자열에서 대소문자 알파벳을 하나씩 앞으로 밀어낸 알파벳을 찾아야 한다.<br /></p>

<p>먼저 아래의 조건을 검증해보자.<br /></p>
<ul>
  <li>주어진 문자열 중에서 공백값은 밀어내지 않고 그대로 담는다.</li>
  <li>주어진 문자열 중에서 대소문자를 구분한다. // ascii code의 경우 65~90이 대문자, 97~122가 소문자</li>
  <li>대문자 ‘Z’나 소문자 ‘z’의 <strong>범위를 초과했을 경우 ‘A’, ‘a’부터 n만큼</strong> 밀어낸다.</li>
</ul>

<p>공백값일 경우는 밀어낼 필요가 없기에 그대로 담는다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="k">if</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span><span class="n">asc</span> <span class="o">!=</span> <span class="sc">' '</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// 생략</span>
<span class="o">}</span><span class="k">else</span> <span class="n">answer</span> <span class="o">+=</span> <span class="sc">' '</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>대소문자를 구분할 boolean 변수를 생성하여 소문자일 경우에만 false로 변경하자.<br />
반복문을 한바퀴씩 순회할 때마다 다시 true로 변경하여 다시 검증할 수 있도록 작성하였다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kt">boolean</span> <span class="n">alph</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="sc">'z'</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">asc</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">asc</span> <span class="o">&gt;=</span> <span class="sc">'a'</span><span class="o">)</span> <span class="n">alph</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">alph</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>대문자 ‘Z’의 범위(asc &gt; 122)를 초과했을 경우 ‘A’로 돌아가서 n만큼 밀어내고 <br />
소문자 ‘z’의 범위(asc &gt; 90)를 초과했을 경우 ‘a’로 돌아가서 n만큼 밀어내면 된다. <br />
초과하지 않았을 경우는 그냥 n만큼 밀어낸 알파벳을 담으면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">if</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span><span class="n">asc</span> <span class="o">!=</span> <span class="sc">' '</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">alph</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">asc</span><span class="o">+</span><span class="n">n</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="o">)</span> <span class="n">answer</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">asc</span> <span class="o">-</span> <span class="mi">91</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">65</span><span class="o">);</span> <span class="c1">// 대문자 Z 넘어갈 경우</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">alph</span> <span class="o">==</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">asc</span><span class="o">+</span><span class="n">n</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">122</span><span class="o">)</span> <span class="n">answer</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">asc</span> <span class="o">-</span> <span class="mi">123</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">97</span><span class="o">);</span> <span class="c1">// 소문자 z 넘어갈 경우</span>
    <span class="k">else</span> <span class="n">answer</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">asc</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">asc</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="kt">boolean</span> <span class="n">alph</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">asc</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="k">if</span><span class="o">(</span><span class="sc">'z'</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">asc</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">asc</span> <span class="o">&gt;=</span> <span class="sc">'a'</span><span class="o">)</span> <span class="n">alph</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">if</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span><span class="n">asc</span> <span class="o">!=</span> <span class="sc">' '</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">alph</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">asc</span><span class="o">+</span><span class="n">n</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="o">)</span> <span class="n">answer</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">asc</span> <span class="o">-</span> <span class="mi">91</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">65</span><span class="o">);</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">alph</span> <span class="o">==</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">asc</span><span class="o">+</span><span class="n">n</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">122</span><span class="o">)</span> <span class="n">answer</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">asc</span> <span class="o">-</span> <span class="mi">123</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">97</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">answer</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">asc</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="n">answer</span> <span class="o">+=</span> <span class="sc">' '</span><span class="o">;</span>
            <span class="n">alph</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>char형 변환을 다루어 ascii code 로 변환하여 정수형으로 알파벳을 계산하는 방식에 어느정도 익숙해지고 어떤 로직으로 구성해야 할지 조금 감이 잡힌 것 같다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 시저 암호]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 최대공약수와 최소공배수</title><link href="http://localhost:4000/java/28-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 최대공약수와 최소공배수" /><published>2022-08-11T00:00:00+09:00</published><updated>2022-08-11T00:00:00+09:00</updated><id>http://localhost:4000/java/28-post</id><content type="html" xml:base="http://localhost:4000/java/28-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220811_01.png" /></center>

<blockquote>
  <p>Input-1 <br /></p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>n = 3, m = 12
</pre></td></tr></tbody></table></code></pre></div>  </div>
  <p>Output-1 <br /></p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[3, 12]
</pre></td></tr></tbody></table></code></pre></div>  </div>
</blockquote>

<blockquote>
  <p>Input-2 <br /></p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>n = 2, m = 5
</pre></td></tr></tbody></table></code></pre></div>  </div>
  <p>Output-2 <br /></p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[1, 10]
</pre></td></tr></tbody></table></code></pre></div>  </div>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>최대공약수와 최소공배수를 구하는 문제이다. <br /></p>

<blockquote>
  <p>최대공약수(Greatest Common Divisor)란? <br />
0이 아닌 두개이 상의 정수의 공통된 약수중 가장 큰 수이다.</p>
</blockquote>

<p>일반적으로 푸는 방식과 유클리드 호제법을 통해 푸는 방식 두가지로 풀어보았다.</p>

<h4 id="일반적인-방식">일반적인 방식</h4>
<p>먼저 최대공약수(GCD)를 구해보자. <br />
두 수의 공약수중 가장 큰 공약수를 구하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre> <span class="c1">// 1. 두수의 약수를 구해 최대공약수를 찾는다.</span>
<span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">?</span> <span class="n">n</span> <span class="o">:</span> <span class="n">m</span><span class="o">;</span> <span class="c1">// 두수중 작은수를 저장</span>
<span class="kt">int</span> <span class="no">GCD</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 최대 공약수</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">low</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="no">GCD</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다음으로 최소공배수(LCM)는 더욱 간단하게 구할 수 있다. <br />
두수의 곱에서 최소공배수를 나눠주면 된다.</p>
<ul>
  <li>n * m / GCD(최소공배수)</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// 2. 두수의 공배수 중 최소공배수를 찾는다. 최소공배수 = n*m/max</span>
<span class="kt">int</span> <span class="no">LCM</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="o">/</span><span class="no">GCD</span><span class="o">;</span> <span class="c1">// 최소공배수</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="유클리드-호제법을-통한-방식">유클리드 호제법을 통한 방식</h4>
<p>일반적으로 최대공약수는 소인수분해 및 소인수들의 곱을 통해 구할 수 있는데, <br />
특정 수의 약수가 매우 많다면, 인수분해 및 두수를 비교하여 곱하는 과정에서 많은 시간이 소요된다.<br />
이 점을 방지한 알고리즘 방식이 바로 <strong>유클리드 호제법</strong>이다.</p>

<blockquote>
  <p>유클리드 호제법이란? <br />
두 개의 수가 주어졌을 때 최대공약수를 구하는 알고리즘이다. <br />
<strong>두개의 수 A, B가 존재하고, A&gt;B일 때, A, B를 나눈 나머지가 C라면 A와 B의 GCD(최대공약수)는 B와 C의 GCD와 같다.</strong></p>
</blockquote>

<p>간단하게 예를 들어보자. <br />
50과 23 두개의 수가 있다고 하자. <br /></p>
<ol>
  <li>두 수중 큰 수는 12이다. A=50, B=23</li>
  <li>큰 수를 작은 수로 나눈 나머지를 구한다. A%B = 50%23 = 4</li>
  <li>C(나머지)를 통해 B를 다시 나눠 나머지를 구한다. 23%4 = 3</li>
  <li>나머지가 0이 될 때까지 3번을 다시 반복한다. 4%3 = 1</li>
  <li>나머지가 0이 될 때까지 3번을 다시 반복한다. 3%1 = 0</li>
  <li>5번에서 나머지가 0이 되었으므로 5번에서의 나눈 수(작은 수)인 1이 최대공약수가 된다.</li>
</ol>

<p>그렇다면 유클리드 호제법으로 최대공약수를 구하는 과정을 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">static</span> <span class="kt">int</span> <span class="nf">eucd</span><span class="o">(</span><span class="kt">int</span> <span class="n">bn</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sn</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// bn:큰수, sn:작은수</span>
    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bn</span> <span class="o">%</span> <span class="n">sn</span><span class="o">;</span> <span class="c1">// 나머지 수</span>
    <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">sn</span><span class="o">;</span>
    <span class="k">else</span> <span class="k">return</span> <span class="nf">eucd</span><span class="o">(</span><span class="n">sn</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">// 나머지가 0보다 크면 작은수와 나머지수를 통해 재귀함수 호출</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>bn을 sn으로 나눈 나머지를 r에 저장하는데 r이 0보다 클 경우 재귀함수를 통해 0이 되는 시점의 sn을 반환하는 함수를 작성하였다.<br />
최소공배수는 일반적인 방식 풀이에서와 같은 방법으로 풀이하였으니 생략하였다.</p>

<h3 id="작성코드">작성코드</h3>
<h4 id="일반적인-방식---작성코드">일반적인 방식 - 작성코드</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">n</span><span class="o">,</span><span class="n">m</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">?</span> <span class="n">n</span> <span class="o">:</span> <span class="n">m</span><span class="o">;</span>
        <span class="kt">int</span> <span class="no">GCD</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">low</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="no">GCD</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="no">LCM</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="o">/</span><span class="n">max</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="no">GCD</span><span class="o">;</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="no">LCM</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="유클리드-호제법을-통한-방식---작성코드">유클리드 호제법을 통한 방식 - 작성코드</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">n</span><span class="o">,</span><span class="n">m</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">bn</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">sn</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">&gt;</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span> 
            <span class="n">bn</span><span class="o">=</span><span class="n">n</span><span class="o">;</span> 
            <span class="n">sn</span><span class="o">=</span><span class="n">m</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">bn</span><span class="o">=</span><span class="n">m</span><span class="o">;</span> 
            <span class="n">sn</span><span class="o">=</span><span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="no">GCD</span> <span class="o">=</span> <span class="n">eucd</span><span class="o">(</span><span class="n">bn</span><span class="o">,</span> <span class="n">sn</span><span class="o">);</span> <span class="c1">// 유클리드 호제법으로 최대공약수 구함</span>
        <span class="kt">int</span> <span class="no">LCM</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="o">/</span><span class="no">GCD</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="no">GCD</span><span class="o">;</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="no">LCM</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">eucd</span><span class="o">(</span><span class="kt">int</span> <span class="n">bn</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sn</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Euclidean algorithm</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bn</span> <span class="o">%</span> <span class="n">sn</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">sn</span><span class="o">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="nf">eucd</span><span class="o">(</span><span class="n">sn</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>최대공약수를 구하는 알고리즘 중 유클리드 호제법에 대해서 공부를 할 수 있었고, 일반적으로 최대공약수를 구하는 방식보다 실행속도면에서 좋은 패턴임을 알게되었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 최대공약수와 최소공배수]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 이상한 문자 만들기</title><link href="http://localhost:4000/java/29-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 이상한 문자 만들기" /><published>2022-08-11T00:00:00+09:00</published><updated>2022-08-11T00:00:00+09:00</updated><id>http://localhost:4000/java/29-post</id><content type="html" xml:base="http://localhost:4000/java/29-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220811_02.png" /></center>

<blockquote>
  <p>Input-1 <br />
“try hello world”
Output-1 <br />
“TrY HeLlO WoRlD”</p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
“ABC  aBc   abC “
Output-2 <br />
“Abc  Abc   Abc “</p>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>

<p>문제 설명을 보면 주어진 문자열은 한개 이상의 단어로 구성되어 있으며, 각 단어는 하나 이상의 공백문자로 구분된다고 한다. <br />
각 단어별로 짝수번째 인덱스의 단어는 대문자로, 홀수번째 인덱스의 단어는 소문자로 변경된 문자열을 반환해야 한다. <br />
여기서 핵심은 <strong>“각 단어는 하나 이상의 공백문자로 구분된다.”</strong> 이라고 생각한다.</p>

<p>그럼 공백문자를 기준으로 문자열을 잘라 각 단어들에 접근하는 방법을 알아보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"try hello world"</span><span class="o">;</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>먼저 java.lang.String 클래스의 split() 메서드의 regex 인자에 “ “ 값을 넣어준다면 어떤 결과가 나올까?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>// "try hello world"
try
hello
world
</pre></td></tr></tbody></table></code></pre></div></div>

<p>공백값을 기준으로 문자열을 잘랐기에 위와 같은 문자열 배열을 이룰 것이다. <br />
만약 “try hello world” 라는 입력값의 경우는 단어 사이에만 공백이 존재하기에 위 방법으로 각 단어들에 접근이 가능하다. <br /></p>

<p>하지만 “try  hello     world” 라는 입력값의 경우 단어 사이에 여러개의 공백이 존재한다. <br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>// "try  hello    world"
try
hello
world
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 방법으로는 각 단어 사이의 존재하는 여러개의 공백문자를 찾아낼 수 없다. <br />
우리가 원하는 것은 각 단어 사이의 공백문자까지 포함한 문자열을 반환하는 것이다.</p>

<h4 id="어떻게-단어-사이의-공백문자를-찾을까">어떻게 단어 사이의 공백문자를 찾을까?</h4>
<p>해답은 <strong>split() 메서드</strong>에 있다. split() 메서드는 사용하는 방식이 2가지가 있다.</p>
<ul>
  <li>public String[] split(String regex)</li>
  <li>public String[] split(String regex, <strong>int limit</strong>)
    <blockquote>
      <p><strong>regex라는 문자를 구분자로, limit는 나눠지는 배열의 길이를 제한한다.</strong></p>
    </blockquote>
  </li>
</ul>

<p>나는 2번째 방식으로 limit 인자를 추가로 전달하여 문제를 해결하려 한다. <br />
또한 limit에 어떤 값이 들어가냐에 따라 3가지로 나뉜다.</p>

<ol>
  <li>
    <p><strong>limit가 0일 경우</strong> <br />
단순하게 split(String regex) 메서드를 사용하는 것과 같은 기능을 한다. <br />
split(“ “,0)과 split(“ “)은 동일하다.</p>
  </li>
  <li><strong>limit가 양수일 경우</strong> <br />
limit에 지정한 수만큼 배열의 크기가 결정된다.(String[]의 크기) <br />
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"a,b,c,,,"</span><span class="o">;</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
<span class="c1">// output: ["a", "b,c,,"]</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>예를 들어 “a,b,c,,,”라는 문자열이 있으면 [“a”, “b,c,,”]로 저장된다.</p>
  </li>
  <li><strong>limit가 음수일 경우</strong> <br /> 
limit가 음수일 경우 구분자에 따라 전부 나눠주며 공백 또한 데이터로 보고 배열에 저장된다. <br />
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"a,b,c,,,"</span><span class="o">;</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="c1">// output: ["a", "b", "c", "", "" ,""]</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>예를들어 “a,b,c,,,”라는 문자열이 있으면 [“a”, “b”, “c”, “”, “”, ““]로 저장된다. <br />
limit에 음수값을 넣어 주어진 문자열에 있는 각 단어사이의 공백문자가 들어간 경우를 해결할 수 있게 된다.</p>
  </li>
</ol>

<p>그러면 split() 메서드에 limit를 음수값으로 넣어 주어진 문자열의 각 단어 사이의 공백문자도 포함하여 찾을 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">String</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 주어진 문자열을 공백문자 기준으로 공백문자를 포함하여 배열에 저장한다.</span>
<span class="c1">// input:"try  hello   world", output:["try", " ", "hello", " ", "world"]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>공백문자를 기준으로 잘라 배열의 저장하니 공백문자 개수가 -1개임을 확인하였다. <br />
이제 각 단어별로 짝수번째 인덱스인지, 홀수번째 인덱스인지를 확인하여 대소문자로 치환하는 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)).</span><span class="na">toUpperCase</span><span class="o">());</span>
        <span class="k">else</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)).</span><span class="na">toLowerCase</span><span class="o">());</span>      
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>// input:"try  hello  world"
try -&gt; TrY

hello -&gt; HeLlO

world -&gt; WoRlD
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 배열만큼 반복문을 돌며 짝수번째 인덱스는 대문자, 홀수번째 인덱스는 소문자로 치환되도록 작성하였다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>// input:"try  hello  world"
i=0, str[i]="try"
// sb="TrY"
i=1, str[i]=" "
// sb="TrY "
i=2, str[i]="hello"
//sb="TrY  HeLlO"
i=3, str[i]=" "
//sb="TrY  HeLlO "
i=4, str[i]="world"
//sb="TrY  HeLlO  WoRlD"
</pre></td></tr></tbody></table></code></pre></div></div>

<p>또한 입력값과 동일한 공백문자를 포함해야 하는데 현재는 공백값이 -1개로 포함되어 있기에 공백문자도 추가로 포함시켜야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)).</span><span class="na">toUpperCase</span><span class="o">());</span>
        <span class="k">else</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)).</span><span class="na">toLowerCase</span><span class="o">());</span>      
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span> <span class="c1">// i가 배열의 길이-1보다 작을 때 공백문자 추가</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>대소문자 치환과 공백문자를 추가로 포함시킨 코드를 작성하였다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)).</span><span class="na">toUpperCase</span><span class="o">());</span>
                <span class="k">else</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)).</span><span class="na">toLowerCase</span><span class="o">());</span>      
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>java.lang.String 클래스에서 split()메서드의 limit 인자를 통해 주어진 문자열의 구분자를 허용하도록 할 수 있음을 알게되었다.</li>
  <li>문제 설명에서 모든 제약사항을 알려주지 않으니 나름대로 꼼꼼히 제약사항을 파악할줄 알아야 함을 느꼈다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 이상한 문자 만들기]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 백준 1193번</title><link href="http://localhost:4000/java/27-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 백준 1193번" /><published>2022-08-10T00:00:00+09:00</published><updated>2022-08-10T00:00:00+09:00</updated><id>http://localhost:4000/java/27-post</id><content type="html" xml:base="http://localhost:4000/java/27-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1193.png" /></center>

<blockquote>
  <p>Input-1 <br />
1 <br />
Output-1 <br />
1/1</p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
2 <br />
Output-2 <br />
1/2</p>
</blockquote>

<blockquote>
  <p>Input-3 <br />
5 <br />
Output-3 <br />
2/2</p>
</blockquote>

<blockquote>
  <p>Input-4 <br />
9 <br />
Output-4 <br />
3/2</p>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>먼저 배열의 행들을 대각선으로 바라보고 접근하면 더욱 이해가 빠를 것이다. <br />
<del>본인은 문제를 이해하는 데도 상당히 오래 걸렸다..</del></p>

<p>입력받은 수를 X라 하면 특정 패턴을 통해 X번째의 분수값을 찾아야 한다.</p>

<ul>
  <li>X가 <strong>몇번째 행</strong>인지(몇번째 대각선 행) 찾는다.</li>
  <li>X의 행을 알았다면, 행 내에서 <strong>몇번째 원소</strong>인지 찾는다.</li>
  <li>X가 <strong>짝수행인지 홀수행인지 구분</strong>하여 분수값을 찾는다.</li>
</ul>

<h4 id="어느-행에-존재하는가">어느 행에 존재하는가?</h4>
<p>먼저 X가 몇번째 대각선 행에 존재하는 값인지를 알아보자. <br />
X의 범위를 검증해줄 cnt변수와 몇번째 행일지를 저장할 row 변수를 선언 및 초기화한다. <br />
1번째 행부터 반복하며 찾아야 하니 row는 1로 초기화한다. <br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 몇번째 행인지</span>
<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// X의 범위를 찾을 변수</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>아래 식의 값이 X보다 클 때의 row(행)값을 통해 X가 몇번째 행인지 알 수 있다.</p>
<ul>
  <li>행 * (행 + 1) / 2</li>
</ul>

<p>구체적으로는 while문에서의 <strong>X&gt;cnt 조건이 거짓이 될 때 row값</strong>을 알고 있으면 된다. <br />
예를들어 X가 5라고 하자. row는 1부터 순차적으로 증가한다.<br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>cnt = 1*(1+1)/2 = 1
cnt = 2*(2+1)/2 = 3
cnt = 3*(3+1)/2 = 6
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 cnt가 6이되면 X보다 크므로 반복문을 탈출하게되고 <br />
그때의 row 값을 통해 X가 5라면 <strong>3번째 행에 존재하는 분수값</strong>임을 알 수 있다.</p>

<p>이렇게 구상해본 로직을 코드로 작성해보면 아래와 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="no">X</span><span class="o">&gt;</span><span class="n">cnt</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 행의 개수 증가시키며 X의 범위를 찾는다.</span>
    <span class="n">row</span><span class="o">++;</span> 
    <span class="n">cnt</span> <span class="o">=</span> <span class="n">row</span><span class="o">*(</span><span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="몇번째-원소인가">몇번째 원소인가?</h4>
<p>다음으로 X가 어느 행의 값인지 알았으니 해당 행에서 몇번째 원소에 존재하는지 알아보자.</p>

<p>해당 행에서의 원소순서를 찾아 저장할 idx 변수를 선언하고 초기화한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 해당 행에서의 원소순서</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>아래 식을 통해 해당 행에서의 몇번째 원소인지 알 수 있다.</p>
<ul>
  <li>X(주어진 수) - (행-1) * 행 / 2</li>
</ul>

<p>예를 들어 X가 5일 때는 3번째 행임을 알고 있다. <br />
해당 식에 값을 대입해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>// X=5
idx = 5-(3-1)*3/2 = 2
</pre></td></tr></tbody></table></code></pre></div></div>

<p>X가 5라면 3번째 행의 2번째 원소임을 알게되었다. <br />
idx를 구하는 식도 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">idx</span> <span class="o">=</span> <span class="no">X</span> <span class="o">-</span> <span class="o">(</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="o">)*</span><span class="n">row</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="분수값을-찾아내자">분수값을 찾아내자</h4>
<p>자 앞에서 X가 어느 행의 몇번째 원소인지 찾아냈다. <br />
이제 짝수행인지 홀수행인지 구분하여 분자와 분모값을 구해보자.</p>

<p>분수배열을 기준으로 홀수행일 경우 우측상단으로 진행되고 <br />
짝수행일 경우 좌측하단으로 진행되는데 이때 홀수행과 짝수행일 때의 분자, 분모값이 다르다.</p>
<ul>
  <li>홀수행이면 분자는 감소, 분모는 증가</li>
  <li>짝수행이면 분자는 증가, 분모는 감소</li>
</ul>

<p>분자값을 top, 분모값을 bot라는 변수로 선언하고 초기화하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 분자</span>
<span class="kt">int</span> <span class="n">bot</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 분모</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>먼저 홀수행일 때를 보자. <br />
top(분자)가 행값에서부터 -1씩 감소하는 값으로 이루어진다. <br />
아래 식으로 분자값을 찾을 수 있고 분모값은 현재 idx(원소순서) 값과 같다.</p>
<ul>
  <li>top(분자) = row(행) - idx(원소순서) + 1</li>
  <li>bot(분모) = idx(원소순서)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>// 홀수행일 경우
top = row-idx+1;
bot = idx;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그리고 짝수행일 때는 홀수행과 반대이므로 분자와 분모를 반대로 대입해서 풀면 된다. <br /></p>
<ul>
  <li>top(분자) = idx(원소순서)</li>
  <li>bot(분모) = row(행) - idx(원소순서) + 1</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>// 짝수행일 경우
top = idx;
bot = row-idx+1;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>예를 들어 X=4 라면 3번쨰의 행의 1번째 원소이다. 값을 대입해보자.<br />
X=4 일 때 3번째 행의 1번째 원소인 3/1를 찾을 수 있다.</p>
<ul>
  <li>top = 3-1+1 = 3</li>
  <li>bot = 1</li>
</ul>

<p>그렇다면 홀수행과 짝수행을 검증하여 분자와 분모값을 찾는 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">if</span> <span class="o">(</span><span class="n">row</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 홀수행</span>
    <span class="n">top</span> <span class="o">=</span> <span class="n">row</span><span class="o">-</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
    <span class="n">bot</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
    
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span> <span class="c1">// 짝수행</span>
    <span class="n">top</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
    <span class="n">bot</span> <span class="o">=</span> <span class="n">row</span><span class="o">-</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="kt">int</span> <span class="no">X</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">bot</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">if</span><span class="o">(</span><span class="no">X</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">top</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> 
            <span class="n">bot</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="no">X</span><span class="o">&gt;</span><span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">row</span><span class="o">++;</span> 
                <span class="n">cnt</span> <span class="o">=</span> <span class="n">row</span> <span class="o">*</span> <span class="o">(</span><span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="no">X</span> <span class="o">-</span> <span class="o">(</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="o">)*</span><span class="n">row</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">row</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bot</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
                <span class="n">top</span> <span class="o">=</span> <span class="n">row</span><span class="o">-</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">bot</span> <span class="o">=</span> <span class="n">row</span><span class="o">-</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">top</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">top</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">bot</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>백준의 기본수학 단계의 문제를 푸는데 브론즈 1 문제인데도 기초 수학 지식이 부족해서인지 처음에 문제를 읽는데 이해도 잘 안되고, 패턴 파악에 굉장히 많은 시간을 보내고 있다.ㅠ</li>
  <li>문제의 내용을 보고 충분히 어려가지 패턴을 생각해내어 정답에 근접할 수 있는 로직 자체를 구상하는 시간을 줄이는 것이 중요한 것 같다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[분수 찾기]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 행렬의 덧셈</title><link href="http://localhost:4000/java/25-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 행렬의 덧셈" /><published>2022-08-09T00:00:00+09:00</published><updated>2022-08-09T00:00:00+09:00</updated><id>http://localhost:4000/java/25-post</id><content type="html" xml:base="http://localhost:4000/java/25-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220809_02.png" /></center>

<blockquote>
  <p>Input-1 <br /></p>
  <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">arr1</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">],[</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">]]</span>
<span class="n">arr2</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">],[</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">]]</span>
</pre></td></tr></tbody></table></code></pre></div>  </div>
  <p>Output-1 <br /></p>
  <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">answer</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="o">],[</span><span class="mi">7</span><span class="o">,</span><span class="mi">9</span><span class="o">]]</span> <span class="c1">// arr1 + arr2</span>
</pre></td></tr></tbody></table></code></pre></div>  </div>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>2차원 배열을 활용해 행렬의 같은 행과 같은 열의 값을 더한 행렬을 구해야 한다. <br />
더해질 두 행렬은 행과 열의 크기가 같기에 중첩 반복문을 활용해 행과 열만큼 반복하여 더하는 방식으로 접근하자.</p>

<ul>
  <li>바깥 반복문은 배열의 행(가로)만큼 반복한다.</li>
  <li>안쪽 반복문은 배열의 열(세로)만큼 반복한다.</li>
</ul>

<p>예를들어 i가 0,1 행의 인덱스만큼 순회할 때 열의 인덱스를 접근하려면 j가 i[0 or 1].length 값이어야 한다. <br /></p>

<p>한번 테스트케이스에 대입해보자. <br />
첫번째 순회시 i가 0이면 해당 행의 값은 1이고 arr[0].length는 1이기에 둘째 행의 값은 3이다. <br />
두번째 순회시는 같은 방식으로 2, 4 행 값이 나오게 된다.</p>

<p>행과 열로써 보면 아래과 같이 순회한다고 볼 수 있다. <br />
그렇다면 같은 행과 같은 열의 값에 접근할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[][]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
<span class="n">answer</span> <span class="o">=</span> <span class="n">arr1</span><span class="o">;</span> <span class="c1">// answer에 첫번째 행렬 저장</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 행렬의 행만큼 순회</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr1</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">//행렬의 열만큼 순회</span>
        <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+=</span> <span class="n">arr2</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span> <span class="c1">// answer에 arr1값이 있기에 arr2값을 더해줌</span>
    <span class="o">}</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>중첩 반복문으로 같은 행과 같은열을 더하여 answer에 대입하는 코드는 위와 같다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{{</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">}};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{{</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">4</span><span class="o">}};</span>
        <span class="c1">// int[][] arr1 = {{1,2}, {2,3}};</span>
        <span class="c1">// int[][] arr2 = {{3,4}, {5,6}};</span>
        
        <span class="n">solution</span><span class="o">(</span><span class="n">arr1</span><span class="o">,</span> <span class="n">arr2</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">arr1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr2</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">arr1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr1</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+=</span> <span class="n">arr2</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
            <span class="o">}</span> 
        <span class="o">}</span>        
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>2차원 배열 내에서 어떻게 각 행과 열 별로(인덱스별로) 접근해야할지 다시끔 리마인드 할 수 있었던 문제였다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 행렬의 덧셈]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 프로그래머스 - 두 개 뽑아서 더하기</title><link href="http://localhost:4000/java/24-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 프로그래머스 - 두 개 뽑아서 더하기" /><published>2022-08-09T00:00:00+09:00</published><updated>2022-08-09T00:00:00+09:00</updated><id>http://localhost:4000/java/24-post</id><content type="html" xml:base="http://localhost:4000/java/24-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/programmers/20220809_01.png" /></center>

<blockquote>
  <p>Input-1 <br />
<strong>[2,1,3,4,1]</strong> <br />
Output-1 <br />
<strong>[2,3,4,5,6,7]</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>[5,0,2,7]</strong> <br />
Output-2 <br />
<strong>[2,5,7,9,12]</strong></p>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>이 문제를 풀때 주의할 점은 아래와 같다.</p>

<ul>
  <li>배열의 인덱스별로 더할 때 본인 인덱스와는 더할 필요가 없다.</li>
  <li>배열의 인덱스별로 더하여 배열에 담을 때 중복값이 없어야 한다.</li>
  <li>담은 배열을 오름차순으로 정렬해야 한다.</li>
</ul>

<p>중첩 반복문으로 인덱스 별로 더한 값을 알 수 있는데, <br />
본인 인덱스일 경우에는 더할 필요가 없기 때문에 다른 인덱스일 경우에만 더하면 된다.</p>

<p>그리고 더한 값을 배열에 담을 때 중복값이 들어가면 안되기에 HashSet으로 담아 중복을 걸려냈다.</p>

<blockquote>
  <p>HashSet이란? <br />
Set 인터페이스에서 지원하는 구현 클래스로 Set의 성질을 그대로 상속받기에 <strong>중복을 허용하지 않는다.</strong>
다만, <strong>저장 순서를 고려하지 않는다.</strong> <br />
저장 순서를 고려해야 한다면 같은 Set 인터페이스를 구현한 <strong>TreeSet</strong>과 <strong>LinkedHashSet</strong>를 사용할 수 있다.</p>
</blockquote>

<h4 id="문제-요구사항에-오름차순으로-정렬해야-하는데-왜-저장순서를-고려하지-않는-hashset을-사용했나">문제 요구사항에 오름차순으로 정렬해야 하는데 왜 저장순서를 고려하지 않는 HashSet을 사용했나?</h4>
<p>배열의 오름차순 정렬을 사용해보기 위해 정렬을 고려하지 않는 HashSet을 사용하였다. <br />
그렇게 배열의 인덱스별로 더하여 HashSet에 담아 중복을 걸러내도록 작성하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="o">)</span> <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다만 앞서 말했듯, 정렬을 고려하지 않았기에 배열의 순서가 뒤죽박죽 일 것이라 오름차순 정렬을 해야 한다. <br />
Set을 다시 정수배열로 담고 java.util.Arrays 클래스의 sort() 메서드를 사용하여 정렬하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">set</span><span class="o">);</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">answer</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
<span class="o">}</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="c1">// int[] arr = {5, 0, 2, 7};</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="o">)</span> <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">set</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">ans</span> <span class="o">:</span> <span class="n">answer</span><span class="o">)</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>Set 인터페이스에서 구현한 HastSet의 역할이 무엇인지 어떠한 상황에서 사용하는 것이 바람직한지 조금은 알게되었다.</li>
  <li>알고리즘 문제를 푸는 과정에서 배열을 어떻게 정렬하냐에 따라서 풀이속도가 달라지는 것을 느꼈다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 1 - 두 개 뽑아서 더하기]]></summary></entry><entry><title type="html">[알고리즘 스터디 - Java] 백준 2292번</title><link href="http://localhost:4000/java/26-post/" rel="alternate" type="text/html" title="[알고리즘 스터디 - Java] 백준 2292번" /><published>2022-08-09T00:00:00+09:00</published><updated>2022-08-09T00:00:00+09:00</updated><id>http://localhost:4000/java/26-post</id><content type="html" xml:base="http://localhost:4000/java/26-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2292.png" /></center>

<blockquote>
  <p>Input-1 <br />
<strong>13</strong> <br />
Output-1 <br />
<strong>3</strong></p>
</blockquote>

<h3 id="문제-풀이">문제 풀이</h3>
<p>이 문제는 특정 로직을 잘 파악하여 패턴을 나열하며 풀어야 한다.</p>

<p>먼저 1부터 N까지의 최소 루트를 구하는 것이니 N이 1일 경우엔 1이면 된다. <br />
N이 2이상일 경우에는 아래와 같은 패턴을 유추해볼 수 있다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">N의 범위</th>
      <th style="text-align: center">벌집의 개수</th>
      <th style="text-align: center">최소 루트</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">2 ~ 7</td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td style="text-align: center">8 ~ 19</td>
      <td style="text-align: center">12</td>
      <td style="text-align: center">3</td>
    </tr>
    <tr>
      <td style="text-align: center">20 ~ 37</td>
      <td style="text-align: center">18</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">38 ~ 61</td>
      <td style="text-align: center">24</td>
      <td style="text-align: center">5</td>
    </tr>
  </tbody>
</table>

<p>위 패턴을 통해 벌집의 개수인 <strong>6의 배수 및 N의 범위별로 최소루트가 증가함</strong>을 알 수 있다. <br /></p>

<p>벌집의 개수인 특정 6의 배수보다 N보다 작을 때 최소루트를 증가시키고 아니라면 반복문을 탈출하면 된다. <br />
코드로 한번 작성해보자.</p>

<p>반복문 내에서 N이 특정 6의 배수보다 작을 때 range라는 변수를 1로 초기화한 후 <br />
N보다 작으면 6의 배수에 +1만큼 더하여 검증할 수 있도록 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 최소 루트</span>
<span class="kt">int</span> <span class="n">range</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// n의 범위</span>
<span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">range</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// n의 값과 가장 근소한 6의 배수일 경우</span>
        <span class="n">range</span> <span class="o">=</span> <span class="n">range</span> <span class="o">+</span> <span class="mi">6</span><span class="o">*</span><span class="n">cnt</span><span class="o">;</span> <span class="c1">// 6의 배수별로 순회</span>
        <span class="n">cnt</span><span class="o">++;</span> <span class="c1">// 6의 배수마다 카운트 증가</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span> <span class="c1">// 최소 루트 출력</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>range를 1로 초기화한 이유는?</strong> <br />
실제로 N의 범위는 2~7, 8~19, 20~37 일때 순서대로 2, 3, 4의 최소루트를 가진다.
예를들어 N이 7이라 해보자.<br />
range는 1+6*1 = 7이고, 최소루트(cnt)는 2가 된다. <br /></p>

<p>그리고 range가 7이어 N과 같기에 반복문을 탈출할 수 있게된다. <br /> 
그런데 만약 range가 0이라면 7이나 19, 37, 61 등의 경우에 한바퀴를 더 돌게 되어 최소루트가 3이되므로 +1을 하여 초기화를 해준 것이다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> 
        <span class="kt">int</span> <span class="n">range</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">range</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">range</span> <span class="o">+=</span> <span class="mi">6</span><span class="o">*</span><span class="n">cnt</span><span class="o">;</span>
                <span class="n">cnt</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>문제의 패턴을 이해하고 보니 알고리즘 자체는 쉬운편이었는데, 문제의 내용을 이해를 전혀 못해 시간이 많이 소요되었다. <br /> 
한 문제에 너무 많은 시간을 투자한 것이 아쉽지만 꼭 이 문제의 패턴이나 로직의 느낌을 잘 알아두어야 겠다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[벌집]]></summary></entry></feed>