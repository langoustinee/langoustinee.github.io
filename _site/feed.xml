<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-18T23:51:46+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 백준(실버-2) 1966번 - 프린터 큐</title><link href="http://localhost:4000/java/142-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-2) 1966번 - 프린터 큐" /><published>2022-12-13T00:00:00+09:00</published><updated>2022-12-13T00:00:00+09:00</updated><id>http://localhost:4000/java/142-post</id><content type="html" xml:base="http://localhost:4000/java/142-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1966.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li></li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1966">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1966번 - 프린터 큐]]></summary></entry><entry><title type="html">[Java] 백준(실버-2) 1654번 - 랜선 자르기</title><link href="http://localhost:4000/java/141-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-2) 1654번 - 랜선 자르기" /><published>2022-12-11T00:00:00+09:00</published><updated>2022-12-11T00:00:00+09:00</updated><id>http://localhost:4000/java/141-post</id><content type="html" xml:base="http://localhost:4000/java/141-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1654.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 이분 탐색을 적절히 응용할 줄 알아야 한다.<br />
먼저 문제의 패턴부터 살펴보자. 먼저 K개의 랜선을 동일한 길이의 N개의 랜선으로 잘라 만들어야 하는데, 이 때 최대로 가질 수 있는 길이를 구해야 한다. <br /></p>

<p>예제와 같이 K=4, N=11이라고 한다면 4개의 랜선을 11개로 만들 수 있을 때 최대로 가질 수 있는 길이를 찾아보자.<br /></p>

<ol>
  <li>
    <p>만약 199의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 199씩 4개, <br />
743 길이를 가진 랜선은 199씩 3개, <br />
457 길이를 가진 랜선은 199씩 2개, <br />
539 길이를 가진 랜선은 199씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 199</strong>이다.</p>
  </li>
  <li>
    <p>만약 201의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 201씩 3개, <br />
743 길이를 가진 랜선은 201씩 3개, <br />
457 길이를 가진 랜선은 201씩 2개, <br />
539 길이를 가진 랜선은 201씩 2개로 총 <strong>10개의 랜선을 가지게되어 11개를 만들 수가 없다.</strong></p>
  </li>
  <li>
    <p>만약 200의 크기로 자른다고 한다면 <br />
802 길이를 가진 랜선은 200씩 4개, <br />
743 길이를 가진 랜선은 200씩 3개, <br />
457 길이를 가진 랜선은 200씩 2개, <br />
539 길이를 가진 랜선은 200씩 2개로 총 <strong>11개의 랜선을 가질 수 있고 이떄 랜선의 최대 길이는 200</strong>이다..</p>
  </li>
</ol>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">K</span><span class="o">];</span>

        <span class="kt">long</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="n">max</span><span class="o">++;</span>

        <span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(</span><span class="n">min</span> <span class="o">&lt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">max</span> <span class="o">+</span> <span class="n">min</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
            <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">/</span> <span class="n">mid</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
            <span class="k">else</span> <span class="n">min</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">min</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li></li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1654">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1654번 - 랜선 자르기]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-3) 1085번 - 직사각형에서 탈출</title><link href="http://localhost:4000/java/140-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-3) 1085번 - 직사각형에서 탈출" /><published>2022-12-10T00:00:00+09:00</published><updated>2022-12-10T00:00:00+09:00</updated><id>http://localhost:4000/java/140-post</id><content type="html" xml:base="http://localhost:4000/java/140-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1085-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/1085-attach02.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 따로 특정한 알고리즘을 활용할 필요가 없을 정도로 쉽다. <br /></p>

<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcQ81rt%2FbtqDKoXSzVB%2FcPaewKxgCKrMnSsSY7FbK1%2Fimg.png" width="50%" /></p>

<p>위 이미지와 같이 현재 한수의 위치 (X,Y)에서 직사각형을 벗어나기 위한 최소거리를 구하면 된다. <br />
상, 하, 좌, 우로 움직여 직사각형을 벗어날 수 있는데, 결국 <strong>X, W-X, Y, H-Y 중에서 가장 작은 수가 최소거리가 된다.</strong></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>X, Y, W, H 를 입력받는다.</li>
  <li>직사각형에서 벗어날 수 있는 상(H-Y), 하(Y), 좌(X), 우(W-X) 중에서 가장 최소값을 구한다.</li>
</ul>

<p>아이디어를 이해하기는 쉬우니 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">X</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">Y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">W</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">H</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>공백을 기준으로 X, Y, W, H를 입력아 변수에 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">min_X</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">X</span><span class="o">,</span> <span class="no">W</span><span class="o">-</span><span class="no">X</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">min_Y</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">Y</span><span class="o">,</span> <span class="no">H</span><span class="o">-</span><span class="no">Y</span><span class="o">);</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min_X</span><span class="o">,</span> <span class="n">min_Y</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위에서 언급한 상(<strong>H-Y</strong>), 하(<strong>Y</strong>), 좌(<strong>X</strong>), 우(<strong>W-X</strong>) 값들을 비교하여 가장 최소가 되는 수가 최소거리가 되기에 최소거리를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">X</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">Y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">W</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">H</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">min_X</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">X</span><span class="o">,</span> <span class="no">W</span><span class="o">-</span><span class="no">X</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">min_Y</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">Y</span><span class="o">,</span> <span class="no">H</span><span class="o">-</span><span class="no">Y</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min_X</span><span class="o">,</span> <span class="n">min_Y</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>


        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>특별한 알고리즘 없이 단순 구현만으로 해결할 수 있는 문제였다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/1085">문제 링크</a>에서 참조바랍니다.</li>
  <li>좌표 <a href="https://st-lab.tistory.com/86">이미지 출처</a></li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[1085번 - 직사각형에서 탈출]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 11050번 - 이항 계수 1</title><link href="http://localhost:4000/java/139-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 11050번 - 이항 계수 1" /><published>2022-12-07T00:00:00+09:00</published><updated>2022-12-07T00:00:00+09:00</updated><id>http://localhost:4000/java/139-post</id><content type="html" xml:base="http://localhost:4000/java/139-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11050.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제 풀이에 앞서 이항 계수가 무엇인지 알아보자. <br /></p>

<blockquote>
  <p><strong>이항계수</strong>란? <br />
위키백과를 보면 조합론에서 이항 계수(inomial coefficient)는 이항식을 이항 정리로 전개했을 때 각 항의 계수이며, 주어진 크기의 (순서 없는) 조합의 가짓수라고 한다.</p>
</blockquote>

<p>전체 집합에서 원소개의 개수 n에 대해 k개의 아이템을 뽑는 이항계수(조합의 수)는 다음과 같다.
<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/af575850eec19a2efa2ac71d38c3a4c7af88bf5d" width="300px" /></p>

<p>이항식 <code class="language-plaintext highlighter-rouge">(x+y)^2</code> 을 이항정리로 전개한다면 <code class="language-plaintext highlighter-rouge">(x+y)^2 = x^2 + 2xy + y^2</code> 인데, 이 때의 각 항의 계수인 <strong>[1,2,1]</strong>이 이항계수이다.</p>

<p>그리고 이항계수는 조합을 통해 구할 수 있는데, 단순하게 위 공식을 이용하면 5개의 집합 중에서 2개를 순서없이 고르는 이항계수는 <code class="language-plaintext highlighter-rouge">5! / (2! * 3!)</code>이며 5!는 120이고, 2!는 2, 3!는 6이다. 120/12가 되어 답은 10이된다.</p>

<p><br /></p>

<p><strong>파스칼의 삼각형</strong> <br />
이항계수를 구하는 방법 중에 <strong>파스칼의 삼각형</strong>이 있다. 파스칼의 삼각형은 아래의 그림과 같은 관계가 성립한다.</p>

<p><br /></p>
<center><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbtKRHE%2FbtqDEG4glgs%2FvVU4LKVx4pY5KurS70E3Dk%2Fimg.png" width="80%" /></center>
<center><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbsc0El%2FbtqDEY4Gn0z%2FVym2MLS3hKxplUV9vMWj81%2Fimg.png" width="30%" /></center>
<p><br /></p>

<p><br /></p>

<h4 id="아이디어-도출---팩토리얼">아이디어 도출 - 팩토리얼</h4>
<ul>
  <li>특별한 아이디어 없이 위에서 본 점화식을 그대로 팩토리얼로 구현하면 된다.</li>
</ul>

<p>바로 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">K</span><span class="o">)</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="no">K</span><span class="o">))</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>N과 K를 입력받고 이항계수 공식대로 <code class="language-plaintext highlighter-rouge">N! / K! * (N-K)!</code> 를 factorial 함수로 표현한다. <br />
factorial 함수 코드의 내용은 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">factorial</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">return</span> <span class="no">N</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>팩토리얼을 사용한 무난한 이항계수 알고리즘이다. <br />
팩토리얼을 통해 구현할 떄 주의할 점은 factorial 함수가 <strong>‘0!’ 일 경우 1을 반환</strong>하도록 해야한다.</p>

<p>팩토리얼을 구현하여 제출하면 정답을 낼 수는 있지만 문제에서 요구하는 N과 K의 범위가 작기 때문이라고 생각이 들었다. <br />
팩토리얼을 통한 풀이는 기본적으로 시간복잡도가 크기에 수의 범위가 작은 이번 문제에서나 가능한 접근방식인 것 같다.</p>

<h4 id="아이디어-도출---재귀">아이디어 도출 - 재귀</h4>
<ul>
  <li>이항계수 알고리즘을 점화식 그대로 재귀로 구현한다.</li>
</ul>

<p>바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>binomial 함수에 N과 K를 주어 호출한다. <br />
binomial 함수의 내용은 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">K</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="no">N</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
	    <span class="k">return</span> <span class="nf">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">);</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>재귀로 구현한 방식인데 이 방식의 경우 N의 범위가 커질수록 <strong>O(n!)의 시간복잡도를 가지기에 제한시간이 빠듯하다면 시간초과가 발생할 가능성이 매우 높다.</strong> <br />
그래서 재귀를 사용하여 <strong>부분 문제</strong>를 풀 경우 중복되는 부분 문제가 나오더라도 다시 풀게 되기에 효율적이지 않다.</p>

<blockquote>
  <p><strong>메모이제이션(memoization)</strong>이란? <br />
메모이제이션은 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이라고 한다. - 위키백과</p>
</blockquote>

<h4 id="아아디어-도출----동적계획법-풀이dp">아아디어 도출 -  동적계획법 풀이(DP)</h4>
<p>파스칼의 삼각형을 통해, 이항계수를 구하는 알고리즘은 <strong>중복 부분문제와 최적 부분구조를 만족하므로 동적계획법으로 이항계수를 구할 수 있다.</strong> <br />
그렇게 재귀로 풀었던 알고리즘에 동적계획법을 이용한다.</p>
<ul>
  <li>메모이제이셔을 할 배열을 초기에 선언한다.</li>
  <li>재귀로 각 부분 문제들에 접근하여 문제가 풀리면 메모이제이션을 할 배열에 저장해 나가도록 구현한다.</li>
</ul>

<p><br /></p>

<p>재귀 풀이 방식에 동적계획법을 코드로 적용해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="no">DP</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>main 메서드 바깥에, 즉 전역으로 2차원 배열 DP를 선언하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">// main 메서드</span>
<span class="no">DP</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">K</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 main 메서드 안에서 DP 배열을 초기화한후 binomial_coefficient 함수에 N과 K를 주어 호출한다. <br />
binomial_coefficient 함수의 내용은 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial_coefficient</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">];</span> <span class="c1">// recycle</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">K</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="no">N</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> 
    <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>첫번째 if문이 중요한데, 이미 풀었던 부분 문제일 경우 값을 재활용하기 위해 해당 배열의 값을 return해야 한다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<h4 id="작성코드---팩토리얼">작성코드 - 팩토리얼</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="n">factorial</span><span class="o">(</span><span class="no">K</span><span class="o">)</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span><span class="o">-</span><span class="no">K</span><span class="o">))</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">factorial</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="no">N</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="작성코드---재귀">작성코드 - 재귀</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
	    <span class="k">return</span> <span class="nf">binomial</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="작성코드---동적계획법dp">작성코드 - 동적계획법(DP)</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="no">DP</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="no">DP</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">K</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binomial_coefficient</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="no">K</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">];</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">K</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="no">N</span> <span class="o">==</span> <span class="no">K</span><span class="o">)</span> <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		<span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="no">K</span><span class="o">]</span> <span class="o">=</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="no">K</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">binomial_coefficient</span><span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="no">K</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>이항계수에 대해서 알아보고 공부할 수 있었으며, nCr 공식을 통해 쉽게 문제를 풀 수 있었다.</li>
  <li>이항계수를 구하는 점화식을 통해 팩토리얼로 푸는 방식, 재귀로 푸는 방식을 생각해낼 수 있었지만 이는 주어진 N,K의 범위가 매우 작기에 가능한 방법이었고, 성능을 향상시키기 위해선 동적계획법(DP)를 통해 중복되는 부분 문제들을 넘기고 풀도록 구현할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/11050">문제 링크</a>에서 참조바랍니다.</li>
  <li>파스칼의 삼각형 첨부 <a href="https://rh-tn.tistory.com/32">이미지 출처</a></li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[11050번 - 이항 계수 1]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 11866번 - 요세푸스 문제 0</title><link href="http://localhost:4000/java/138-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 11866번 - 요세푸스 문제 0" /><published>2022-12-06T00:00:00+09:00</published><updated>2022-12-06T00:00:00+09:00</updated><id>http://localhost:4000/java/138-post</id><content type="html" xml:base="http://localhost:4000/java/138-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11866.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>1부터 N까지 나열된 수에서 K번째 수마다 차례대로 뽑아낸 수열을 출력하면 되는데, <strong>큐</strong>를 이용하면 쉽게 풀 수 있다. <br />
예제를 살펴보면 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>N=7, K=3
[1,2,[3],4,5,6,7] -&gt; [3]
[1,2,4,5,[6],7] -&gt; [3,6]
[1,[2],4,5,7] -&gt; [3,6,2]
[1,4,5,[7]] -&gt; [3,6,2,7]
[1,4,[5]] -&gt; [3,6,2,7,5]
[[1],4] -&gt; [3,6,2,7,5,1]
[[4]] -&gt; [3,6,2,7,5,1,4]
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 삭제된 현재 위치에서 K번째 수를 찾아가고, 그 수를 삭제하면서 큐의 원소가 남지 않을 때까지 무한 반복을 하면 된다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>1부터 N까지의 수가 저장된 큐를 순회하며 K번째 수가 되기 전(K-1번 만큼)까지 큐에서 <strong>꺼내서(poll)</strong> 맨 뒤로 <strong>넣는다.(offer)</strong></li>
  <li>K번째 수를 꺼내서 출력한다.</li>
</ul>

<p><br /></p>

<p>간단하게 정리하면 K-1번 만큼 큐에서 꺼내고 넣다가, K번째에는 꺼내서 출력만 하면 된다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N과 K를 입력받고 하나의 큐를 선언하고 1부터 N까지의 수를 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;"</span><span class="o">);</span>

<span class="k">while</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
<span class="o">}</span>

<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">"&gt;"</span><span class="o">);</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>문제 출력 요구사항을 보면 수열 혈태인 <code class="language-plaintext highlighter-rouge">&lt;1,2,3&gt;</code> 형태로 출력해야 하기에 StringBuilder를 이용한다. <br />
큐의 <strong>원소가 1개 남을 때까지</strong> K-1번 만큼 큐에서 추출하고(poll) 맨 뒤에 삽입(offer)하다가 K번째 수가 되면 추출(poll)하여 StringBuilder에 넣는다. <br />
그렇게 while문 종료후 마지막 남은 1개의 원소를 추출(poll)하고 <code class="language-plaintext highlighter-rouge">&gt;</code>를 넣어 요구 출력사항을 만족시키면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;"</span><span class="o">);</span>

        <span class="k">while</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">numbers</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">poll</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">"&gt;"</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>단순히 큐의 선입선출(FIFO) 성질을 이용만 하는 것이 아니라 추출하고 삽입하는 과정에서 문제의 요구사항을 어떻게 충족시킬 수 있을지 고민하여 알고리즘 아이디어를 도출할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/11866">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[11866번 - 요세푸스 문제 0]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 10866번 - 덱</title><link href="http://localhost:4000/java/137-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 10866번 - 덱" /><published>2022-12-05T00:00:00+09:00</published><updated>2022-12-05T00:00:00+09:00</updated><id>http://localhost:4000/java/137-post</id><content type="html" xml:base="http://localhost:4000/java/137-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10866-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/10866-attach02.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 문제에서도 나와있듯이 Deque(덱)을 이용해서 <strong>큐의 양쪽에서 삽입/삭제</strong>를 진행할 수 있기에 쉽게 풀 수 있다. <br /></p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>N개의 명령어를 입력받으며 다음을 수행한다.</p>
<ul>
  <li>push_X [N] 명령어를 받으면 N을 큐에 삽입한다.
    <ul>
      <li><strong>push_front 명령어라면 N을 큐의 맨 앞에 삽입</strong>한다.</li>
      <li><strong>push_back 명령어라면 N을 큐의 맨 뒤에 삽입</strong>한다.</li>
    </ul>
  </li>
  <li>pop_X 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 큐에서 값을 추출하고 출력한다.
    <ul>
      <li><strong>pop_front 명령어라면 큐의 맨 앞(front) 값을 추출</strong>한다.</li>
      <li><strong>pop_back 명령어라면 큐의 맨 뒤(back) 값을 추출</strong>한다.</li>
    </ul>
  </li>
  <li>size 명령어를 받으면 현재 큐의 삽입된 값의 개수를 출력한다.</li>
  <li>empty 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “1”, 비어있지 않다면 “0”을 출력한다.</li>
  <li>front 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 <strong>getFirst()</strong> 메서드를 이용해 현재 큐의 front(맨 앞) 값을 출력한다.</li>
  <li>back 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 <strong>getLast()</strong> 메서드를 이용해 back(맨 뒤) 값을 출력**한다.</li>
</ul>

<p><br /></p>

<p>큐의 <strong>맨 앞과 맨 뒤 값에 접근해서 삽입/삭제</strong> 작업을 추가로 해줘야 한다. <br />
이 작업을 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">// push_X</span>
<span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"front"</span><span class="o">))</span> <span class="n">deq</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
    <span class="k">else</span> <span class="n">deq</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">// pop_X</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"pop"</span><span class="o">))</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"front"</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">pollLast</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 코드대로 push_front일 때는 큐의 맨 앞에 num 값을 삽입하고, push_back일 때는 큐의 맨 뒤에 num 값을 삽입한다. <br />
또한, pop 명령어일 경우 큐가 비어있는지 확인하여 pop_front일 때는 큐의 맨 앞값을 추출하고, pop_back이라면 큐의 맨 뒤값을 추출하면 된다.</p>

<p>나머지 코드는 <a href="https://jooney-95.github.io/java/136-post/">큐</a>, <a href="https://jooney-95.github.io/java/128-post/">큐2</a> 문제에서 작성한 코드와 동일하며, 전체코드는 아래에서 확인할 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deq</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"front"</span><span class="o">))</span> <span class="n">deq</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">deq</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"pop"</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"front"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                    <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                    <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">pollLast</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="s">"pop"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="o">{</span>
                            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">poll</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"size"</span><span class="o">:</span>
                        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"front"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">getFirst</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"back"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">getLast</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">default</span><span class="o">:</span>
                        <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>최근 큐의 맨 앞과 맨 뒤에 접근하여 삽입/삭제 작업을 진행할 수 있는 Deque(덱)을 활용하는 문제들을 여럿 풀어보고 있다. 단지 개념정도를 알고 푸는 문제들뿐 아니라 난이도가 있는 문제들도 풀어봐야겠다.</li>
  <li>Queue를 구현하는 또 다른 방식인 LinkedList 라이브러리도 공부해야겠다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/10866">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10866번 - 덱]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 10845번 - 큐</title><link href="http://localhost:4000/java/136-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 10845번 - 큐" /><published>2022-12-04T00:00:00+09:00</published><updated>2022-12-04T00:00:00+09:00</updated><id>http://localhost:4000/java/136-post</id><content type="html" xml:base="http://localhost:4000/java/136-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10845-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/10845-attach02.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 Queue를 활용하는데, 일반적으로 Queue 인터페이스를 LinkedList로 구현하는 방식이 아닌 Deque와 LinkedList를 활용해 풀어보았다. <br />
Deque 인터페이스나 LinkedList 라이브러리는 앞에서 말한 일반적인 Queue 구현 방식보다 맨 앞과 맨 뒤의 값을 쉽게 가져올 수 있기 때문에 별도로 맨 뒤(back) 값을 구할 필요가 없다.</p>

<p>또한, 백준 <a href="https://jooney-95.github.io/java/136-post/">10845</a>번 문제와 로직 자체는 비슷한 방식으로 풀 수 있음을 참고하자.</p>

<p><br />
문제를 풀기에 앞서 Deque가 무엇인지 알아보자.</p>

<blockquote>
  <p><strong>Deque</strong>란? <br />
Deque란 Double-Ended Queue의 줄임말로 <strong>큐의 양쪽에서 데이터를 삽입과 삭제를 할 수 있는 자료구조</strong>를 의미한다. <br />
덱(Deque)은 어떤 쪽으로 입력하고 어떤 쪽으로 출력하느냐에 따라서 스택(Stack)으로 사용할 수도 있고, 큐(Queue)로도 사용할 수 있다. <br />
특히 한쪽으로만 입력 가능하도록 설정한 덱을 스크롤(scroll)이라고 하며, 한쪽으로만 출력 가능하도록 설정한 덱을 셸프(shelf)라고 한다. <br />
Deque를 구현한 ArrayDeque, LinkedBlockingDeque, ConcurrentLinkedDeque, LinkedList 등의 클래스가 있다.</p>
</blockquote>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>N개의 명령어를 입력받으며 다음을 수행한다.</p>
<ul>
  <li>push [N] 명령어를 받으면 N을 큐에 삽입한다.</li>
  <li>pop 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 front(맨 앞값)를 추출하고 출력한다.</li>
  <li>size 명령어를 받으면 현재 큐의 삽입된 값의 개수를 출력한다.</li>
  <li>empty 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “1”, 비어있지 않다면 “0”을 출력한다.</li>
  <li>front 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 <strong>getFirst()</strong> 메서드를 이용해 현재 큐의 front(맨 앞) 값을 출력한다.</li>
  <li>back 명령어를 받으면 큐가 비어있는지 확인하고 비어있다면 “-1”, 비어있지 않다면 <strong>getLast()</strong> 메서드를 이용해 back(맨 뒤) 값을 출력**한다.</li>
</ul>

<p>문제에 활용할 Deque는 LinkedList와 동일하게 맨 앞과 맨 뒤 값에 접근이 가능하다.<br /></p>

<p><br /></p>

<p>작성한 코드의 구조는 <a href="https://jooney-95.github.io/java/128-post/">큐 2</a> 문제와 대부분 동일하다. <br />
Deque와 LinkedList에서 맨 앞값과 맨 뒤값을 구할 때 활용한 getFirst()와 getLast() 메서드를 중점으로 보면 된다. <br />
두가지 방식으로 작성한 코드는 하단에서 확인할 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<h4 id="작성코드---deque-활용">작성코드 - Deque 활용</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deq</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
                <span class="n">deq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="s">"pop"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="o">{</span>
                            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">poll</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"size"</span><span class="o">:</span>
                        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"front"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"back"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">getLast</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">default</span><span class="o">:</span>
                        <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="작성코드---linkedlist-인터페이스-활용">작성코드 - LinkedList 인터페이스 활용</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"push"</span><span class="o">))</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">switch</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="s">"pop"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="o">{</span>
                            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"size"</span><span class="o">:</span>
                        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"empty"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"0"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"front"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">getFirst</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"back"</span><span class="o">:</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">getLast</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">default</span><span class="o">:</span>
                        <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>이전에 풀어봤던 <a href="https://jooney-95.github.io/java/128-post/">큐 2</a> 문제와 거의 비슷한 문제이기에 같은 방식이 아닌 맨 뒤값을 제공해주는 Deque, LinkedList를 활용하는 방식으로 풀어보았다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/10845">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[10845번 - 큐]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-3) 4153번 - 직각삼각형</title><link href="http://localhost:4000/java/135-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-3) 4153번 - 직각삼각형" /><published>2022-12-03T00:00:00+09:00</published><updated>2022-12-03T00:00:00+09:00</updated><id>http://localhost:4000/java/135-post</id><content type="html" xml:base="http://localhost:4000/java/135-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/4153.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 피타고라스 정리의 개념만 알고 있다면 큰 문제없이 풀 수 있을 것이다.</p>

<blockquote>
  <p><strong>피타고라스의 정리</strong>란? <br />
직각을 낀 두변의 길이를 a, b라고 하고, 빗변의 길이를 c라고 했을 때 <code class="language-plaintext highlighter-rouge">a^2 + b^2 = c^2</code>가 성립된다.</p>
</blockquote>

<p>문제에서 유의할 점은 <strong>a, b, c의 위치가 특정되지 않았기에 별도로 정렬을 해야한다.</strong></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>공백을 기준으로 세 변의 길이값을 입력받아 배열에 저장한다.</li>
  <li>빗변의 길이가 가장 긴게 c이기에 배열을 오름차순으로 정렬하여 작은 값부터 큰 값 순서대로 a, b, c로 정한다.</li>
  <li>피타고라스 정리 공식을 활용해 직각삼각형 여부를 판단한다.</li>
</ul>

<p><br /></p>

<p>주어지는 세 변의 길이 중 가장 긴 길이를 c로 정한다면 피타고라스 정리 공식을 이용해 직각삼각형 여부를 알 수 있다. <br />
바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

    <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
    
    <span class="k">if</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"right"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"wrong"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>공백을 기준으로 한 줄에 세 변의 길이를 입력받아 배열에 저장하고 해당 배열을 오름차순으로 정렬한 뒤 순서대로 a, b, c에 대입한다. <br />
그리고 피타고라스 정리 공식 <code class="language-plaintext highlighter-rouge">a^2 + b^2 = c^2</code>을 적용하여 주어진 삼각형이 직각삼각형인지 판단하여 맞다면 “right”를, 틀리다면 “wrong”를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

            <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

            <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            
            <span class="k">if</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"right"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"wrong"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>주어진 세 변의 길이가 특정되지 않았기에 배열 정렬을 활용해 세 변 a, b, c를 정하여 직각삼각형 여부를 알아낼 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/4153">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[4153번 - 직각삼각형]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 15828번 - Router</title><link href="http://localhost:4000/java/134-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 15828번 - Router" /><published>2022-12-01T00:00:00+09:00</published><updated>2022-12-01T00:00:00+09:00</updated><id>http://localhost:4000/java/134-post</id><content type="html" xml:base="http://localhost:4000/java/134-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/15828-attach01.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/15828-attach02.png" width="100%" /></center>
<center><img src="/assets/images/baekjoon/15828-attach03.png" width="100%" /></center>

<p>자세한 테스트케이스 데이터는 <a href="https://www.acmicpc.net/problem/15828">문제링크</a>를 참고하자.</p>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 큐의 개념을 잘 알고 있다면 쉽게 풀 수 있는 문제이다.</p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>양수가 주어졌을 때 큐의 크기가 버퍼 크기(N)보다 작다면 양수를 큐에 삽입한다.</li>
  <li>0이 주어졌을 때 큐에서 값을 추출(삭제)한다.</li>
  <li>-1이 주어졌을 때 큐를 확인하여 큐가 비어있다면 “empty”를, 비어있지 않다면 큐의 원소를 출력한다.</li>
</ul>

<p><br />
테스트케이스를 잘 보면 큐의 <strong>선입선출 성질</strong>을 그대로 적용하였음을 알 수 있다. <br />
에제 1을 한번 살펴보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>N(버퍼의 크기) = 5, Q(큐).size = 0
1 =&gt; N &gt; Q.size =&gt; 큐에 1 삽입 Q[1]
2 =&gt; N &gt; Q.size =&gt; 큐에 2 삽입 Q[1, 2]
0 =&gt; 큐에서 1 추출 =&gt; Q[2]
3 =&gt; N &gt; Q.size =&gt; 큐에 3 삽입 Q[2, 3]
4 =&gt; N &gt; Q.size =&gt; 큐에 4 삽입 Q[2, 3, 4]
0 =&gt; 큐에서 2 추출 =&gt; Q[3, 4]
5 =&gt; N &gt; Q.size =&gt; 큐에 5 삽입 Q[3, 4, 5]
6 =&gt; N &gt; Q.size =&gt; 큐에 6 삽입 Q[3, 4, 5, 6]
0 =&gt; 큐에서 3 추출 =&gt; [4, 5, 6]
0 =&gt; 큐에서 6 추출 =&gt; [5, 6]
-1 =&gt; Q[5, 6] 출력
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같은 방식대로 요구사항에 대한 솔루션을 도출할 수 있다. 바로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>버퍼의 크기 N을 입력받고 연산간에 활용할 Queue를 하나 생성하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre> <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">info</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">if</span><span class="o">(</span><span class="n">info</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">info</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">info</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> 
    <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"empty"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">qu</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">num</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>핵심 로직에 대한 내용은 다음과 같다.</p>

<ol>
  <li>-1을 입력받을 때까지 while문으로 입력을 받는다.</li>
  <li>0보다 큰 양수를 입력받으면 N보다 큐의 크기가 작은지 확인하고 큐에 양수를 삽입한다.</li>
  <li>0을 입력받으면 현재 큐에서 원소 하나를 추출(삭제)한다.</li>
  <li>-1을 입력받는다면 while문을 탈출한 후 큐가 비어있는지 확인하여 비어있다면 “empty”를, 비어있지 않다면 큐의 원소를 출력하면 된다.</li>
</ol>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">info</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">info</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">info</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">info</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> 
            <span class="k">else</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"empty"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">qu</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">num</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>큐의 개념을 잘 숙지하고 있다면 쉽게 풀 수 있었던 문제였다. 큐를 응용하는 문제들도 많이 풀어봐야겠다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/15828">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[15828번 - Router]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 2609번 - 최대공약수와 최소공배수</title><link href="http://localhost:4000/java/133-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 2609번 - 최대공약수와 최소공배수" /><published>2022-11-30T00:00:00+09:00</published><updated>2022-11-30T00:00:00+09:00</updated><id>http://localhost:4000/java/133-post</id><content type="html" xml:base="http://localhost:4000/java/133-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2609.png" width="100%" /></center>

<p><br /><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이번 문제는 최대공약수를 구하는 것이 관건이다. <br />
최대공약수를 구하는데 특정 수의 약수가 매우 많다면, 인수분해 및 두수를 비교하여 곱하는 과정에서 많은 시간이 소요된다.<br />
그래서 <strong>유클리드 호제법</strong>을 활용하여 최대공약수를 구해야 한다.</p>

<p>유클리드 호제법을 활용한 풀이는 <a href="http://localhost:4000/java/28-post/">최대공약수와 최소공배수</a> 문제에서 자세히 다루었으니 참고하자.</p>

<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<ul>
  <li>두 수를 입력받고 두 수 중 큰수와 작은수를 구분하여 최대공약수와 최소공배수를 구한다.</li>
  <li>유클리드 호제법인 <strong>큰 수를 작은 수로나눈 나머지가 0보다 클 경우 재귀함수를 통해 0이 되는 시점의 작은 수을 반환</strong>하는 함수를 통해 최대공약수를 구한다.</li>
  <li>두 수의 곱을 최대공약수로 나누어 최소공배수를 구한다.</li>
</ul>

<p><br /></p>

<p>최대공약수와 최소공배수는 많이 접하고 풀어봤던 문제이기에 솝쉽게 아이디어를 낼 수 있었다. 이제 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="kt">int</span> <span class="n">bn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">sn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N과 M을 입력받고 큰 수 bn과 작은 수 sn을 정하여 저장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">GCD</span> <span class="o">=</span> <span class="n">eucd</span><span class="o">(</span><span class="n">bn</span><span class="o">,</span> <span class="n">sn</span><span class="o">);</span> <span class="c1">// 유클리드 호제법으로 최대공약수 구함</span>
<span class="kt">int</span> <span class="no">LCM</span> <span class="o">=</span> <span class="no">N</span> <span class="o">*</span> <span class="no">M</span> <span class="o">/</span> <span class="no">GCD</span><span class="o">;</span> <span class="c1">// 최소공배수</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="no">GCD</span><span class="o">+</span><span class="s">"\n"</span><span class="o">+</span><span class="no">LCM</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>    
</pre></td></tr></tbody></table></code></pre></div></div>
<p>eucd() 메서드에 큰 수와 작은 수를 인자로 넘겨 호출하고 해당 메서드로 구한 최대공약수를 가지고 최소공배수를 구하면 된다.</p>

<p><br /></p>

<p>eucd 메서드를 살퍄보면 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">static</span> <span class="kt">int</span> <span class="nf">eucd</span><span class="o">(</span><span class="kt">int</span> <span class="n">bn</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sn</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bn</span> <span class="o">%</span> <span class="n">sn</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">sn</span><span class="o">;</span>
    <span class="k">else</span> <span class="k">return</span> <span class="nf">eucd</span><span class="o">(</span><span class="n">sn</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>bn을 sn으로 나눈 나머지를 r에 저장하는데 r이 0보다 클 경우 재귀함수를 통해 0이 되는 시점의 sn을 반환하게 되면 최대공약수를 구할 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">bn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">sn</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">);</span>

        <span class="kt">int</span> <span class="no">GCD</span> <span class="o">=</span> <span class="n">eucd</span><span class="o">(</span><span class="n">bn</span><span class="o">,</span> <span class="n">sn</span><span class="o">);</span> <span class="c1">// 유클리드 호제법으로 최대공약수 구함</span>
        <span class="kt">int</span> <span class="no">LCM</span> <span class="o">=</span> <span class="no">N</span> <span class="o">*</span> <span class="no">M</span> <span class="o">/</span> <span class="no">GCD</span><span class="o">;</span> <span class="c1">// 최소공배수</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="no">GCD</span><span class="o">+</span><span class="s">"\n"</span><span class="o">+</span><span class="no">LCM</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>    

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>   

    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">eucd</span><span class="o">(</span><span class="kt">int</span> <span class="n">bn</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sn</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bn</span> <span class="o">%</span> <span class="n">sn</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">sn</span><span class="o">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="nf">eucd</span><span class="o">(</span><span class="n">sn</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>최대공약수를 구하는 알고리즘인 유클리드 호제법을 활용할 수 있었다.</li>
</ul>

<h3 id="출처">출처</h3>
<ul>
  <li>해당 문제의 저작권은 문제를 만든이에게 있으며 자세한 내용은 <a href="https://www.acmicpc.net/problem/2609">문제 링크</a>에서 참조바랍니다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[2609번 - 최대공약수와 최소공배수]]></summary></entry></feed>