<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-28T15:02:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lango’s DevLog</title><subtitle>developer</subtitle><author><name>lango</name></author><entry><title type="html">[Java] 백준(실버-3) 4948번 - 베르트랑 공준</title><link href="http://localhost:4000/java/85-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-3) 4948번 - 베르트랑 공준" /><published>2022-09-28T00:00:00+09:00</published><updated>2022-09-28T00:00:00+09:00</updated><id>http://localhost:4000/java/85-post</id><content type="html" xml:base="http://localhost:4000/java/85-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/4948.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
1
10
13
100
1000
10000
100000
0
</pre>

<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
1
4
3
21
135
1033
8392
</pre>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>먼저 베르트랑 공준이 무엇인지 궁금하여 찾아보았다. <br /></p>

<blockquote>
  <p><strong>베르트랑 공준</strong>이란? <br />
2 이상의 임의의 정수 n에 대해서 아래 식을 만족하는 소수 p는 항상 존재한다. <br /></p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>n &lt; p &lt; 2n
</pre></td></tr></tbody></table></code></pre></div>  </div>
</blockquote>

<p>문제에서는 베르트랑 공준 내용과 같이 n보다 크고 2n보다 작은 소수의 개수를 요구하고 있다. <br /></p>

<p>이전에 풀었던 소수나 소수의 개수를 구하는 문제와 같이 에라토스테네스의 체를 이용하여 소수의 개수를 구하려고 한다. <br /></p>

<p>생각해낸 아이디어는 다음과 같다.</p>
<ul>
  <li>n이 0으로 입력될 때까지 n을 입력받는다.</li>
  <li>boolean 배열에 2부터 n*2 까지 순회하면서 소수인 경우는 false, 소수가 아닐 때는 true로 마킹한다.</li>
  <li>n부터 n*2까지 반복하며 false의 개수 즉, 소수의 개수를 찾는다.</li>
</ul>

<p><br /></p>

<p>아이디어를 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>            
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 while문을 돌면서 n이 0으로 입력될 때까지 n을 입력받는다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>n<em>2+1 만큼 boolean 배열을 초기화하고, 소수가 아닌 0과 1 자리를 true로 마킹한다. <br />
그리고 2부터 n</em>2의 제곱근까지 순회하며 소수가 아닌 수들을 true로 마킹한다.</p>

<p>마킹된 boolean 배열에서 n보다 크고 2n보다 작은 소수를 구해야 하니 <strong>n이 소수일 때 n을 소수의 개수로 포함시키면 안된다.</strong> <br />
boolean 배열에서 n+1 위치부터 n*2 위치까지 돌며 false의 개수(소수의 개수)를 세면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>            

            <span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>에라토스테네스의 체를 이용해 소수나 소수의 개수를 구하는 문제를 풀어보며, 소수를 구할 때 가장 효율적인 알고리즘임을 매번 느끼고 있다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[실버3 - 4948번 - 베르트랑 공준]]></summary></entry><entry><title type="html">[Java] 백준(실버-2) 9020번 - 골드바흐의 추측</title><link href="http://localhost:4000/java/86-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-2) 9020번 - 골드바흐의 추측" /><published>2022-09-28T00:00:00+09:00</published><updated>2022-09-28T00:00:00+09:00</updated><id>http://localhost:4000/java/86-post</id><content type="html" xml:base="http://localhost:4000/java/86-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/9020.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br /></p>
</blockquote>
<pre>
3
8
10
16
</pre>

<blockquote>
  <p>Output <br /></p>
</blockquote>
<pre>
3 5
5 5
5 11
</pre>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>골드바흐의 추측이 뭔지 위키를 찾아보았다. <br /></p>

<blockquote>
  <p><strong>골드바흐의 추측</strong>이란? <br />
이전부터 알려진 정수론의 미해결 문제로, <strong>2보다 큰 모든 짝수는 두 개의 소수의 합</strong>으로 표시할 수 있다는 것이다.<br />
이때 하나의 소수를 두 번 사용하는 것을 허용한다.</p>
  <ul>
    <li>골드바흐의 강한 추측: 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다.</li>
    <li>골드바흐의 약한 추측: 5보다 큰 모든 홀수는 세 소수의 합으로 나타낼 수 있다.</li>
  </ul>
</blockquote>

<p>이 문제에서는 골드바흐 파티션, 즉 2보다 큰 모든 짝수를 두 소수의 합으로 나타내는 골드바흐의 강한 추측을 이용하여 두 소수를 구해야 한다.</p>

<p>두 소수를 구하기 위한 아이디어를 생각해보았다.</p>
<ul>
  <li>n을 2로 나눈 수가 소수라면 n/2+n/2는 n이다.</li>
  <li>n을 2로 나눈 수가 소수가 아니라면 소수가 될 때까지 -1을 하거나 +1을 한다.</li>
</ul>

<p><br /><br /></p>

<p>2보다 큰 짝수들의 예를 들어보면 금방 이해할 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>n=16 -&gt; n/2=8(not prime number), 7(8-1)+9(8+1)=16
n=18 -&gt; n/2=9(not prime number), 7(9-2)+11(9+2)=18
n=20 -&gt; n/2=10(not prime number), 9(10-1)+11(10+1)=20
n=22 -&gt; n/2=11(prime number), 11+11=22
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p>그렇다면 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    
    <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">small</span><span class="o">)==</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">isPrime</span><span class="o">(</span><span class="n">big</span><span class="o">)==</span><span class="mi">2</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">small</span><span class="o">-=</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">big</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">small</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">big</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>테스트케이스 개수인 T를 입력받고, T만큼 n을 입력받는다. <br />
두 소수를 가지고 n을 구해야 하니 먼저 n/2를 두 수(small, big)에 저장해두자. <br />
그리고 <strong>small에는 -1을 big에는 +1을 하며 두 수가 소수가 될 때까지 반복</strong>하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            
            <span class="kt">int</span> <span class="n">small</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
            
            <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">small</span><span class="o">)==</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">isPrime</span><span class="o">(</span><span class="n">big</span><span class="o">)==</span><span class="mi">2</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="n">small</span><span class="o">-=</span><span class="mi">1</span><span class="o">;</span>
                    <span class="n">big</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">small</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">big</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">isPrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
        <span class="o">}</span>   
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>두 소수의 합으로 2보다 큰 짝수를 구할 수 있는 골드바흐의 추측에 대해 공부할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[9020번 - 골드바흐의 추측]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-1) 11653번 - 소인수분해</title><link href="http://localhost:4000/java/83-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-1) 11653번 - 소인수분해" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/java/83-post</id><content type="html" xml:base="http://localhost:4000/java/83-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/11653.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>72</strong> <br />
Output-1 <br />
<strong>2</strong> <br />
<strong>2</strong> <br />
<strong>2</strong> <br />
<strong>3</strong> <br />
<strong>3</strong> <br /></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>9991</strong> <br />
Output-2 <br />
<strong>97</strong> <br />
<strong>103</strong> <br /></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제를 풀기 앞서 소인수분해가 뭔지 알아보자. <br /></p>

<blockquote>
  <p><strong>소인수분해</strong>란? <br />
1보다 큰 자연수를 소인수(소수인 인수)들만의 곱으로 나타내는 것 또는 합성수를 <strong>소수의 곱</strong>으로 나타내는 방법을 말한다. <br />
쉽게 말하자면 소수들의 곱으로 어떠한 수를 표현하는 것이다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>4 = 2*2(2의2승)
48 = 2*2*2*2*3(2의4승 * 3)
72 = 2*2*2*3*3(2의3승 * 3의2승)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그렇다면 N을 가지고 어떻게 소인수분해를 할 수 있을까? <br /></p>
<ul>
  <li>2부터 N까지 반복하며 N이 나눠지는 지를 확인한다.</li>
  <li>N이 소수로 나눠진다면 N을 소수로 나눈다.</li>
</ul>

<p>위 과정을 반복하여 N이 1이 된다면 소인수분해가 끝난 것으로 생각하면 된다. 문제 요구사항대로 소수들의 곱을 출력해야 하기에 N이 소수로 나눠질때 소수를 출력하자. <br /></p>

<p><br /></p>

<p>그렇다면 소인수분해 과정을 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="no">N</span> <span class="o">/=</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N을 입력받고, 2부터 N까지 반복하는 반복문 안에서 N이 i로 나눠진다면 i를 출력하고, N을 i로 나누고 i보다 작은 1이 될때까지 반복하게 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
                <span class="no">N</span> <span class="o">/=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>소인수 분해를 코드로 표현하며, 특정 수를 소수들의 곱으로 나타낼 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[기본수학2 - 브론즈1 - 소인수분해(11653번)]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 2581번 - 소수</title><link href="http://localhost:4000/java/82-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 2581번 - 소수" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/java/82-post</id><content type="html" xml:base="http://localhost:4000/java/82-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2581.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>60</strong> <br />
<strong>100</strong> <br />
Output-1 <br />
<strong>620</strong> <br />
<strong>61</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>64</strong> <br />
<strong>65</strong> <br />
Output-2 <br />
<strong>-1</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 간단하게 M부터 N까지의 수중에서 소수를 찾아, 소수 중 최소값과 소수들의 합을 구하면 된다. <br />
ArrayList를 활용하여 소수들을 찾아 담아 최소값과 소수의 합을 구할 수 있다.</p>

<p>코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prime_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저, M과 N을 입력받고, 소수들을 저장할 ArrayList와 소수들의 합을 저장할 sum 변수를 초기화한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">prime_list</span><span class="o">)</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span><span class="o">;</span>

<span class="k">if</span><span class="o">(</span><span class="n">prime_list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>M부터 N까지 반복하면서 소수들을 찾아 ArrayList에 저장한다. <br />
primeList를 전부 탐색하여 sum에 더하면 소수들의 합을 구할 수 있다.
M은 N보다 작거나 같기에 prime_list는 오름차순으로 저장되어 있다. 그러므로 첫번째 원소가 최소값임을 알 수 있다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prime_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">prime_list</span><span class="o">)</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="n">prime_list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sum</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span> <span class="n">prime_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"-1"</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">isPrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
        <span class="o">}</span>   
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>M부터 N까지 소수가 얼마나 존재하는지 모르기에 ArrayList를 활용하여 소수들을 담아서 최솟값과 소수들의 합을 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[기본수학2 - 실버5 - 소수]]></summary></entry><entry><title type="html">[Java] 백준(실버-3) 1929번 - 소수 구하기</title><link href="http://localhost:4000/java/84-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-3) 1929번 - 소수 구하기" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/java/84-post</id><content type="html" xml:base="http://localhost:4000/java/84-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/1929.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br />
<strong>3 16</strong></p>
</blockquote>

<blockquote>
  <p>Output <br />
<strong>3</strong> <br />
<strong>5</strong> <br />
<strong>7</strong> <br />
<strong>11</strong> <br />
<strong>13</strong> <br /></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제에서는 M과 N의 범위(최대 1,000,000) 및 제한 시간(2초)을 생각했을 때 <strong>완전탐색을 활용해 2부터 하나하나 나눠보는 것은 O(N^2)의 시간복잡도를 기지므로 시간초과가 발생</strong>하게 된다. 완전탐색 보다는 소수를 구할 때 효울적인 <strong>‘에라토스테네스의 체’</strong> 알고리즘을 활용해야 한다.</p>

<p>에라토스테네스의 체를 활용해 도출한 아이디어는 다음과 같다.</p>
<ul>
  <li>실행 시간을 줄이기 위해 불필요한 반복을 줄여야한다.</li>
  <li>M부터 N까지 모든 수를 반복하며 마킹할 필요없이 마킹할 수의 제곱근 만큼만 반복한다.</li>
  <li>마킹된 수의 배수는 소수가 아니기에 검증하지 않는다.</li>
  <li>마킹이 안된 수(소수)만 출력한다.</li>
</ul>

<p><br /></p>

<p>아이디어를 통해 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 2부터 N까지 반복하며 마킹을 기록할 배열을 선언하고, 0과 1은 소수가 아니기에 true로 마킹한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="no">N</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 2부터 N의 제곰근까지 반복하면서 소수가 아닌 수의 위치에 true로 마킹한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그렇게 2부터 N까지 마킹된 배열에서 M번째 인덱스부터 마킹이 안된 수인 소수를 출력하면 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">prime_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">prime_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">prime_arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="no">N</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">prime_arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">prime_arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>O(NloglogN)의 시간복잡도를 가진 에라토스테네스의 체를 활용해 제한시간 2초에 맞춰 문제를 풀 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[실버3 - 1929번 - 소수 구하기]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 캐시</title><link href="http://localhost:4000/java/81-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 캐시" /><published>2022-09-23T00:00:00+09:00</published><updated>2022-09-23T00:00:00+09:00</updated><id>http://localhost:4000/java/81-post</id><content type="html" xml:base="http://localhost:4000/java/81-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220923_01.png" width="700" /></center>
<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>cacheSize=3, cities=[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”, “Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”]</strong> <br />
Output-1 <br />
<strong>50</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>cacheSize=3, cities=[“Jeju”, “Pangyo”, “Seoul”, “Jeju”, “Pangyo”, “Seoul”, “Jeju”, “Pangyo”, “Seoul”]</strong> <br />
Output-2 <br />
<strong>21</strong></p>
</blockquote>

<blockquote>
  <p>Input-3 <br />
<strong>cacheSize=0, cities=[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”]</strong> <br />
Output-3 <br />
<strong>25</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>문제를 풀기에 앞서 캐시와 캐시 교체 정책에 대해서 알아보자. <br /></p>

<blockquote>
  <p><strong>캐시</strong>란? <br />
캐시는 데이터나 값을 <strong>미리 복사해 놓는 임시 장소</strong>이다. 캐시에 데이터를 미리 복사해 놓으면, 계산이나 접근 시간 없이 더 빠른 속도로 데이터에 접근할 수 있다.</p>
</blockquote>

<blockquote>
  <p><strong>캐시 교체 정책</strong> <br />
캐시에 모든 데이터를 다 담아둘 수 없기에, 캐시크기는 제한되고 새로운 캐시로 변경되어야 하는데, <br />
캐시 교체 정책을 통해 어떤 데이터를 삭제하고, 새로운 데이터를 캐시로 저장할지를 캐시 교체 정책 알고리즘을 통해 결정할 수 있다. <br /></p>
</blockquote>

<p><strong>캐시 교체 정책 알고리즘의 종류</strong></p>
<ol>
  <li>FIFO(First in First Out)
    <ul>
      <li>가장 먼저 들어간 캐시를 교체한다.</li>
    </ul>
  </li>
  <li>LFU(Least Frequently Used)
    <ul>
      <li>사용 횟수가 가장 적은 캐시를 교체한다.</li>
    </ul>
  </li>
  <li><strong>LRU(Least Recently Used)</strong>
    <ul>
      <li>가장 오랫동안 사용되지 않은 것 교체한다.</li>
    </ul>
  </li>
</ol>

<p>이 문제에서는 캐시 교체 정책중 <strong>LRU 알고리즘</strong>을 활용하여 문제를 풀어야 한다.</p>

<h4 id="lruleast-recently-used">LRU(Least Recently Used)</h4>
<p>캐시 공간이 부족할 때, <strong>가장 오랫동안 사용하지 않은 데이터를 제거하고, 새로운 캐시를 부여</strong>하는 형식으로 동작한다.</p>

<p>예를 들어 캐시 공간이 3이라고 할 때, 1,2,3,2 순으로 데이터가 들어온다고 하자. <br />
1,2,3 까지는 캐시가 등록이 되는데, 마지막 2가 들어올 때, 2를 사용한 기록이 있기에 2를 최근 캐시로 등록하면 된다. (cache=[1,3,2])</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>1. cache size=3, 1 -&gt; 2 -&gt; 3 순차 호출
    [tail] 1-2-3 [head]
2. 2 캐시 등록: 2를 head로 이동.
    [tail] 1-3-2 [head]
3. 4 캐시 등록: LRU는 1이므로 1 제거.
    [tail] 3-2-4 [head]
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h4 id="아이디어-도출">아이디어 도출</h4>
<p>캐시와 캐시 교체 정책중 하나인 LRU에 대해서 알았으니, 문제를 풀어보자. <br />
문제 요구사을 살펴보고 생각해낸 아이디어는 다음과 같다.</p>
<ul>
  <li>cache <strong>hit일 경우는 최근 캐시에 요청한 데이터가 존재할 경우</strong>이고 <strong>cache miss는 최근 캐시에 요청한 데이터가 존재하지 않을 경우</strong>이다. <br />
    <ul>
      <li>cache hit일 때는 1, cache miss일 때는 5씩을 증가시키면 된다.</li>
    </ul>
  </li>
  <li>cache size가 0일 때는 어떤 데이터가 들어와도 5의 실행시간이 걸린다.</li>
  <li>cache의 공간이 차면 LRU 대로 가장 오래된 tail 요소부터 제거하고 새로운 데이터를 저장한다.</li>
</ul>

<p><br /></p>

<p>이제 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 캐시로 사용할 Queue를 LinkedList로 초기화한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cities</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">city</span> <span class="o">=</span> <span class="n">cities</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">toLowerCase</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">city</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">qu</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
            <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>캐시 사이즈가 0이라면, cities에 어떤 데이터가 있더라도 데이터마다 5의 실행시간이 걸리기 때문에 가장 바깥 조건문으로 작성하였다. <br />
그리고 최근 캐시에 존재하는 데이터가 들어오면 해당 데이터를 head로 옮기고, 처음 들어오는 데이터라면 head에 바로 등록한다. <br />
이 때, 캐시의 공간이 부족하다면 tail을 제거하고 새로운 데이터를 head에 추가한다.</p>

<p><br /><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">cities</span> <span class="o">=</span> <span class="o">{</span><span class="s">"Jeju"</span><span class="o">,</span> <span class="s">"Pangyo"</span><span class="o">,</span> <span class="s">"Seoul"</span><span class="o">,</span> <span class="s">"NewYork"</span><span class="o">,</span> <span class="s">"LA"</span><span class="o">,</span> <span class="s">"Jeju"</span><span class="o">,</span> <span class="s">"Pangyo"</span><span class="o">,</span> <span class="s">"Seoul"</span><span class="o">,</span> <span class="s">"NewYork"</span><span class="o">,</span> <span class="s">"LA"</span><span class="o">};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "NewYork", "newyork"};</span>
        <span class="c1">// String[] cities = {"Jeju", "Pangyo", "Seoul", "NewYork", "LA"};</span>
        <span class="c1">// String[] cities = {"1","2","3","2"};</span>
        <span class="c1">// String[] cities = {"1","1"};</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">cities</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">cities</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">qu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">cities</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">city</span> <span class="o">=</span> <span class="n">cities</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">toLowerCase</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">city</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
                    <span class="n">qu</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                    <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">qu</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">qu</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                        <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="n">qu</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>캐시에 대해서 공부하며, 캐시 동작 원리, 캐시 교체 정책에 대해서 알 수 있었다.</li>
  <li>Queue(큐)를 통해 LinkedList를 활용하여 캐시를 구현할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 캐시]]></summary></entry><entry><title type="html">[Java] 백준(실버-5) 1978번 - 소수 찾기</title><link href="http://localhost:4000/java/80-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-5) 1978번 - 소수 찾기" /><published>2022-09-22T00:00:00+09:00</published><updated>2022-09-22T00:00:00+09:00</updated><id>http://localhost:4000/java/80-post</id><content type="html" xml:base="http://localhost:4000/java/80-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10757.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input</p>
</blockquote>
<pre>
4
1 3 5 7
</pre>
<blockquote>
  <p>Output<br />
<strong>3</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 주어진 N개 수중에서 소수의 개수를 구해야 한다. <br />
소수 자체를 찾는건 어느 정도 공부하였으니, 각 N마다 소수인지를 판별하면 된다. <br /></p>
<ul>
  <li>소수는 1과 자기 자신만을 약수로 가지기 때문에, N이 1과 자기 자신으로만 나누어 떨어지면 소수이다.</li>
</ul>

<p><br /></p>

<p>그렇다면 코드를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">prime_list</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">prime_list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N개의 수를 입력받기 위해 N을 입력받고, 공백을 기준으로 각 N개의 수를 입력받아 int배열에 저장한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_list</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">prime_list</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 저장한 배열만큼 반복하며 isPrime() 함수를 통해 1과 자신만을 가지니 2가 반환된다면 소수이기에 cnt를 증가시킨다. <br />
위 과정을 반복하며 배열의 각각의 N이 소수인지를 판별한다. <br /></p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">isPrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>   
    <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>1과 자기 자신 수로만 나눠 떨어진다면 count를 2가 되고, 소수가 아닌 수는 count가 3이 된다.</p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
    
        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">prime_list</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">prime_list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">prime_list</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">isPrime</span><span class="o">(</span><span class="n">prime_list</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="n">cnt</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">isPrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
        <span class="o">}</span>   
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>N이 소수인지를 확인하려면 1과 자기 자신만을 약수로 가지는지 검증하면 된다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[기본수학2 - 실버5 - 소수 찾기]]></summary></entry><entry><title type="html">[Java] 백준(브론즈-5) 10757번 - 큰 수 A+B</title><link href="http://localhost:4000/java/78-post/" rel="alternate" type="text/html" title="[Java] 백준(브론즈-5) 10757번 - 큰 수 A+B" /><published>2022-09-22T00:00:00+09:00</published><updated>2022-09-22T00:00:00+09:00</updated><id>http://localhost:4000/java/78-post</id><content type="html" xml:base="http://localhost:4000/java/78-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/10757.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input <br />
<strong>9223372036854775807 9223372036854775808</strong> <br />
Output<br />
<strong>18446744073709551615</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제에서 주어지는 입력값의 경우 최대 10의 10000승으로 일반적으로 큰 값에 활욛되는 long 타입의 범위를 초과한다. <br />
문자열을 입력받아 직접 덧셈을 구현하는 방식과 BigInteger 클래스를 활용하는 방식 두가지로 풀어보았다.</p>

<p><br /></p>

<h4 id="biginteger-활용">BigInteger 활용</h4>
<p>보통 정수는 int를 많이 사용하고, int의 표현 범위를 넘어서면 long형을 사용해야 한다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">-</th>
      <th style="text-align: center">int</th>
      <th style="text-align: center">long</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">저장공간</td>
      <td style="text-align: center">4byte</td>
      <td style="text-align: center">8byte</td>
    </tr>
    <tr>
      <td style="text-align: center">범위</td>
      <td style="text-align: center">-2147483648 ~ 2147483647</td>
      <td style="text-align: center">-9223372036854775808 ~ 9223372036854775807</td>
    </tr>
  </tbody>
</table>

<p><br />
문제에선 10의 10000승으로 long형의 범위를 아득히 뛰어넘기 때문에 문자열로 취급하는 BigInteger 클래스를 사용할 수 있다.</p>

<blockquote>
  <p><strong>BigInteger</strong>란? <br />
long형을 뛰어넘는 더 큰 범위의 정수를 다룰 때 사용하는 클래스로 java.math 패키지에 속한다. 사칙연산을 활용할 때 기호로 할 수 없고 BigInteger에서 제공하는 메서드를 이용해야 한다. <br />
클래스 객체로 선언하여 파라미터로 문자열을 넘겨주고, add 메서드로 덧셈을 할 수 있다.</p>
</blockquote>

<p>BigInteger 클래스를 활용한 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">BigInteger</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="nc">BigInteger</span> <span class="no">B</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">B</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>코드는 간단하다. BigInteger A와 B를 입력 문자열대로 만들어서 add()메서드로 A+B 덧셈연산을 하였다.</p>

<p><br /><br /></p>

<h4 id="직접-덧셈-구현">직접 덧셈 구현</h4>
<p>BigInteger 클래스를 활용하여 간단하게 풀 수도 있지만, 직접 덧셈을 구현해보는 것도 재밌겠다 싶어 직접 덧셈을 구현해보았다. <br />
덧셈을 구현하기 위해 정한 아이디어는 다음과 같다.</p>
<ul>
  <li>입력받은 A와 B를 가장 낮은 자리수부터 덧셈을 해야하기 때문에 <strong>역순으로 배열에 저장</strong>하여 서로를 덧셈한다.</li>
  <li>두 수를 덧셈했을 때, <strong>더 큰 자리수를 가진 수의 길이를 덧셈 결과 배열의 길이</strong>로 해야 한다.</li>
  <li>두 수를 덧셈하여 10이 넘어가면, <strong>현재 자리는 10으로 나눈 나머지가 값이 되고, 다음 자리값에 +1</strong>을 해준다.</li>
</ul>

<p><br />
위 아이디어대로 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="nc">String</span> <span class="n">str_A</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
<span class="nc">String</span> <span class="n">str_B</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>먼저 두 수 A와 B를 입력받자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">big_len</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">str_A</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">str_B</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그리고 실제 두 수의 덧셈을 진행할때 더 큰 자리수만큼 덧셈연산을 해야 하기에 더 큰 자리수의 길이를 저장해둔다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[]</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">big_len</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="no">B</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">big_len</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str_A</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">str_A</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str_A</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)-</span><span class="sc">'0'</span><span class="o">;</span>
<span class="o">}</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str_B</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">str_B</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str_B</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)-</span><span class="sc">'0'</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이제 문자열 A와 B를 역순으로 각 배열에 저장한다. <br />
<strong>저장할 때 ‘0’을 빼준 이유는 charAt()을 통해 char형으로 변환되어 있기에 ‘0’인 48씩을 빼주어야 실제 값을 저장할 수 있기 때문이다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">big_len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">%</span><span class="mi">10</span><span class="o">;</span>
    <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="o">(</span><span class="n">sum</span><span class="o">/</span><span class="mi">10</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>A배열과 B배열에 가장 낮은 자리순으로 저장했으니, A,B 중 큰 수 길이만큼 반복하며 덧셈 연산을 진행하면 된다. <br />
유의할 점은 덧셈 결과를 A배열에 씌워야 덧셈 연산을 올바로 진행할 수 있다. <br /> 
<strong>A의 현재 자리값은 두수의 합을 10으로 나눈 나머지값이 되고, 다음 자리값은 A 현재 자리에 두수의 합을 10으로 나눈 몫을 더해주면 된다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="k">if</span><span class="o">(</span><span class="no">A</span><span class="o">[</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]!=</span><span class="mi">0</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="no">A</span><span class="o">[</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>

<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>또한 낮은 자리수부터 역순으로 큰 자리수의 길이만큼 덧셈연산을 하기에 제일 앞 수 즉, 가장 높은 자리수가 0일 수도 있다. <strong>가장 높은 자리수는 0이 아닐때만 출력</strong>하면 된다. <br />
역순으로 가장 낮은 자리수부터 덧셈 연산을 하여 거꾸로 A배열에 씌워졌으니, A배열을 거꾸로 출력하면 A와 B의 덧셈 연산 결과가 된다.</p>

<p><br /><br /></p>

<h3 id="실행-결과">실행 결과</h3>
<p>BigInteger보다 직접 덧셈을 구현한 방식이 더 빠른 것을 확인할 수 있었다.</p>
<h4 id="biginteger-활용-소요시간">BigInteger 활용 소요시간</h4>
<p><img src="/assets/images/baekjoon/10757-attach1.png" />
<br /></p>

<p>BigInteger 클래스는 코드는 간단하지만 문자열 검사 같은 처리해야 하는 과정이 있기에 더 느렸던 것으로 보인다.</p>

<h4 id="직접-덧셈-구현-소요시간">직접 덧셈 구현 소요시간</h4>
<p><img src="/assets/images/baekjoon/10757-attach2.png" />
<br /></p>

<p><br /><br /></p>

<h3 id="작성코드">작성코드</h3>
<h4 id="biginteger-활용-작성코드">BigInteger 활용 작성코드</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">BigInteger</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="nc">BigInteger</span> <span class="no">B</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">B</span><span class="o">)+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="덧셈-구현-작성코드">덧셈 구현 작성코드</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        
        <span class="nc">String</span> <span class="n">str_A</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">str_B</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>

        <span class="kt">int</span> <span class="n">big_len</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">str_A</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">str_B</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">big_len</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="no">B</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">big_len</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str_A</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">str_A</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str_A</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)-</span><span class="sc">'0'</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str_B</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">str_B</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str_B</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)-</span><span class="sc">'0'</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">big_len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="no">B</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">%</span><span class="mi">10</span><span class="o">;</span>
            <span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="o">(</span><span class="n">sum</span><span class="o">/</span><span class="mi">10</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">if</span><span class="o">(</span><span class="no">A</span><span class="o">[</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]!=</span><span class="mi">0</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="no">A</span><span class="o">[</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>BigInteger 클래스에 대해서 공부할 수 있었고, 해당 클래스로 간단하게 풀 수 있는 문제지만, 직접 덧셈을 구현하는 코드를 작성하며, 덧셈을 어떻게 구현할 수 있을까? 재미있게 고민했던 것 같다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[기본수학1 - 브론즈5 - 큰 수 A+B]]></summary></entry><entry><title type="html">[Java] 프로그래머스(level-2) - 점프와 순간 이동</title><link href="http://localhost:4000/java/79-post/" rel="alternate" type="text/html" title="[Java] 프로그래머스(level-2) - 점프와 순간 이동" /><published>2022-09-22T00:00:00+09:00</published><updated>2022-09-22T00:00:00+09:00</updated><id>http://localhost:4000/java/79-post</id><content type="html" xml:base="http://localhost:4000/java/79-post/"><![CDATA[<p><br /></p>
<center><img src="/assets/images/programmers/20220922_01.png" width="700" /></center>
<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>5</strong> <br />
Output-1 <br />
<strong>2</strong></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>6</strong> <br />
Output-2 <br />
<strong>2</strong></p>
</blockquote>

<blockquote>
  <p>Input-3 <br />
<strong>5000</strong> <br />
Output-3 <br />
<strong>5</strong></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 N의 범위가 최대 10억이기에 효율성을 잘 고려해야 한다. <br />
n을 2로 나눠가며 건전지 카운트를 세는 방식과 n을 2진수로 변환한 후 1의 개수를 세는 두가지 방식으로 풀어보았다.</p>

<p>먼저 문제에서 순간이동하고 K번 점프하는 패턴을 살펴보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>n=1, 0-&gt;1
    건전지 1 사용
n=2, 0-&gt;1, 1*2=2
    건전지 1 사용
n=3, 0-&gt;1, 1*2=2, 2-&gt;3
    건전지 2 사용
n=4, 0-&gt;1, 1*2=2, 2*2=4
    건전지 1 사용
n=5, 0-&gt;1, 1*2=2, 2*2=4, 4-&gt;5
    건전지 2 사용
n=6, 0-&gt;1, 1*2=2, 2-&gt;3, 3*2=6
    건전지 2 사용
n=7, 0-&gt;1, 1*2=2, 2-&gt;3, 3*2=6, 6-&gt;7
    건전지 3 사용
n=8, 0-&gt;1, 1*2=2, 2*2=4, 4*2=8
    건전지 1 사용
n=9, 0-&gt;1, 1*2=2, 2*2=4, 4*2=8, 8-&gt;9
    건전지 2 사용
n=10, 0-&gt;1, 1*2=2, 2*2=4, 4-&gt;5, 5*2=10
    건전지 2 사용
</pre></td></tr></tbody></table></code></pre></div></div>
<p>2로 나눠떨어지는 수의 경우 건전지 사용수가 1이고, 아니라면 건전지를 1 추가로 사용해야 함을 알 수 있다.</p>

<p><br /><br /></p>

<h4 id="2로-나눠가며-2로-나눠-떨어지는지-검증하기">2로 나눠가며 2로 나눠 떨어지는지 검증하기</h4>
<p>주어진 n까지 반복하며 카운트를 세는 방식은 시간이 오래 걸리기에 거꾸로 <strong>n에서부터 0이 될 때까지 나누는 방식</strong>으로 풀어보니 정답이었다. <br />
만약 n이 2로 나눠 떨어진다면 건전지를 사용하지 않아도 된다. 그런데 <strong>2로 나눠 떨어지지 않는 수라면 (2로 나눠떨어지는 수)+1</strong> 로 구성됨을 알 수 있다. <br />
그렇다면 결국 2로 나눠 떨어지지 않을 때 건전지를 1씩 사용할 수 밖에 없고, 다음 <strong>n-1을 하여 2로 나눠떨어지는 수</strong>로 검증하면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>15 -&gt; 15%2!=0 -&gt; 14+1 
14 -&gt; 14%2==0
7 -&gt; 7%2!=0 -&gt; 6+1
6 -&gt; 6%2==0
3 -&gt; 3%2!=0 -&gt; 2+1
2 -&gt; 2%2==0
1 -&gt; 1%2!=0 -&gt; 0+1
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<p>위 아이디어를 코드로 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="n">ans</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>2로 나눠떨어지는 수라면 n을 n/2 값으로 변경하고 다시 반복한다. <br />
2로 나눠떨어지지 않는 수라면 n을 (n-1)/2 값으로 변경하고 건전지 사용 수를 1 증가시킨다.<br />
n이 0이 될 때까지 위 과정을 반복하면 건전지를 최소로 사용할 수 있다.</p>

<p><br /><br /></p>

<h4 id="2진수-변환후-1의-개수-세기">2진수 변환후 1의 개수 세기</h4>
<p>문제를 보고 2를 곱하는 것으로 보아 n을 <strong>2진수로 변환한 후의 1의 개수</strong>인가 살펴보았고, 예상한 대로였다. <br />
1의 개수를 셀 때 반복문으로 세면 시간초과가 발생하기에 본 2진수 문자열 길이에서 1을 제외한 2진수 문자열 길이를 빼줌으로 1의 개수를 셀 수 있었다.</p>

<p>작성한 코드는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">binary</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
<span class="k">return</span> <span class="n">binary</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">binary</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="s">""</span><span class="o">).</span><span class="na">length</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h3 id="작성-코드">작성 코드</h3>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n수행시간 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 2로 나눠떨어지는지 검증</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
                <span class="n">ans</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution2</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 2진수 변환하고 1의 개수 세기</span>
        <span class="nc">String</span> <span class="n">binary</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">binary</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">binary</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="s">""</span><span class="o">).</span><span class="na">length</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>2와 연관지어 문제에 접근해야 하기 때문에 나눗셈연산, 나머지연산 등 여러 방식을 고민해볼 수 있었고, 2진수 변환후 1의 개수을 통해서도 정답을 낼 수 있었다.</li>
  <li>특정 문자의 개수를 셀 때, String의 replace() 메서드를 통해 본 문자열 길이에서 특정 문자가 제거된 문자열 길이를 빼 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="programmers" /><summary type="html"><![CDATA[level 2 - 점프와 순간 이동]]></summary></entry><entry><title type="html">[Java] 백준(실버-4) 2839번 - 설탕 배달</title><link href="http://localhost:4000/java/77-post/" rel="alternate" type="text/html" title="[Java] 백준(실버-4) 2839번 - 설탕 배달" /><published>2022-09-21T00:00:00+09:00</published><updated>2022-09-21T00:00:00+09:00</updated><id>http://localhost:4000/java/77-post</id><content type="html" xml:base="http://localhost:4000/java/77-post/"><![CDATA[<p><br /></p>

<center><img src="/assets/images/baekjoon/2839.png" /></center>

<p><br /></p>

<p><strong>입출력 예시</strong></p>
<blockquote>
  <p>Input-1 <br />
<strong>18</strong> <br />
Output-1<br />
<strong>4</strong> <br /></p>
</blockquote>

<blockquote>
  <p>Input-2 <br />
<strong>6</strong> <br />
Output-2<br />
<strong>2</strong> <br /></p>
</blockquote>

<blockquote>
  <p>Input-3 <br />
<strong>11</strong> <br />
Output-3<br />
<strong>3</strong> <br /></p>
</blockquote>

<p><br /></p>

<h3 id="문제-풀이">문제 풀이</h3>
<hr />
<p>이 문제는 반복문과 조건문을 활용한 두 가지 방식으로 풀어보았다. <br />
이 문제의 핵심은 <strong>N이 5의 배수로 이루어질 때 봉지의 수가 최소</strong>가 된다는 점이다. <br />
그리고 <strong>N이 4일 때와 7일 때는 애초에 봉지의 개수를 구할 수 없기에 -1을 반환</strong>해야 함을 유의해야 한다.</p>

<p><br /></p>

<h4 id="반복문-활용-풀이">반복문 활용 풀이</h4>
<p>먼저 반복문을 활용해 풀어보자. <br />
단순하게 <strong>N이 5의 배수가 될때까지 3을 빼주는 과정을 반복</strong>하면 된다. <br />
N이 5의 배수라면 봉지의 개수는 N/5 개가 된다. 아니라면, N을 3씩 빼준다. <br />
위 과정을 반복하며 N이 0보다 작아진다면 반복문을 탈출한다.</p>

<p>그렇다면 반복문을 활용하여 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">while</span><span class="o">(</span><span class="no">N</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cnt</span> <span class="o">+=</span> <span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="no">N</span> <span class="o">-=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="n">cnt</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>while문에서 N이 5의 배수라면 봉지의 개수 cnt에 N/5개를 더해주고, 5의 배수가 아니라면 3씩 빼주면서 봉지의 개수를 1씩 증가시킨다. <br />
N을 3씩 빼주다가 0보다 작아지면 while문을 탈출한다.</p>

<p><br /><br /></p>

<h4 id="조건문-활용-풀이">조건문 활용 풀이</h4>
<p>반복문을 사용하지 않고도 풀 수 없을까 고민하며 손으로 N과 5의 나머지와 몫을 적어가던 중 하나의 패턴을 발견했다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">N</th>
      <th style="text-align: center">봉지의 개수</th>
      <th style="text-align: center">N/5</th>
      <th style="text-align: center">N%5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">3</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">-1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>6</strong></td>
      <td style="text-align: center"><strong>2</strong></td>
      <td style="text-align: center"><strong>1</strong></td>
      <td style="text-align: center"><strong>1</strong></td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">-1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>8</strong></td>
      <td style="text-align: center"><strong>2</strong></td>
      <td style="text-align: center"><strong>1</strong></td>
      <td style="text-align: center"><strong>3</strong></td>
    </tr>
    <tr>
      <td style="text-align: center">9</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">10</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>11</strong></td>
      <td style="text-align: center"><strong>3</strong></td>
      <td style="text-align: center"><strong>2</strong></td>
      <td style="text-align: center"><strong>1</strong></td>
    </tr>
    <tr>
      <td style="text-align: center">12</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>13</strong></td>
      <td style="text-align: center"><strong>3</strong></td>
      <td style="text-align: center"><strong>2</strong></td>
      <td style="text-align: center"><strong>3</strong></td>
    </tr>
    <tr>
      <td style="text-align: center">14</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">15</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>16</strong></td>
      <td style="text-align: center"><strong>4</strong></td>
      <td style="text-align: center"><strong>3</strong></td>
      <td style="text-align: center"><strong>1</strong></td>
    </tr>
    <tr>
      <td style="text-align: center">17</td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>18</strong></td>
      <td style="text-align: center"><strong>4</strong></td>
      <td style="text-align: center"><strong>3</strong></td>
      <td style="text-align: center"><strong>3</strong></td>
    </tr>
    <tr>
      <td style="text-align: center">19</td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">20</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">0</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>위 표를 보면 N이 <strong>5의배수+1이거나 5의배수+3</strong> 일때 봉지의 수가 같고, N이 <strong>5의배수+2이거나 5의배수+4</strong> 일때 봉지의 수가 같음을 알 수 있다. <br />
5의 배수를 기준으로 1~4까지의 차에 따라 봉지의 개수를 구할 수 있다.</p>
<ul>
  <li>5의배수일 때, 봉지의 개수 = N/5</li>
  <li>5의배수+1 또는 5의배수+3일 때, 봉지의 개수 = <strong>(N/5)+1</strong></li>
  <li>5의배수+2 또는 5의배수+4일 때, 봉지의 개수 = <strong>(N/5)+2</strong></li>
</ul>

<p>위에서 구한 조건을 활용해 코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span> <span class="o">=</span> <span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">;</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">3</span><span class="o">)</span> <span class="n">cnt</span> <span class="o">=</span> <span class="o">(</span><span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">)+</span><span class="mi">1</span><span class="o">;</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">4</span><span class="o">)</span> <span class="n">cnt</span> <span class="o">=</span> <span class="o">(</span><span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">)+</span><span class="mi">2</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>N이 5의 배수일 때는 5로 나눈 몫이 봉지의 개수가 되고, 5의배수+1 또는 5의배수+3 라면 5로 나눈 몫+1 값이 봉지의 개수가 된다. <br />
마지막으로 5의배수+2 또는 5의배수+4 라면 5로 나눈 몫+2 값이 봉지의 개수가 된다.</p>

<p><br /></p>

<h3 id="작성코드">작성코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="no">N</span><span class="o">==</span><span class="mi">4</span> <span class="o">||</span> <span class="no">N</span><span class="o">==</span><span class="mi">7</span><span class="o">)</span> <span class="n">cnt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// cnt = loop(N, cnt);</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="n">condi</span><span class="o">(</span><span class="no">N</span><span class="o">,</span> <span class="n">cnt</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">loop</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="no">N</span> <span class="o">-=</span> <span class="mi">3</span><span class="o">;</span>
                <span class="n">cnt</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="no">N</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">cnt</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">condi</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">cnt</span> <span class="o">=</span> <span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">;</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">3</span><span class="o">)</span> <span class="n">cnt</span> <span class="o">=</span> <span class="o">(</span><span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">)+</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="no">N</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">4</span><span class="o">)</span> <span class="n">cnt</span> <span class="o">=</span> <span class="o">(</span><span class="no">N</span><span class="o">/</span><span class="mi">5</span><span class="o">)+</span><span class="mi">2</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">cnt</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="회고">회고</h3>
<ul>
  <li>5의배수라는 기준을 두고 얼마냐 차이가 나는지를 통해 반복문 없이 조건문만으로 봉지의 개수를 구할 수 있었다.</li>
</ul>]]></content><author><name>lango</name></author><category term="Java" /><category term="blog" /><category term="algorithm" /><category term="study" /><category term="java" /><category term="baekjoon" /><summary type="html"><![CDATA[실버 4 - 설탕 배달]]></summary></entry></feed>